<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python-Web 开发入门001-搭建Web开发虚拟环境、Django Demo</title>
    <url>/2022/04/06/Python-Web-%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8001-%E6%90%AD%E5%BB%BAWeb%E5%BC%80%E5%8F%91%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E3%80%81Django-Demo/</url>
    <content><![CDATA[<h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><p>pip install virtualenv</p>
<h4 id="pip的使用"><a href="#pip的使用" class="headerlink" title="pip的使用"></a>pip的使用</h4><p>pip目前的python中均已自带，如果2.7之前的老版本需要安装，则用easy_install来安装pip。</p>
<p>pip基本操作，如安装卸载Django 2.0.7</p>
<p>安装 pip install Django==2.0.7</p>
<p>卸载 pip uninstall Django==2.0.7</p>
<p>其他重要命令：</p>
<p>pip list 查看已安装的 软件包</p>
<p>pip freeze 查看通过pip安装的软件包</p>
<p>pip show Django查看软件包的详细信息</p>
<p>pip install–upgrade Django更新软件包。</p>
<h4 id="虚拟环境搭建，virtualenv库"><a href="#虚拟环境搭建，virtualenv库" class="headerlink" title="虚拟环境搭建，virtualenv库"></a>虚拟环境搭建，virtualenv库</h4><p>pip3 install virtualenv</p>
<p>查看virtualenv –help，注意目前没有–no-site-package（确保安装的虚拟环境不会有 已经安装过的包文件）选项。</p>
<p>则使用virtualenv -p D:\pythontest\python.exe env来创建虚拟环境，</p>
<p>进入env/Scripts中，执行【activate】使其激活，【deactivate】退出虚拟环境。</p>
<h4 id="Django-demo项目搭建"><a href="#Django-demo项目搭建" class="headerlink" title="Django demo项目搭建"></a>Django demo项目搭建</h4><p>环境准备，同上。</p>
<p>在venv目录下创建目录：mkdir env wordspace</p>
<p>创建虚拟环境：virtualenv -p D:\pythontest\python.exe env</p>
<p>在env/Scripts中，执行【activate】激活当前虚拟环境env</p>
<p>安装Django：pip install Django==2.0.7</p>
<p>验证一下pip list或者python进入解释器，分别执行import django，django.VERSION查看对应版本。</p>
<h4 id="第一个Django项目"><a href="#第一个Django项目" class="headerlink" title="第一个Django项目"></a>第一个Django项目</h4><p>一般使用django-admin命令来快速创建。</p>
<p>激活env环境，在env/Scripts中，执行【activate】激活当前虚拟环境env</p>
<p>进入wordspace，创建hello的django项目，命令：django-admin startproject hello</p>
<p>一般只需要修改settings.py和urls.py，另外 几个不用动。</p>
<p>创建一个路由app_name:python manage.py startapp app_name</p>
<p>修改前一步骤中的settings.py，INSTALLED_APPS中添加’app_name’, ###new line选项。</p>
<p>此时在浏览器中可以输入<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a> 来访问默认admin的路由。</p>
<h4 id="路由配置和视图的使用"><a href="#路由配置和视图的使用" class="headerlink" title="路由配置和视图的使用"></a>路由配置和视图的使用</h4><p>urls.py中添加不同的路由：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app_name <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">r&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">r&#x27;hello/&#x27;</span>, views.hello),</span><br><span class="line">    path(<span class="string">r&#x27;multiplication/&#x27;</span>, views.multiplication),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在app_name下的views.py中添加对应的处理路由函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Hello Python!&#x27;</span>)</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiplication</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        table = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                table += <span class="string">&#x27;&#123;&#125;*&#123;&#125;=&#123;&#125;\t&#x27;</span>.<span class="built_in">format</span>(i, j, i*j)</span><br><span class="line">            table += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(table, content_type=<span class="string">&quot;text/plain&quot;</span>)</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python处理Excel电子表格</title>
    <url>/2022/01/11/Python%E5%A4%84%E7%90%86Excel%E7%94%B5%E5%AD%90%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h3 id="Python处理Excel电子表格"><a href="#Python处理Excel电子表格" class="headerlink" title="Python处理Excel电子表格"></a>Python处理Excel电子表格</h3><h4 id="Excel文档的几个概念"><a href="#Excel文档的几个概念" class="headerlink" title="Excel文档的几个概念"></a>Excel文档的几个概念</h4><ul>
<li>一个Excel电子表格文档，一般称为一个工作簿</li>
<li>工作簿中可以包含多个sheet页，为工作表</li>
<li>工作表中列从A开始，行从1开始，行和列相交的部分，为单元格。</li>
<li>单元格中存储的内容，为value值。</li>
</ul>
<p>1．导入 openpyxl 模块。</p>
<p>2．调用 openpyxl.load_workbook()函数。</p>
<p>3．取得 Workbook 对象。</p>
<p>4．调用 get_active_sheet()或 get_sheet_by_name()工作簿方法。</p>
<p>5．取得 Worksheet 对象。</p>
<p>6．使用索引或工作表的 cell()方法，带上 row 和 column 关键字参数。</p>
<p>7．取得 Cell 对象。</p>
<p>8．读取 Cell 对象的 value 属性。</p>
<h4 id="安装openpyxl模块"><a href="#安装openpyxl模块" class="headerlink" title="安装openpyxl模块"></a>安装openpyxl模块</h4><p>import openpyxl</p>
<p>如果有报错，没有对应模块，则使用命令导入<strong>pip install openpyxl</strong></p>
<h4 id="读取Excel文档"><a href="#读取Excel文档" class="headerlink" title="读取Excel文档"></a>读取Excel文档</h4><p>从<a href="http://nostarch.com/automatestuff/%E4%B8%8B%E8%BD%BD%E4%B9%A6%E4%B8%AD%E6%89%80%E6%9C%89%E4%BE%8B%E5%AD%90%E6%96%87%E6%A1%A3%EF%BC%8C%E5%9C%A8Automate_the_Boring_Stuff_2e_onlinematerials.zip%E6%96%87%E6%A1%A3%E4%B8%AD">http://nostarch.com/automatestuff/下载书中所有例子文档，在Automate_the_Boring_Stuff_2e_onlinematerials.zip文档中</a></p>
<p>获取example.xlsx文件。</p>
<ul>
<li><p>用openpyxl模块打开Excel文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;example.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(wb))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>&lt;class ‘openpyxl.workbook.workbook.Workbook’&gt;</p>
</li>
<li><p>从工作簿中取得工作表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;example.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># print(type(wb))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.&#x27;</span> + <span class="built_in">str</span>(wb.get_sheet_names()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br><span class="line"><span class="comment">#print(&#x27;x.&#x27; + str())</span></span><br><span class="line">sheet = wb.get_sheet_by_name(<span class="string">&#x27;Sheet3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3.&#x27;</span> + <span class="built_in">str</span>(sheet))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;4.&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">type</span>(sheet)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;5.&#x27;</span> + <span class="built_in">str</span>(sheet.title))</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;Workbook&#x27; object has no attribute &#x27;get_active_sheet&#x27;,有报错，无此属性</span></span><br><span class="line"><span class="comment"># anotherSheet = wb.get_active_sheet()</span></span><br><span class="line"><span class="comment"># print(&#x27;6.&#x27; + str(anotherSheet))</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>1.[‘Sheet1’, ‘Sheet2’, ‘Sheet3’]<br>2.[‘Sheet1’, ‘Sheet2’, ‘Sheet3’]<br>3.&lt;Worksheet “Sheet3”&gt;<br>4.&lt;class ‘openpyxl.worksheet.worksheet.Worksheet’&gt;<br>5.Sheet3</p>
</li>
<li><p>从表中取得单元格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;example.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.get_sheet_by_name(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.&#x27;</span> + <span class="built_in">str</span>(sheet[<span class="string">&#x27;A1&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2.&#x27;</span> + <span class="built_in">str</span>(sheet[<span class="string">&#x27;A1&#x27;</span>].value))</span><br><span class="line">c = sheet[<span class="string">&#x27;B1&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3.&#x27;</span> + <span class="built_in">str</span>(c.value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;4.&#x27;</span> + <span class="string">&#x27;Row &#x27;</span> + <span class="built_in">str</span>(c.row) + <span class="string">&#x27;, Column &#x27;</span> + <span class="built_in">str</span>(c.column) + <span class="string">&#x27; is &#x27;</span> + <span class="built_in">str</span>(c.value))</span><br><span class="line"><span class="comment">###B1是单元格，coordinate属性提供位置信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;5.&#x27;</span> + <span class="string">&#x27;Cell &#x27;</span> + c.coordinate + <span class="string">&#x27; is &#x27;</span> + c.value)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;6.&#x27;</span> + <span class="built_in">str</span>(sheet[<span class="string">&#x27;C1&#x27;</span>].value))</span><br><span class="line"></span><br><span class="line"><span class="comment">###另一种实现方法，直接通过给ceil传递行和列的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;7.&#x27;</span> + <span class="built_in">str</span>(sheet.cell(row=<span class="number">1</span>, column=<span class="number">2</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;8.&#x27;</span> + <span class="built_in">str</span>(sheet.cell(row=<span class="number">1</span>, column=<span class="number">2</span>).value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;9.&#x27;</span>,i, sheet.cell(row=i, column=<span class="number">2</span>).value)</span><br><span class="line"></span><br><span class="line"><span class="comment">##无此属性&#x27;Worksheet&#x27; object has no attribute &#x27;get_highest_column&#x27;</span></span><br><span class="line"><span class="comment"># print(&#x27;10.&#x27; + str(sheet.get_highest_row()))</span></span><br><span class="line"><span class="comment"># print(&#x27;11.&#x27; + str(sheet.get_highest_column()))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###输出：</span></span><br><span class="line"><span class="number">1.</span>&lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.A1&gt;</span><br><span class="line"><span class="number">2.2015</span>-04-05 <span class="number">13</span>:<span class="number">34</span>:02</span><br><span class="line"><span class="number">3.</span>Apples</span><br><span class="line"><span class="number">4.</span>Row <span class="number">1</span>, Column <span class="number">2</span> <span class="keyword">is</span> Apples</span><br><span class="line"><span class="number">5.</span>Cell B1 <span class="keyword">is</span> Apples</span><br><span class="line"><span class="number">6.73</span></span><br><span class="line"><span class="number">7.</span>&lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.B1&gt;</span><br><span class="line"><span class="number">8.</span>Apples</span><br><span class="line"><span class="number">9.</span> <span class="number">1</span> Apples</span><br><span class="line"><span class="number">10.</span> <span class="number">3</span> Pears</span><br><span class="line"><span class="number">11.</span> <span class="number">5</span> Apples</span><br><span class="line"><span class="number">12.</span> <span class="number">7</span> Strawberries</span><br></pre></td></tr></table></figure></li>
<li><p>从表中获取行和列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;example.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.get_sheet_by_name(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">tuple</span>(sheet[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;C3&#x27;</span>])))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rowOfCellObjects <span class="keyword">in</span> sheet[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;C3&#x27;</span>]:</span><br><span class="line">    <span class="keyword">for</span> cellObj <span class="keyword">in</span> rowOfCellObjects:</span><br><span class="line">	    <span class="built_in">print</span>(cellObj.coordinate, cellObj.value)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;--- END OF ROW ---&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">###输出：</span></span><br><span class="line"><span class="number">1.</span>((&lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.A1&gt;, &lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.B1&gt;, &lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.C1&gt;), (&lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.A2&gt;, &lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.B2&gt;, &lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.C2&gt;), (&lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.A3&gt;, &lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.B3&gt;, &lt;Cell <span class="string">&#x27;Sheet1&#x27;</span>.C3&gt;))</span><br><span class="line">A1 <span class="number">2015</span>-04-05 <span class="number">13</span>:<span class="number">34</span>:02</span><br><span class="line">B1 Apples</span><br><span class="line">C1 <span class="number">73</span></span><br><span class="line">--- END OF ROW ---</span><br><span class="line">A2 <span class="number">2015</span>-04-05 03:<span class="number">41</span>:<span class="number">23</span></span><br><span class="line">B2 Cherries</span><br><span class="line">C2 <span class="number">85</span></span><br><span class="line">--- END OF ROW ---</span><br><span class="line">A3 <span class="number">2015</span>-04-06 <span class="number">12</span>:<span class="number">46</span>:<span class="number">51</span></span><br><span class="line">B3 Pears</span><br><span class="line">C3 <span class="number">14</span></span><br><span class="line">--- END OF ROW ---</span><br></pre></td></tr></table></figure></li>
<li><p>项目实战：从电子表格中读取数据</p>
<p>假定你有一张电子表格的数据，来自于 2010 年美国人口普查。你有一个无聊的任</p>
<p>务，要遍历表中的几千行，计算总的人口，以及每个县的普查区的数目（普查区就是一</p>
<p>个地理区域，是为人口普查而定义的）。每行表示一个人口普查区。我们将这个电子表格</p>
<p>文件命名为 censuspopdata.xlsx，可以从 <a href="http://nostarch.com/automatestuff/%E4%B8%8B%E8%BD%BD%E5%AE%83%E3%80%82">http://nostarch.com/automatestuff/下载它。</a></p>
<p>尽管 Excel 是要能够计算多个选中单元格的和，你仍然需要选中 3000 个以上县</p>
<p>的单元格。即使手工计算一个县的人口只需要几秒钟，整张电子表格也需要几个小</p>
<p>时时间。</p>
<p>在这个项目中，你要编写一个脚本，从人口普查电子表格文件中读取数据，并</p>
<p>在几秒钟内计算出每个县的统计值。</p>
<p>下面是程序要做的事：</p>
<p>• 从 Excel 电子表格中读取数据。</p>
<p>• 计算每个县中普查区的数目。</p>
<p>• 计算每个县的总人口。</p>
<p>• 打印结果。</p>
<p>这意味着代码需要完成下列任务：</p>
<p>• 用 openpyxl 模块打开 Excel 文档并读取单元格。</p>
<p>• 计算所有普查区和人口数据，将它保存到一个数据结构中。</p>
<p>• 利用 pprint 模块，将该数据结构写入一个扩展名为.py 的文本文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># readCensusExcel.py - Tabulates population and number of census tracts for</span></span><br><span class="line"><span class="comment"># each county.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl, pprint</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Opening workbook...&#x27;</span>)</span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;censuspopdata.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.get_sheet_by_name(<span class="string">&#x27;Population by Census Tract&#x27;</span>)</span><br><span class="line">countyData = &#123;&#125;</span><br><span class="line"><span class="comment"># Fill in countyData with each county&#x27;s population and tracts.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Reading rows...&#x27;</span>)</span><br><span class="line">rownummax = sheet.max_row + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(rownummax)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,rownummax):</span><br><span class="line">    <span class="comment"># Each row in the spreadsheet has data for one census tract.</span></span><br><span class="line">    state  = sheet[<span class="string">&#x27;B&#x27;</span> + <span class="built_in">str</span>(row)].value</span><br><span class="line">    county = sheet[<span class="string">&#x27;C&#x27;</span> + <span class="built_in">str</span>(row)].value</span><br><span class="line">    pop    = sheet[<span class="string">&#x27;D&#x27;</span> + <span class="built_in">str</span>(row)].value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make sure the key for this state exists.</span></span><br><span class="line">    countyData.setdefault(state, &#123;&#125;)</span><br><span class="line">    <span class="comment"># Make sure the key for this county in this state exists.</span></span><br><span class="line">    countyData[state].setdefault(county, &#123;<span class="string">&#x27;tracts&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;pop&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Each row represents one census tract, so increment by one.</span></span><br><span class="line">    countyData[state][county][<span class="string">&#x27;tracts&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># Increase the county pop by the pop in this census tract.</span></span><br><span class="line">    countyData[state][county][<span class="string">&#x27;pop&#x27;</span>] += <span class="built_in">int</span>(pop)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open a new text file and write the contents of countyData to it.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Writing results...&#x27;</span>)</span><br><span class="line">resultFile = <span class="built_in">open</span>(<span class="string">&#x27;census2020.py&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">resultFile.write(<span class="string">&#x27;allData = &#x27;</span> + pprint.pformat(countyData))</span><br><span class="line">resultFile.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###使用方法：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">&#x27;C:\\Python34&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> census2020</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>census2020.allData[<span class="string">&#x27;AK&#x27;</span>][<span class="string">&#x27;Anchorage&#x27;</span>]</span><br><span class="line">&#123;<span class="string">&#x27;pop&#x27;</span>: <span class="number">291826</span>, <span class="string">&#x27;tracts&#x27;</span>: <span class="number">55</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>anchoragePop = census2020.allData[<span class="string">&#x27;AK&#x27;</span>][<span class="string">&#x27;Anchorage&#x27;</span>][<span class="string">&#x27;pop&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;The 2010 population of Anchorage was &#x27;</span> + <span class="built_in">str</span>(anchoragePop))</span><br><span class="line">The <span class="number">2010</span> population of Anchorage was <span class="number">291826</span></span><br></pre></td></tr></table></figure>

<h4 id="写入Excel文档"><a href="#写入Excel文档" class="headerlink" title="写入Excel文档"></a>写入Excel文档</h4><ul>
<li><p>创建并保存Excel对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.Workbook()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br><span class="line">sheet = wb.active</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2.&#x27;</span> + <span class="built_in">str</span>(sheet.title))</span><br><span class="line">sheet.title = <span class="string">&#x27;Spam Bacon Eggs Sheet&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br></pre></td></tr></table></figure></li>
<li><p>创建和删除工作表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.Workbook()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br><span class="line"></span><br><span class="line">wb.create_sheet()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br><span class="line"></span><br><span class="line">wb.create_sheet(index=<span class="number">0</span>, title=<span class="string">&#x27;First Sheet&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br><span class="line"></span><br><span class="line">wb.create_sheet(index=<span class="number">2</span>, title=<span class="string">&#x27;Middle Sheet&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;4.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br><span class="line"></span><br><span class="line"><span class="comment"># wb.remove_sheet(wb.get_sheet_by_name(&#x27;Middle Sheet&#x27;))</span></span><br><span class="line"><span class="comment"># wb.remove_sheet(wb.get_sheet_by_name(&#x27;Sheet1&#x27;))</span></span><br><span class="line"><span class="keyword">del</span> wb[<span class="string">&#x27;Middle Sheet&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> wb[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;5.&#x27;</span> + <span class="built_in">str</span>(wb.sheetnames))</span><br><span class="line"></span><br><span class="line"><span class="comment">####结果：</span></span><br><span class="line"><span class="number">1.</span>[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line"><span class="number">2.</span>[<span class="string">&#x27;Sheet&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"><span class="number">3.</span>[<span class="string">&#x27;First Sheet&#x27;</span>, <span class="string">&#x27;Sheet&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"><span class="number">4.</span>[<span class="string">&#x27;First Sheet&#x27;</span>, <span class="string">&#x27;Sheet&#x27;</span>, <span class="string">&#x27;Middle Sheet&#x27;</span>, <span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line"><span class="number">5.</span>[<span class="string">&#x27;First Sheet&#x27;</span>, <span class="string">&#x27;Sheet&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>将值写入单元格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.Workbook()</span><br><span class="line">sheet = wb[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line">sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1.&#x27;</span> + <span class="built_in">str</span>(sheet[<span class="string">&#x27;A1&#x27;</span>].value))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>项目实战</p>
</li>
</ul>
<p>这个项目需要编写一个程序，更新产品销售电子表格中的单元格。程序将遍历这个电子表格，找到特定类型的产品，并更新它们的价格。每一行代表一次单独的销售。列分别是销售产品的类型（A）、产品每磅的价格（B）、销售的磅数（C），以及这次销售的总收入。TOTAL 列设置为 Excel 公式，将每磅的成本乘以销售的磅数，并将结果取整到分。有了这个公式，如果列 B 或 C 发 生变化，TOTAL 列中的单元格将自动更新。</p>
<p>现在假设 Garlic、Celery 和 Lemons 的价格输入的不正确。这让你面对一项无聊的任务：遍历这个电子表格中的几千行，更新所有 garlic、celery 和 lemon 行中每磅的价格。你不能简单地对价格查找替换，因为可能有其他的产品价格一样，你不希望错误地“更正”。对于几千行数据，手工操作可能要几小时。但你可以编写程序，几秒钟内完成这个任务。</p>
<p>你的程序做下面的事情：</p>
<p>• 循环遍历所有行。</p>
<p>• 如果该行是 Garlic、Celery 或 Lemons，更新价格。</p>
<p>这意味着代码需要做下面的事情：</p>
<p>• 打开电子表格文件。</p>
<p>• 针对每一行，检查列 A 的值是不是 Celery、Garlic 或 Lemon。 </p>
<p>• 如果是，更新列 B 中的价格。</p>
<p>• 将该电子表格保存为一个新文件（这样就不会丢失原来的电子表格，以防万一）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># updateProduce.py - Corrects costs in produce sales spreadsheet.</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;produceSales.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># The produce types and their updated prices</span></span><br><span class="line"><span class="comment">###注意，这里用字典比用if else判断比较好，因为后续只需要修改字典值即可，不用修改代码，解耦合</span></span><br><span class="line">PRICE_UPDATES = &#123;<span class="string">&#x27;Garlic&#x27;</span>: <span class="number">3.08</span>,</span><br><span class="line"><span class="string">&#x27;Celery&#x27;</span>: <span class="number">1.29</span>,</span><br><span class="line"><span class="string">&#x27;Lemon&#x27;</span>: <span class="number">1.37</span>&#125;</span><br><span class="line"><span class="comment"># Loop through the rows and update the prices.</span></span><br><span class="line"><span class="keyword">for</span> rowNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, sheet.max_row + <span class="number">1</span>): <span class="comment"># skip the first row</span></span><br><span class="line">    produceName = sheet.cell(row=rowNum, column=<span class="number">1</span>).value</span><br><span class="line">    <span class="keyword">if</span> produceName <span class="keyword">in</span> PRICE_UPDATES:</span><br><span class="line">        sheet.cell(row=rowNum, column=<span class="number">2</span>).value = PRICE_UPDATES[produceName]</span><br><span class="line">wb.save(<span class="string">&#x27;updatedProduceSales.xlsx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="设置单元格的字体风格"><a href="#设置单元格的字体风格" class="headerlink" title="设置单元格的字体风格"></a>设置单元格的字体风格</h4><p>from openpyxl.styles import Font, Style</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Style</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_sheet_by_name(<span class="string">&#x27;Sheet&#x27;</span>)</span><br><span class="line"> &gt;&gt;&gt; italic24Font = Font(size=<span class="number">24</span>, italic=<span class="literal">True</span>)</span><br><span class="line"> &gt;&gt;&gt; styleObj = Style(font=italic24Font)</span><br><span class="line"> &gt;&gt;&gt; sheet[<span class="string">&#x27;A&#x27;</span>].style/styleObj</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;Hello world!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;styled.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Font对象"><a href="#Font对象" class="headerlink" title="Font对象"></a>Font对象</h4><p>Font style 属性的关键字参数</p>
<p>关键字参数 </p>
<p>数据类型 </p>
<p>描述</p>
<p>name </p>
<p>字符串 </p>
<p>字体名称，诸如’Calibri’</p>
<p>或’Times New Roman’</p>
<p>size </p>
<p>整型 </p>
<p>大小点数</p>
<p>bold </p>
<p>布尔型 </p>
<p>True 表示粗体</p>
<p>italic </p>
<p>布尔型 </p>
<p>True 表示斜体</p>
<p>可以调用 Font()来创建一个 Font 对象，并将这个 Font 对象保存在一个变量中。</p>
<p>然后将它传递给 Style()，得到 的 Style 对象保存在一个变量中，并将该变量赋给 Cell</p>
<p>对象的 style 属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Style</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_sheet_by_name(<span class="string">&#x27;Sheet&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fontObj1 = Font(name=<span class="string">&#x27;Times New Roman&#x27;</span>, bold=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>styleObj1 = Style(font=fontObj1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A1&#x27;</span>].style/styleObj</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;Bold Times New Roman&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fontObj2 = Font(size=<span class="number">24</span>, italic=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>styleObj2 = Style(font=fontObj2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;B3&#x27;</span>].style/styleObj</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;B3&#x27;</span>] = <span class="string">&#x27;24 pt Italic&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;styles.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A2&#x27;</span>] = <span class="number">300</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A3&#x27;</span>] = <span class="string">&#x27;=SUM(A1:A2)&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;writeFormula.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wbFormulas = openpyxl.load_workbook(<span class="string">&#x27;writeFormula.xlsx&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wbFormulas.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A3&#x27;</span>].value</span><br><span class="line"><span class="string">&#x27;=SUM(A1:A2)&#x27;</span></span><br><span class="line"><span class="comment">###如果你希望看到该公式的计算结果，而不是原来的公式，就必须将 load_workbook()的 data_only 关键字参数设置为 True。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wbDataOnly = openpyxl.load_workbook(<span class="string">&#x27;writeFormula.xlsx&#x27;</span>, data_only=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wbDataOnly.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A3&#x27;</span>].value</span><br><span class="line"><span class="number">500</span></span><br></pre></td></tr></table></figure>



<h4 id="调整行与列"><a href="#调整行与列" class="headerlink" title="调整行与列"></a>调整行与列</h4><ul>
<li><p>设置行高与列宽</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;Tall row&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;B2&#x27;</span>] = <span class="string">&#x27;Wide column&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.row_dimensions[<span class="number">1</span>].height = <span class="number">70</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.column_dimensions[<span class="string">&#x27;B&#x27;</span>].width = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;dimensions.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>合并和拆分单元格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.merge_cells(<span class="string">&#x27;A1:D3&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;A1&#x27;</span>] = <span class="string">&#x27;Twelve cells merged together.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.merge_cells(<span class="string">&#x27;C5:D5&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet[<span class="string">&#x27;C5&#x27;</span>] = <span class="string">&#x27;Two merged cells.&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;merged.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.load_workbook(<span class="string">&#x27;merged.xlsx&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.unmerge_cells(<span class="string">&#x27;A1:D3&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.unmerge_cells(<span class="string">&#x27;C5:D5&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;merged.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>冻结窗口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">freeze_panes 的设置 冻结的行和列</span><br><span class="line">sheet.freeze_panes = <span class="string">&#x27;A2&#x27;</span> 行 <span class="number">1</span></span><br><span class="line">sheet.freeze_panes = <span class="string">&#x27;B1&#x27;</span> 列 A</span><br><span class="line">sheet.freeze_panes = <span class="string">&#x27;C1&#x27;</span> 列 A 和列 B</span><br><span class="line">sheet.freeze_panes = <span class="string">&#x27;C2&#x27;</span> 行 <span class="number">1</span> 和列 A 和列 B</span><br><span class="line">sheet.freeze_panes = <span class="string">&#x27;A1&#x27;</span>或</span><br><span class="line">sheet.freeze_panes = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.load_workbook(<span class="string">&#x27;produceSales.xlsx&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.freeze_panes = <span class="string">&#x27;A2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;freezeExample.xlsx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>图标</p>
<p>openpyxl 支持利用工作表中单元格的数据，创建条形图、折线图、散点图和饼</p>
<p>图。要创建图表，需要做下列事情：</p>
<p>1．从一个矩形区域选择的单元格，创建一个 Reference 对象。</p>
<p>2．通过传入 Reference 对象，创建一个 Series 对象。</p>
<p>3．创建一个 Chart 对象。</p>
<p>4．将 Series 对象添加到 Chart 对象。</p>
<p>5．可选地设置Chart 对象的drawing.top、drawing.left、drawing.width 和drawing.height</p>
<p>变量。</p>
<p>6．将 Chart 对象添加到 Worksheet 对象。</p>
<p>Reference 对象需要一些解释。Reference 对象是通过调用 openpyxl.charts. Reference()</p>
<p>函数并传入 3 个参数创建的：</p>
<p>1．包含图表数据的 Worksheet 对象。</p>
<p>2．两个整数的元组，代表矩形选择区域的左上角单元格，该区域包含图表数</p>
<p>据：元组中第一个整数是行，第二个整数是列。请注意第一行是 1，不是 0。 </p>
<p>3．两个整数的元组，代表矩形选择区域的右下角单元格，该区域包含图表数</p>
<p>据：元组中第一个整数是行，第二个整数是列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = openpyxl.Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet = wb.get_active_sheet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>): <span class="comment"># create some data in column A</span></span><br><span class="line">sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(i)] = i</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>refObj = openpyxl.charts.Reference(sheet, (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">10</span>, <span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seriesObj = openpyxl.charts.Series(refObj, title=<span class="string">&#x27;First series&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chartObj = openpyxl.charts.BarChart()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chartObj.append(seriesObj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chartObj.drawing.top = <span class="number">50</span> <span class="comment"># set the position</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chartObj.drawing.left = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chartObj.drawing.width = <span class="number">300</span> <span class="comment"># set the size</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chartObj.drawing.height = <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sheet.add_chart(chartObj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;sampleChart.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python错误调试</title>
    <url>/2022/01/03/Python%E9%94%99%E8%AF%AF%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>抛出异常：停止执行此函数代码，将程序执行转到except语句。</p>
<p>raise语句，包含：</p>
<ul>
<li>raise关键字</li>
<li>对Exception函数的调用</li>
<li>传递给Exception函数的字符串，包含有用的出错信息。</li>
</ul>
<p>try except使用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boxPrint</span>(<span class="params">symbol, width, height</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(symbol) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;使用的字符须是单个字符.&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> width &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;宽度必须是大于2.&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> height &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;高度必须是大于2.&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(symbol * width)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(height - <span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(symbol + (<span class="string">&#x27; &#x27;</span> * (width - <span class="number">2</span>)) + symbol)</span><br><span class="line">    <span class="built_in">print</span>(symbol * width)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sym, w, h <span class="keyword">in</span> ((<span class="string">&#x27;*&#x27;</span>, <span class="number">4</span>, <span class="number">4</span>),(<span class="string">&#x27;0&#x27;</span>, <span class="number">20</span>, <span class="number">5</span>), (<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>, <span class="number">3</span>),(<span class="string">&#x27;ZZ&#x27;</span>, <span class="number">3</span>, <span class="number">3</span>),(<span class="string">&#x27;a&#x27;</span>, <span class="number">8</span>, <span class="number">5</span>)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        boxPrint(sym, w, h)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该错误的原因:&#x27;</span> + <span class="built_in">str</span>(err))</span><br></pre></td></tr></table></figure>



<h4 id="取得反向跟踪的字符串"><a href="#取得反向跟踪的字符串" class="headerlink" title="取得反向跟踪的字符串"></a>取得反向跟踪的字符串</h4><p>可以使用traceback模块处理异常。</p>
<p>参考：<a href="https://www.cnblogs.com/shangpolu/p/7206348.html">https://www.cnblogs.com/shangpolu/p/7206348.html</a></p>
<p>交互环境调试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import traceback</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    raise Exception(&#x27;this is the error message&#x27;)</span><br><span class="line">except:</span><br><span class="line">    errorFile = open(&#x27;errorInfo.txt&#x27;, &#x27;w&#x27;)</span><br><span class="line">    errorFile.write(traceback.format_exc())</span><br><span class="line">    errorFile.close()</span><br><span class="line">    print(&#x27;the traceback info was written to errorInfo.txt&#x27;)</span><br></pre></td></tr></table></figure>

<p>输出errorInfo.txt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span><br><span class="line">Exception: this is the error message</span><br></pre></td></tr></table></figure>



<h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p>asser 语句：</p>
<p>assert 条件 ，当条件为False时显示的字符串。</p>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><ul>
<li><p>使用日志模块</p>
<p>作用：</p>
<ul>
<li><p>程序调试</p>
</li>
<li><p>了解软件程序运行情况，是否正常</p>
</li>
<li><p>软件程序运行故障分析与问题定位</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level= logging.DEBUG, <span class="built_in">format</span>= <span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>不要使用print</p>
</li>
<li><p>日志级别</p>
<table>
<thead>
<tr>
<th>日志等级（level）</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DEBUG</td>
<td>最详细的日志信息，典型应用场景是 问题诊断</td>
</tr>
<tr>
<td>INFO</td>
<td>信息详细程度仅次于DEBUG，通常只记录关键节点信息，用于确认一切都是按照我们预期的那样进行工作</td>
</tr>
<tr>
<td>WARNING</td>
<td>当某些不期望的事情发生时记录的信息（如，磁盘可用空间较低），但是此时应用程序还是正常运行的</td>
</tr>
<tr>
<td>ERROR</td>
<td>由于一个更严重的问题导致某些功能不能正常运行时记录的信息</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>当发生严重错误，导致应用程序不能继续运行时记录的信息</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li><p>禁用日志</p>
<p>logging.disable() 可传入一个日志级别，禁止该级别及以下的日志输出</p>
</li>
<li><p>将日志记录到文件</p>
<p>basicCconfig中的filename可设置文件名，保持屏幕清爽。</p>
</li>
</ul>
<ul>
<li>logging.basicConfig()函数说明</li>
</ul>
<p>该方法用于为logging日志系统做一些基本配置，方法定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(**kwargs)</span><br></pre></td></tr></table></figure>

<p>该函数可接收的关键字参数如下：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>filename</td>
<td>指定日志输出目标文件的文件名，指定该设置项后日志信心就不会被输出到控制台了</td>
</tr>
<tr>
<td>filemode</td>
<td>指定日志文件的打开模式，默认为’a’。需要注意的是，该选项要在filename指定时才有效</td>
</tr>
<tr>
<td>format</td>
<td>指定日志格式字符串，即指定日志输出时所包含的字段信息以及它们的顺序。logging模块定义的格式字段下面会列出。</td>
</tr>
<tr>
<td>datefmt</td>
<td>指定日期/时间格式。需要注意的是，该选项要在format中包含时间字段%(asctime)s时才有效</td>
</tr>
<tr>
<td>level</td>
<td>指定日志器的日志级别</td>
</tr>
<tr>
<td>stream</td>
<td>指定日志输出目标stream，如sys.stdout、sys.stderr以及网络stream。需要说明的是，stream和filename不能同时提供，否则会引发 <code>ValueError</code>异常</td>
</tr>
<tr>
<td>style</td>
<td>Python 3.2中新添加的配置项。指定format格式字符串的风格，可取值为’%’、’{‘和’$’，默认为’%’</td>
</tr>
<tr>
<td>handlers</td>
<td>Python 3.3中新添加的配置项。该选项如果被指定，它应该是一个创建了多个Handler的可迭代对象，这些handler将会被添加到root logger。需要说明的是：filename、stream和handlers这三个配置项只能有一个存在，不能同时出现2个或3个，否则会引发ValueError异常。</td>
</tr>
</tbody></table>
<ul>
<li>logging模块定义的格式字符串字段</li>
</ul>
<p>我们来列举一下logging模块中定义好的可以用于format格式字符串中字段有哪些：</p>
<table>
<thead>
<tr>
<th>字段/属性名称</th>
<th>使用格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>asctime</td>
<td>%(asctime)s</td>
<td>日志事件发生的时间–人类可读时间，如：2003-07-08 16:49:45,896</td>
</tr>
<tr>
<td>created</td>
<td>%(created)f</td>
<td>日志事件发生的时间–时间戳，就是当时调用time.time()函数返回的值</td>
</tr>
<tr>
<td>relativeCreated</td>
<td>%(relativeCreated)d</td>
<td>日志事件发生的时间相对于logging模块加载时间的相对毫秒数（目前还不知道干嘛用的）</td>
</tr>
<tr>
<td>msecs</td>
<td>%(msecs)d</td>
<td>日志事件发生事件的毫秒部分</td>
</tr>
<tr>
<td>levelname</td>
<td>%(levelname)s</td>
<td>该日志记录的文字形式的日志级别（’DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’）</td>
</tr>
<tr>
<td>levelno</td>
<td>%(levelno)s</td>
<td>该日志记录的数字形式的日志级别（10, 20, 30, 40, 50）</td>
</tr>
<tr>
<td>name</td>
<td>%(name)s</td>
<td>所使用的日志器名称，默认是’root’，因为默认使用的是 rootLogger</td>
</tr>
<tr>
<td>message</td>
<td>%(message)s</td>
<td>日志记录的文本内容，通过 <code>msg % args</code>计算得到的</td>
</tr>
<tr>
<td>pathname</td>
<td>%(pathname)s</td>
<td>调用日志记录函数的源码文件的全路径</td>
</tr>
<tr>
<td>filename</td>
<td>%(filename)s</td>
<td>pathname的文件名部分，包含文件后缀</td>
</tr>
<tr>
<td>module</td>
<td>%(module)s</td>
<td>filename的名称部分，不包含后缀</td>
</tr>
<tr>
<td>lineno</td>
<td>%(lineno)d</td>
<td>调用日志记录函数的源代码所在的行号</td>
</tr>
<tr>
<td>funcName</td>
<td>%(funcName)s</td>
<td>调用日志记录函数的函数名</td>
</tr>
<tr>
<td>process</td>
<td>%(process)d</td>
<td>进程ID</td>
</tr>
<tr>
<td>processName</td>
<td>%(processName)s</td>
<td>进程名称，Python 3.1新增</td>
</tr>
<tr>
<td>thread</td>
<td>%(thread)d</td>
<td>线程ID</td>
</tr>
<tr>
<td>threadName</td>
<td>%(thread)s</td>
<td>线程名称</td>
</tr>
</tbody></table>
<p>简单测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">先简单配置下日志器的日志级别</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&quot;This is a debug log.&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;This is a info log.&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;This is a warning log.&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;This is a error log.&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;This is a critical log.&quot;</span>)</span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">DEBUG:root:This <span class="keyword">is</span> a debug log.</span><br><span class="line">INFO:root:This <span class="keyword">is</span> a info log.</span><br><span class="line">WARNING:root:This <span class="keyword">is</span> a warning log.</span><br><span class="line">ERROR:root:This <span class="keyword">is</span> a error log.</span><br><span class="line">CRITICAL:root:This <span class="keyword">is</span> a critical log.</span><br></pre></td></tr></table></figure>

<p>学习一下python的日志模块logging，可以参考如下博客，写得很详细</p>
<p><a href="https://www.cnblogs.com/yyds/p/6901864.html">https://www.cnblogs.com/yyds/p/6901864.html</a></p>
<p><a href="https://www.cnblogs.com/goodhacker/p/3355660.html">https://www.cnblogs.com/goodhacker/p/3355660.html</a></p>
<p><a href="https://cuiqingcai.com/6080.html">https://cuiqingcai.com/6080.html</a></p>
<p><a href="https://www.cnblogs.com/hanmk/p/10448963.html">https://www.cnblogs.com/hanmk/p/10448963.html</a></p>
<p>新建一个logs文件夹，用来存放输出的日志文件；然后在utils工具中创建一个logger.py，封装日志调用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> getcwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log_path = os.path.dirname(getcwd.get_cwd())</span><br><span class="line"><span class="built_in">print</span>(log_path)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,loggername</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#创建一个logger</span></span><br><span class="line">        self.logger = logging.getLogger(loggername)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#创建一个handler，用于写入日志文件</span></span><br><span class="line">        log_path = os.path.dirname(getcwd.get_cwd())+<span class="string">&quot;/logs/&quot;</span> <span class="comment"># 指定文件输出路径，注意logs是个文件夹，一定要加上/，不然会导致输出路径错误，把logs变成文件名的一部分了</span></span><br><span class="line">        logname = log_path + <span class="string">&#x27;out.log&#x27;</span> <span class="comment">#指定输出的日志文件名</span></span><br><span class="line">        fh = logging.FileHandler(logname,encoding = <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 指定utf-8格式编码，避免输出的日志文本乱码</span></span><br><span class="line">        fh.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#创建一个handler，用于将日志输出到控制台</span></span><br><span class="line">        ch = logging.StreamHandler()</span><br><span class="line">        ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义handler的输出格式</span></span><br><span class="line">        formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s-%(name)s-%(levelname)s-%(message)s&#x27;</span>)</span><br><span class="line">        fh.setFormatter(formatter)</span><br><span class="line">        ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 给logger添加handler</span></span><br><span class="line">        self.logger.addHandler(fh)</span><br><span class="line">        self.logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_log</span>(<span class="params">self</span>):</span>      <span class="string">&quot;&quot;&quot;定义一个函数，回调logger实例&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.logger  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Logger(<span class="string">&quot;hmk&quot;</span>).get_log().debug(<span class="string">&quot;User %s is loging&quot;</span> % <span class="string">&#x27;jeck&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>run_main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># author: hmk</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base.main <span class="keyword">import</span> RunMethod</span><br><span class="line"><span class="keyword">from</span> get_datas.get_data <span class="keyword">import</span> GetData</span><br><span class="line"><span class="keyword">from</span> utils.handle_excel <span class="keyword">import</span> HandleExcel</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> utils.logger <span class="keyword">import</span> Logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunMain</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;实例化写好的类，备用&quot;&quot;&quot;</span></span><br><span class="line">        self.run_method = RunMethod()</span><br><span class="line">        self.get_data = GetData()</span><br><span class="line">        self.excel = HandleExcel()</span><br><span class="line">        self.logger = Logger(__name__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = self.get_data.get_nrows()</span><br><span class="line">        <span class="comment"># print(count)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, count):</span><br><span class="line">            priority = self.get_data.get_priority(i)  <span class="comment"># 获取用例的优先级priority</span></span><br><span class="line">            url = self.get_data.get_url(i)  <span class="comment"># 获取用例的url</span></span><br><span class="line">            method = self.get_data.get_method(i)  <span class="comment"># 获取请求方法</span></span><br><span class="line">            params = self.get_data.get_params(i)  <span class="comment"># 获取参数(此处取出来的数据是字符串格式)</span></span><br><span class="line">            params_load = json.loads(params)  <span class="comment"># 将获取到的参数反序列化，即转化为字典</span></span><br><span class="line">            except_value = self.get_data.get_except_value(i)  <span class="comment"># 获取预期结果值</span></span><br><span class="line">            <span class="keyword">if</span> priority == <span class="string">&#x27;H&#x27;</span>:</span><br><span class="line">                r = self.run_method.run_main(method, url, params_load, header=<span class="literal">None</span>)  <span class="comment"># 如果是高优先级用例，则执行</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># print(r)</span></span><br><span class="line">                self.logger.get_log().debug(<span class="string">&#x27;第&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;个接口的返回结果为:%s&#x27;</span>,r) <span class="comment"># 输出接口响应内容</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># print(type(r))</span></span><br><span class="line">                <span class="keyword">if</span> except_value <span class="keyword">in</span> r:</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># print(self.get_data.get_caseSeq(i) + &#x27;测试通过&#x27;)</span></span><br><span class="line">                    self.logger.get_log().debug(<span class="string">&#x27;第&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;接口测试通过&#x27;</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># self.get_data.write_values(i, &#x27;PASS&#x27;)  # 调用get_data.py文件中的write_values()方法</span></span><br><span class="line">                    self.excel.write_value(i, <span class="number">11</span>, <span class="string">&#x27;pass&#x27;</span>)  <span class="comment"># 调用handle_excel.py文件中的write_value()方法</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># print(self.get_data.get_caseSeq(i) + &#x27;执行失败&#x27;)</span></span><br><span class="line">                    self.logger.get_log().debug(<span class="string">&#x27;第&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;接口测试不通过&#x27;</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># self.get_data.write_values(i, &#x27;FAIL&#x27;)</span></span><br><span class="line">                    self.excel.write_value(i, <span class="number">11</span>, <span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = RunMain()</span><br><span class="line">    t.run()</span><br></pre></td></tr></table></figure>



<h3 id="捕获-Traceback"><a href="#捕获-Traceback" class="headerlink" title="捕获 Traceback"></a>捕获 Traceback</h3><p>如果遇到错误，我们更希望报错时出现的详细 Traceback 信息，便于调试，利用 logging 模块我们可以非常方便地实现这个记录，我们用一个实例来感受一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Formatter</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># FileHandler</span></span><br><span class="line">file_handler = logging.FileHandler(<span class="string">&#x27;result.log&#x27;</span>)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># StreamHandler</span></span><br><span class="line">stream_handler = logging.StreamHandler()</span><br><span class="line">stream_handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log</span></span><br><span class="line">logger.info(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;Something maybe fail.&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = <span class="number">10</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    logger.error(<span class="string">&#x27;Faild to get result&#x27;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;Finished&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这里我们在 error () 方法中添加了一个参数，将 exc_info 设置为了 True，这样我们就可以输出执行过程中的信息了，即完整的 Traceback 信息。 运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2018-06-03 16:00:15,382 - __main__ - INFO - Start print log</span><br><span class="line">2018-06-03 16:00:15,382 - __main__ - DEBUG - Do something</span><br><span class="line">2018-06-03 16:00:15,382 - __main__ - WARNING - Something maybe fail.</span><br><span class="line">2018-06-03 16:00:15,382 - __main__ - ERROR - Faild to get result</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/private/var/books/aicodes/loggingtest/demo8.py&quot;, line 23, in &lt;module&gt;</span><br><span class="line">    result = 10 / 0</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">2018-06-03 16:00:15,383 - __main__ - INFO - Finished</span><br></pre></td></tr></table></figure>

<p>可以看到这样我们就非常方便地记录下来了报错的信息，一旦出现了错误，我们也能非常方便地排查。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面试题整理-V1 day1</title>
    <url>/2022/04/20/Python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86-V1-day1/</url>
    <content><![CDATA[<h3 id="Python面试题整理-V1-day1"><a href="#Python面试题整理-V1-day1" class="headerlink" title="Python面试题整理-V1 day1"></a>Python面试题整理-V1 day1</h3><ul>
<li>Python 的特点和优点是什么?</li>
</ul>
<p>面向对象<br>简洁<br>入门门槛低</p>
<p>参考答案：</p>
<ol>
<li><p>解释性</p>
</li>
<li><p>动态 特性</p>
</li>
<li><p>面向对象</p>
</li>
<li><p>语法简洁</p>
</li>
<li><p>开源</p>
</li>
<li><p>丰富的社区资源</p>
</li>
</ol>
<ul>
<li>列出5个python标准库</li>
</ul>
<p>os 操作系统相关联的函数<br>sys 命令行参数<br>re 正则匹配<br>math 数学运算<br>datetime 处理日期时间<br>random 随机数生成模块<br>pymysql 连接mysql数据库，类似jdbc</p>
<ul>
<li>列表和元组有什么不同？</li>
</ul>
<p>列表[]可变，元组()不可变。<br>应用场景，确定的不会变化的，用元组，一般来说，性能较列表更好。</p>
<p>参考答案：<br>1.<br>相同点：<br>列表和元组是Python中最常用的两种数据结构，字典是第三种。</p>
<p>都是序列<br>都可以存储任何数据类型<br>可以通过索引访问<br>list和tuple都支持负索引<br>list和tuple都支持切片操作<br>list和tuple都可以随意嵌套</p>
<p>2.<br>写法上不同<br>列表使用list1 = [“1”, “2”], 元组使用()<br>t = (“<a href="https://china-testing.github.io/&quot;">https://china-testing.github.io/&quot;</a>, “<a href="https://www.oscobo.com/&quot;">https://www.oscobo.com/&quot;</a>)</p>
<p>3.<br>是否可变<br>列表是可变的，而元组是不可变的，这标志着两者之间的关键差异。<br>我们可以修改列表的值，但是不修改元组的值。<br>列表是动态的，长度大小不固定，可以随意的增加、删除、修改元素<br>元组是静态的，长度在初始化的时候就已经确定不能更改，更无法增加、删除、修改元素<br>由于列表是可变的，我们不能将列表用作字典中的key。 但可以使用元组作为字典key<br>list1 = [1, 2, “ceshi”]<br>list1[0] = “change list value1”<br>print(list1)</p>
<p>t1 = (“1”, “ceshi”)<br>t1[0] = “change tuple value”<br>‘’’<br>TypeError: ‘tuple’ object does not support item assignment’’’</p>
<p>4.大小差异<br>Python将低开销的较大的块分配给元组，因为它们是不可变的。 对于列表则分配小内存块。 与列表相比，元组的内存更小。 当你拥有大量元素时，元组比列表快。列表的长度是可变的。</p>
<blockquote>
<blockquote>
<blockquote>
<p>l = [“<a href="https://china-testing.github.io/&quot;">https://china-testing.github.io/&quot;</a>, “<a href="https://www.oscobo.com/&quot;]">https://www.oscobo.com/&quot;]</a><br>t = (“<a href="https://china-testing.github.io/&quot;">https://china-testing.github.io/&quot;</a>, “<a href="https://www.oscobo.com/&quot;">https://www.oscobo.com/&quot;</a>)<br>print(l.<strong>sizeof</strong>())<br>56<br>print(t.<strong>sizeof</strong>())<br>40</p>
</blockquote>
</blockquote>
</blockquote>
<ul>
<li>深拷贝和浅拷贝的区别是什么？</li>
</ul>
<p>浅拷贝：拷贝值的引用，源数据更改，目标数据也会更改。<br>深拷贝：内存新开辟一个空间，拷贝的是对象的结构。但源数据更改，目标数据不会更改。</p>
<p>参考答案：<br>深拷贝是将对象本身复制给另一个对象。这意味着如果对对象的副本进行更改时不会影响原对象。在 Python 中，我们使用 deepcopy（）函数进行深拷贝；<br>浅拷贝是将对象的引用复制给另一个对象。因此，如果我们在副本中进行更改，则会影响原对象。使用 copy（）函数进行浅拷贝。</p>
<ul>
<li>解释 Python 中的三元表达式</li>
</ul>
<p>if xxx？ A: B<br>如果条件成立，则执行A，否则不成立，执行B。</p>
<p>参考答案：</p>
<blockquote>
<blockquote>
<blockquote>
<p>x = 4<br>y = 99 if x &gt; 3 else 999<br>y<br>三种写法：<br>erroStr = “More” if a &gt; b else “Less”<br>print(erroStr) # 运行结果为：Less</p>
</blockquote>
</blockquote>
</blockquote>
<p>print({True: “More”, False: “Less”}[a &gt; b]) # 运行结果为：Less</p>
<p>print((“FalseValue”, “TrueValue”)[a &gt; b]) # 运行结果为：FalseValue</p>
<ul>
<li>解释继承</li>
</ul>
<p>一个类继承自另一个类，也可以说是一个孩子类/派生类/子类，继承自父类/基类/超类，同时获取所有的类成员（属性和方法）。</p>
<p>继承使我们可以重用代码，并且还可以更方便地创建和维护代码。Python 支持以下类型的继承：</p>
<ol>
<li><p>单继承- 一个子类类继承自单个基类</p>
</li>
<li><p>多重继承- 一个子类继承自多个基类</p>
</li>
<li><p>多级继承- 一个子类继承自一个基类，而基类继承自另一个基类</p>
</li>
<li><p>分层继承- 多个子类继承自同一个基类</p>
</li>
<li><p>混合继承- 两种或两种以上继承类型的组合</p>
</li>
</ol>
<ul>
<li>解释 Python 中的 help() 函数和 dir() 函数。</li>
</ul>
<p>help() 函数返回帮助文档和参数说明：</p>
<p>help(dir)的结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(...)</span><br><span class="line">    <span class="built_in">dir</span>([<span class="built_in">object</span>]) -&gt; <span class="built_in">list</span> of strings</span><br><span class="line"></span><br><span class="line">    If called without an argument, <span class="keyword">return</span> the names <span class="keyword">in</span> the current scope.</span><br><span class="line">    Else, <span class="keyword">return</span> an alphabetized <span class="built_in">list</span> of names comprising (some of) the attributes</span><br><span class="line">    of the given <span class="built_in">object</span>, <span class="keyword">and</span> of attributes reachable <span class="keyword">from</span> it.</span><br><span class="line">    If the <span class="built_in">object</span> supplies a method named __dir__, it will be used; otherwise</span><br><span class="line">    the default <span class="built_in">dir</span>() logic <span class="keyword">is</span> used <span class="keyword">and</span> returns:</span><br><span class="line">      <span class="keyword">for</span> a module <span class="built_in">object</span>: the module<span class="string">&#x27;s attributes.</span></span><br><span class="line"><span class="string">      for a class object:  its attributes, and recursively the attributes</span></span><br><span class="line"><span class="string">        of its bases.</span></span><br><span class="line"><span class="string">      for any other object: its attributes, its class&#x27;</span>s attributes, <span class="keyword">and</span></span><br><span class="line">        recursively the attributes of its <span class="class"><span class="keyword">class</span>&#x27;<span class="title">s</span> <span class="title">base</span> <span class="title">classes</span>.</span></span><br></pre></td></tr></table></figure>

<p>dir() 函数返回对象中的所有成员 (任何类型)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(<span class="built_in">help</span>)</span><br><span class="line">[<span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>编程实现计算字符串中的大写字母数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 编程实现计算字符串中的大写字母数</span></span><br><span class="line"></span><br><span class="line">teststring = <span class="string">&#x27;sdfjsaoujweonkfdngdafjhfalDSHJFAJHFOSADJFOASJjlsdfjsdsfjsadlfjELJFOSDJjldsjfs1324654awsdrfw&#x27;</span> \</span><br><span class="line">             <span class="string">&#x27;  sdfjowdjfasljfwasf AAAwerfwefhajfj245r7792347 !@#$#@%$@#$#@  sdfsdfgo0ugosdugfaSDUFOIEWRUG  SDFJSD&#x27;</span>;</span><br><span class="line">countn = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> teststring:</span><br><span class="line">    <span class="keyword">if</span> i.isupper():</span><br><span class="line">        countn+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(countn)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>求1-100的和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    result = result + i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;问题1:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br></pre></td></tr></table></figure>

<p>使用一行代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;问题2:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">101</span>))))</span><br></pre></td></tr></table></figure></li>
<li><p>如何在一个函数内部修改全局变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">50</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure></li>
<li><p>字典如何删除键和合并两个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 字典如何删除键和合并两个字典</span></span><br><span class="line"></span><br><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### update主要用于keys值不同时的合并，如果有相同，则为更新</span></span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line">dict2 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ww&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">22</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 使用字典生成表达式</span></span><br><span class="line">dict3 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ww&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">22</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(&#123;key: [dict1[key] ,dict3[key]] <span class="keyword">for</span> key <span class="keyword">in</span> dict1&#125;)</span><br><span class="line"><span class="comment">###如果本身对应的值为列表则可以直接相加。###</span></span><br><span class="line"><span class="comment">###print(&#123;key: dict1[key] + dict3[key] for key in dict1&#125;)</span></span><br></pre></td></tr></table></figure></li>
<li><p>谈一下Python的GIL</p>
</li>
</ul>
<p>GIL详解<br>GIL全称global interpreter lock，全局解释器锁，是 Python 解释器中的一个布尔值，受到互斥保护。这个锁被 CPython中的核心字节码用来评估循环，并调节用来执行语句的当前线程。<br>每个线程在执行的时候都需要先获取GIL，保证同一时刻只有一个线程可以执行代码，即同一时刻只有一个线程使用CPU。<br>执行单线程程序的开发人员看不到GIL的影响，但它可能是CPU绑定多线程代码中的性能瓶颈。<br>由于即使在具有多个CPU核心的多线程体系结构中，GIL一次只允许一个线程执行，因此GIL已经称为Python的“臭名昭著”的特性。</p>
<p>GIL为Python解决了什么问题？<br>Python使用引用计数来进行内存管理。这意味着在Python中创建的对象具有引用计数变量，该变量用于跟踪指向<br>该对象的引用数。当此技术达到0的时候，释放对象占用的内存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  sys</span><br><span class="line">a = []</span><br><span class="line">b = a</span><br><span class="line">sys.getrefcount(a) <span class="comment"># 查看空列表的引用次数。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在上面的示例中，空列表对象的引用计数为3，a和b参数引用各一次，在调用sys.getrefcount()的时候也引用一次。</p>
<p>回到GIL：<br>问题是这个引用计数变量需要防止竞争条件，如果其中两个线程同时增加或减少其值。发生这种情况，它可能导致<br>从未释放的内存泄漏，或者更糟糕的是，在对该对象的引用仍然存在时错误地释放内存。这可能会导致Python程<br>序中出现崩溃或其他“怪异”错误。<br>通过向跨线程共享的所有数据结构添加锁，可以保持此引用计数变量的安全性，从而保证不会对它们进行不一致的修改。<br>但是为每个对象或对象组添加一个锁意味着将存在多个锁，这可能导致另一个问题 - 死锁（死锁只有在有多个锁时<br>才会发生）。另一个问题是由于重复获取和释放锁而导致的性能下降。</p>
<p>GIL是解释器本身的一个锁，它增加了一条规则，即执行任何Python字节码都需要获取解释器锁。这可以防止死锁<br>（因为只有一个锁）并且不会引入太多的性能开销。但它也让任何受CPU限制的Python程序都是单线程的。<br>GIL虽然被解释器用于其他语言（如Ruby），但并不是解决此问题的唯一方法。有些语言通过使用除引用计数之外<br>的方法（例如垃圾收集）来避免需要GIL对线程安全内存管理。<br>另一方面，这意味着这些语言通常需要通过添加其他性能提升特性（如 JIT编译器 ）来弥补GIL单线程性能优势的损失。</p>
<p>为什么选择GIL作为解决方案?<br>那么为什么要在Python中使用GIL呢？<br>自从操作系统没有线程概念以来，Python就已存在。Python的设计易于使用，以便更快地开发，越来越多的开发人员开始使用它。<br>有许多扩展正在为那些Python中需要其特性的C语言库而编写、服务。为了防止不一致的更改，这些C扩展需要<br>GIL提供的线程安全内存管理。<br>GIL易于实现，很容易添加到Python中。它为单线程程序提供了性能提升，因为只需要管理一个锁。<br>非线程安全的C库变得更容易集成。这些C扩展成为不同社区容易采用Python的原因之一。<br>正如您所看到的，GIL是一个实用的解决方案，可以解决CPython开发人员在Python生命中早期面临的一个难题。</p>
<p>对多线程的Python程序影响<br>当你在查看一个典型的Python程序——或任何计算机程序时，它们在性能上受CPU限制与受I / O限制是存在区别<br>的。(这里的意思是说，不同的程序，限制它们的性能的原因是不一定相同的，有可能受到CPU限制，有可能受到<br>I/O限制)<br>CPU绑定程序是那些将CPU推向极限的程序。这包括进行数学计算的程序，如矩阵乘法，搜索，图像处理等。<br>I / O绑定程序是花费时间等待输入/输出的程序，它可以来自用户，文件，数据库，网络等.I / O绑定程序有时需要<br>等待很长时间才能从源头获取他们需要的东西，因为源可能需要在输入/输出准备好之前进行自己的处理，例如，<br>用户考虑输入什么，或者在运行的数据库查询的过程。<br>让我们来看一个执行倒计时的简单CPU绑定程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">start = time.time()</span><br><span class="line">countdown(COUNT)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Time taken in seconds -&#x27;</span>,end-start)</span><br></pre></td></tr></table></figure>
<p>运行这段代码输出Time taken in seconds - 3.368496894836426<br>现在使用两个并行线程将代码修改为相同的倒计时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">t1 = Thread(target=countdown, args=(COUNT//<span class="number">2</span>,))</span><br><span class="line">t2 = Thread(target=countdown, args=(COUNT//<span class="number">2</span>,))</span><br><span class="line">start = time.time()</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Time taken in seconds -&#x27;</span>, end - start)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再次运行：Time taken in seconds - 3.0929627418518066<br>可以看出，两个版本的完成时间几乎相同。在多线程版本中，GIL防止了CPU所绑定的线程并行执行<br>GIL对I / O绑定的多线程程序的性能影响不大，因为线程在等待I / O时是共享锁的。<br>但是线程完全受CPU约束的程序，例如，使用线程处理部分图像的程序，不仅会因锁而成为单线程，而且与编写为<br>完全单线程的场景相比，还会导致执行时间的增加，如上例所示。<br>这种增加是锁的获取和释放开销的结果。</p>
<p>为什么还没有删除GIL？<br>Python有许多的由C语言编写的扩展库，这些扩展库在很大程度上依赖于由GIL提供的解决方案，如果删除GIL，会导致现有的C扩展被破坏，许多地方需要重写甚至完全重写。<br>当然，还有其他解决方案可以解决GIL解决的问题，但有些解决方案是会降低单线程和多线程或者I/O绑定的程序的性能的。</p>
<p>Python3中对GIL的改进<br>Python 3为现有的GIL带来了重大改进 -<br>GIL会对 “仅CPU限制” 和 “仅I / O绑定” 的多线程程序造成影响，但是如果一个多线程程序，其中有些线程受I / O约束和有些线程受CPU约束会怎么样呢？<br>在这样的程序中，已知Python的GIL会使I / O绑定的线程匮乏，因为它们没有机会从CPU绑定的线程中获取GIL。<br>这是因为Python内置了一种机制，强制线程在连续使用固定间隔后释放GIL <strong>，</strong>如果没有其他人获得GIL，则相同的线程可以继续使用它。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> sys</span><br><span class="line">&gt;&gt;&gt;sys.getchectinterval() <span class="comment"># 返回检查间隔值</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>这种机制的问题在于，大多数情况下，CPU绑定的线程会在其他线程获取GIL之前重新获取GIL。<br>在Python3.2中修复了这个问题，并且添加了一种机制，可以查看被删除的其他线程的GIL获取请求数，并且在其他线程有机会运行之前不允许当前线程重新获取GIL。</p>
<p>如何处理Python的GIL<br><strong>多进程与多线程：</strong>最流行的方法是使用多进程方法，使用多个进程而不是线程。每个Python进程都有自己的Python解释器和内存空间，因此GIL不会成为问题。Python有一个multiprocessing模块，可以轻松地创建进程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(processes=<span class="number">2</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    r1 = pool.apply_async(countdown, [COUNT//<span class="number">2</span>])</span><br><span class="line">    r2 = pool.apply_async(countdown, [COUNT//<span class="number">2</span>])</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Time taken in seconds -&#x27;</span>, end - start)</span><br></pre></td></tr></table></figure>

<p>运行结果:Time taken in seconds - 2.558570623397827<br>与多线程版本相比，性能有了不错的提升。</p>
<p>耗费时间没有下降到上面看到的一半，是因为流程管理有自己的开销。多进程要比多线程的开销更多，这也可能会成为一个扩展瓶颈。<br>替代Python解释器： Python有多个解释器实现。分别用C，Java，C＃和Python编写的CPython，Jython，IronPython和PyPy是最受欢迎的。GIL仅存在于CPython的原始Python实现中。如果程序及其库可用于其他实现之一，那么也可以尝试其他的Python解释器。</p>
<p>参考链接：<a href="https://blog.csdn.net/weixin_42239402/article/details/95375147">https://blog.csdn.net/weixin_42239402/article/details/95375147</a></p>
<ul>
<li>Python 中如何实现多线程？</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 方法一：创建threading.Thread对象</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testthread</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is started&#x27;</span>.<span class="built_in">format</span>(args))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">###分别实例化线程threading</span></span><br><span class="line">    thread1 = threading.Thread(target=testthread , args=(<span class="string">&#x27;this is threading 1 &#x27;</span>,))</span><br><span class="line">    thread2 = threading.Thread(target=testthread , args=(<span class="string">&#x27;this is threading 2 &#x27;</span>,))</span><br><span class="line">    <span class="comment">###启动线程，调佣同一个函数，接收不同参数。</span></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\ndone...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 方法二：继承于threading.Thread，重写方法run()</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写一个类，继承于threading.Thread</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, jobName</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.jobName = jobName</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写run方法， 实现多线程， 因为start方法执行时， 调用的是run方法;</span></span><br><span class="line">    <span class="comment"># run方法里面编写的内容就是你要执行的任务；</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是一个需要执行的任务%s。。。。。&quot;</span> %(self.jobName))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前线程的个数:&quot;</span>, threading.active_count() )</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前线程的信息:&quot;</span>, threading.current_thread())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = MyThread(<span class="string">&quot;name1&quot;</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">&quot;name2&quot;</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="comment">###join()方法可以等待所有的子线程执行结束之后， 再执行主线程。</span></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序执行结束.....&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> _thread</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">job</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个需要执行的任务。。。。。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前线程的个数:&quot;</span>, threading.active_count() )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前线程的信息:&quot;</span>, threading.current_thread())</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建多线程时， 需要制定该线程执行的任务</span></span><br><span class="line">    _thread.start_new_thread(job, ())</span><br><span class="line">    _thread.start_new_thread(job, ())</span><br><span class="line">    job()</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line">这是一个需要执行的任务。。。。。</span><br><span class="line">当前线程的个数: <span class="number">1</span></span><br><span class="line">当前线程的信息: &lt;_MainThread(MainThread, started <span class="number">11300</span>)&gt;</span><br><span class="line">这是一个需要执行的任务。。。。。</span><br><span class="line">当前线程的个数: <span class="number">1</span></span><br><span class="line">当前线程的信息: &lt;_DummyThread(Dummy-<span class="number">1</span>, started daemon <span class="number">6620</span>)&gt;这是一个需要执行的任务。。。。。</span><br><span class="line"></span><br><span class="line">当前线程的个数: <span class="number">2</span></span><br><span class="line">当前线程的信息: &lt;_DummyThread(Dummy-<span class="number">2</span>, started daemon <span class="number">6360</span>)&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###普通函数：希望获取十个ip的城市和国家</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录时间的装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = f(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s函数运行时间:%.2f&quot;</span> % (f.__name__, end_time - start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">ip</span>):</span></span><br><span class="line">    url = <span class="string">&quot;http://ip-api.com/json/%s&quot;</span> % (ip)</span><br><span class="line">    urlObj = urlopen(url)</span><br><span class="line">    <span class="comment"># 服务端返回的页面信息, 此处为字符串类型</span></span><br><span class="line">    pageContent = urlObj.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 处理Json数据</span></span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    <span class="comment"># 解码: 将json数据格式解码为python可以识别的对象;</span></span><br><span class="line">    dict_data = json.loads(pageContent)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        %s</span></span><br><span class="line"><span class="string">    所在城市: %s</span></span><br><span class="line"><span class="string">    所在国家: %s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> % (ip, dict_data[<span class="string">&#x27;city&#x27;</span>], dict_data[<span class="string">&#x27;country&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">###这里应用装饰器</span></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ips = [<span class="string">&#x27;12.13.14.%s&#x27;</span> % (i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        get_addr(ip)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = f(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s函数运行时间:%.2f&quot;</span> % (f.__name__, end_time - start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_addr</span>(<span class="params">ip</span>):</span></span><br><span class="line">    url = <span class="string">&quot;http://ip-api.com/json/%s&quot;</span> % (ip)</span><br><span class="line">    urlObj = urlopen(url)</span><br><span class="line">    <span class="comment"># 服务端返回的页面信息, 此处为字符串类型</span></span><br><span class="line">    pageContent = urlObj.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 2. 处理Json数据</span></span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    <span class="comment"># 解码: 将json数据格式解码为python可以识别的对象;</span></span><br><span class="line">    dict_data = json.loads(pageContent)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        %s</span></span><br><span class="line"><span class="string">    所在城市: %s</span></span><br><span class="line"><span class="string">    所在国家: %s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> % (ip, dict_data[<span class="string">&#x27;city&#x27;</span>], dict_data[<span class="string">&#x27;country&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ips = [<span class="string">&#x27;12.13.14.%s&#x27;</span> % (i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="comment"># 实例化10个对象，target=目标函数名，args=目标函数参数(元组格式)</span></span><br><span class="line">        t = threading.Thread(target=get_addr, args=(ip,))</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待所有子线程结束再运行主线程</span></span><br><span class="line">    [thread.join() <span class="keyword">for</span> thread <span class="keyword">in</span> threads]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### 重写run方法实现刚才爬虫多线程案例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        res = f(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s函数运行时间:%.2f&quot;</span> % (f.__name__, end_time - start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, ip</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.ip = ip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        url = <span class="string">&quot;http://ip-api.com/json/%s&quot;</span> % (self.ip)</span><br><span class="line">        urlObj = urlopen(url)</span><br><span class="line">        <span class="comment"># 服务端返回的页面信息, 此处为字符串类型</span></span><br><span class="line">        pageContent = urlObj.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 2. 处理Json数据</span></span><br><span class="line">        <span class="keyword">import</span> json</span><br><span class="line">        <span class="comment"># 解码: 将json数据格式解码为python可以识别的对象;</span></span><br><span class="line">        dict_data = json.loads(pageContent)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                            %s</span></span><br><span class="line"><span class="string">        所在城市: %s</span></span><br><span class="line"><span class="string">        所在国家: %s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> % (self.ip, dict_data[<span class="string">&#x27;city&#x27;</span>], dict_data[<span class="string">&#x27;country&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ips = [<span class="string">&#x27;12.13.14.%s&#x27;</span> % (i + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="comment"># 实例化自己重写的类</span></span><br><span class="line">        t = MyThread(ip)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    [thread.join() <span class="keyword">for</span> thread <span class="keyword">in</span> threads]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面试题整理-V1 day2</title>
    <url>/2022/04/25/Python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86-V1-day2/</url>
    <content><![CDATA[<h3 id="Python面试题整理-V1-day2"><a href="#Python面试题整理-V1-day2" class="headerlink" title="Python面试题整理-V1 day2"></a>Python面试题整理-V1 day2</h3><ul>
<li><p>Python实现列表去重</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5654</span>,<span class="number">765</span>,<span class="number">3453</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">result = <span class="built_in">set</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>Python 函数的参数传递*args和**kwargs</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###Python 函数的参数传递*args和**kwargs</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">###输出为：(2, 3, 4)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># ([1, 2, 3, 4, 5],)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">**kargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kargs)</span><br><span class="line">f(a=<span class="number">1</span>, b=<span class="number">2</span>)  <span class="comment"># 实际传入参数是两个,但是给包裹在一起</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name,age,**kw</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>,name,<span class="string">&#x27;age:&#x27;</span>,age,<span class="string">&#x27;other:&#x27;</span>,kw)</span><br><span class="line"><span class="comment"># 传入4个参数，自动将后两位  拼接到成字典</span></span><br><span class="line">person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line"><span class="comment"># name: Adam age: 45 other: &#123;&#x27;gender&#x27;: &#x27;M&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">a,*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a,args,kwargs)</span><br><span class="line">h(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">4</span>,y=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 丢进去不确定参数的包裹：1,2,3，x=4,y=5</span></span><br><span class="line"><span class="comment"># 解包：1                    -a</span></span><br><span class="line"><span class="comment"># 解包：（2,3）           -*args</span></span><br><span class="line"><span class="comment"># 解包：&#123;&#x27;x&#x27;: 4, &#x27;y&#x27;: 5&#125;    -**kwargs</span></span><br><span class="line"><span class="comment"># 1 (2, 3) &#123;&#x27;x&#x27;: 4, &#x27;y&#x27;: 5&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一句话解释，什么样的语言能够使用装饰器</p>
<p>函数可以作为参数传递的语言，可以使用装饰器。</p>
</li>
<li><p>Python的内建数据类型</p>
<p>整型int   字符串str  布尔bool   列表list  元组tuple  字典dict</p>
</li>
<li><p>简述面向对象中，<strong>new</strong> 和__init__的区别</p>
<ul>
<li><p>init是初始化方法，创建后就会被默认调用，可接收参数。</p>
</li>
<li><p>new至少有一个参数cls，代表当前类，此参数在实例化时由Python自动识别</p>
</li>
<li><p>new必须有返回值，返回实例化出来的实例，可以return父类new出来的实例</p>
</li>
<li><p>init有一个参数self，就是new出来的实例（即new返回值跟init的self是同一个东西），所以init可以在new的基础上完成一些其他的初始化的动作，init不需要返回值。</p>
</li>
<li><p>如何new创建的是当前类的实例，会自动init。通过return语句中new函数第一个参数cls来保证是当前类实例。（cls创建的实例类）</p>
</li>
<li><p>如果是其他类的类名，则实际返回其他类的实例。不会调用当前类的init，也不会调用其他类的init。</p>
</li>
</ul>
</li>
<li><p>简述with方法在打开处理文件时，帮我们做了什么？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- with/as环境管理器:作为常见的try/finally用法模式的替代方案</span></span><br><span class="line"><span class="comment">## with expression[as variable], expression[as variable]:</span></span><br><span class="line"><span class="comment"># 例子:</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>) <span class="keyword">as</span> myfile:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> myfile: <span class="built_in">print</span>(line)</span><br><span class="line"><span class="comment"># 等同于:</span></span><br><span class="line">myfile = <span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> myfile: <span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    myfile.close()</span><br></pre></td></tr></table></figure></li>
<li><p>[1,2,3,4,5] 通过map得出[1,4,9,16,25],再取出大于10的数字[16,25]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funca</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span>  i**<span class="number">2</span></span><br><span class="line">res = <span class="built_in">map</span>(funca,<span class="built_in">list</span>)</span><br><span class="line">result = [i <span class="keyword">for</span> i <span class="keyword">in</span> res <span class="keyword">if</span> i &gt;<span class="number">10</span>]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>Python中生成随机整数，随机小数和0-1之间数字的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### Python中生成随机整数，随机小数和0-1之间数字的方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">###随机整数,1-100之间。</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机大于0 且小于1 之间的小数</span></span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机大于0 且小于9 之间的小数</span></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">###随机返回选择值。</span></span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]))</span><br></pre></td></tr></table></figure></li>
<li><p>避免转义字符串，加哪个字母表示原始字符串。</p>
<p>r，表示需要原始字符串，不转义特殊字符。</p>
</li>
<li><p>正则匹配 <div class = 'nam'> 中国<div> 中的中国，class name不固定。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string111 = <span class="string">r&#x27;&lt;div class = &quot;name&quot;&gt; 中国&lt;div&gt;&#x27;</span></span><br><span class="line">res = re.findall(<span class="string">r&#x27;&lt;div class = &quot;.*&quot;&gt; (.*?)&lt;div&gt;&#x27;</span>,string111)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li>
<li><p>Python中断言方法举例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span>(a &gt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;success，continue&quot;</span>)</span><br><span class="line"></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="keyword">assert</span>(b &lt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fail，not continue&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>success，continue<br>Traceback (most recent call last):<br>  File “C:\Users\Administrator\PycharmProjects\testpython100\pythontest001.py”, line 154, in <module></p>
<pre><code>assert(b &lt; 1)
</code></pre>
<p>AssertionError</p>
</li>
<li><p>任意给一个字符串”asfhfgosdjhfgodnklrtjhwejhsdklaskljdhfqwkhrjklwqehfsdjklfgjcoivuo”,先去重，再由a-z排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">stringtest = <span class="string">&quot;asfhfgosdjhfgodnklrtjhwejhsdklaskljdhfqwkhrjklwqehfsdjklfgjcoivuo&quot;</span></span><br><span class="line">s = <span class="built_in">set</span>(stringtest)</span><br><span class="line"><span class="comment">###set转换为集合了。</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s.sort(reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">###列表转换为字符串</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span>.join(s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li>
<li><p>用lamda函数实现两个数字相乘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">funmuti = <span class="keyword">lambda</span> a,b:a*b</span><br><span class="line">result = funmuti(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li>
<li><p>字典根据键从小到大排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>,<span class="string">&quot;city&quot;</span>:<span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;tel&quot;</span>:<span class="number">18665975236</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>.items())</span><br><span class="line"><span class="comment">###用法。dict.items()返回的是list，list中的元素是元组，元组中的元素分别为键和值</span></span><br><span class="line"><span class="comment">###list = sorted(__iterable=,key,reverse=)</span></span><br><span class="line"><span class="built_in">list</span> = <span class="built_in">sorted</span>(<span class="built_in">dict</span>.items(),key = <span class="keyword">lambda</span> i:i[<span class="number">0</span>],reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">newdict = &#123;&#125;</span><br><span class="line"><span class="comment"># for i in range(len(list)):</span></span><br><span class="line"><span class="comment">#     keys = list[i][0]</span></span><br><span class="line"><span class="comment">#     newdict[keys] = dict[keys]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(newdict)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###更好的写法：</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    newdict[i[<span class="number">0</span>]] = <span class="built_in">dict</span>[i[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newdict)</span><br></pre></td></tr></table></figure></li>
<li><p>统计字符串每个单词出现的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">string222 = <span class="string">&quot;adfasdb;fsdfsdafsadfsjl;yhrtyh;dfgds;dfgwege;ffsddsfsd;rtyrt;po;nm;bn;f;&quot;</span></span><br><span class="line">res = Counter(string222)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li>
<li><p>字符串为 a = “not 404 found 张三 99 深圳”，字符串中单词之间有空格，用正则去掉带英文或数字的，最后输出 张三、深圳。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;not 404 found 张三 99 深圳&quot;</span></span><br><span class="line"><span class="built_in">list</span> = a.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line">listmatch = re.findall(<span class="string">&#x27;\d+|[a-zA-Z]+&#x27;</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listmatch:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="built_in">list</span>.remove(i)</span><br><span class="line"></span><br><span class="line">newstring = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(newstring)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python自动化任务-提取电话号码和email</title>
    <url>/2021/12/13/Python%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BB%BB%E5%8A%A1-%E6%8F%90%E5%8F%96%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E5%92%8Cemail/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本文为《Python编程快速上手-让繁琐工作自动化》的学习笔记。</p>
<p>主要熟悉一下python基础和正则表达式，使用正则表达式从剪贴板来提取电话号码和email。</p>
<h3 id="Python编程基础"><a href="#Python编程基础" class="headerlink" title="Python编程基础"></a>Python编程基础</h3><p>记几个经常要用到的内容：</p>
<ul>
<li><p>hello world</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this program says hello and asks for your name</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;What is your name?&#x27;</span>) <span class="comment">#ask for your name</span></span><br><span class="line">myName = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;it is goood to meet you&#x27;</span> + myName)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the length of your name is:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(myName))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;What is your age?&#x27;</span>) <span class="comment">#ask for your age</span></span><br><span class="line">myAge = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;you will be &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(myAge) + <span class="number">1</span>) + <span class="string">&#x27; in a year.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>input()函数在等待用户在键盘上输入一些文本，并按下回车键。</p>
</li>
<li><p>range()</p>
<p>range(101)是从0到100；</p>
<p>range(12,16)是从12到15；</p>
<p>range(0,10,2)是0,2,4,6,8；</p>
</li>
<li><p>常用导入模块</p>
<p>import random, sys, os, math;</p>
<p>也可以用from random import *;</p>
</li>
<li><p>可使用sys.exit()提前结束程序</p>
</li>
<li><p>global语句</p>
<p>如果需要在一个函数内修改全局变量，则使用global语句；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span>():</span></span><br><span class="line">    <span class="keyword">global</span> eggs</span><br><span class="line">    eggs = <span class="string">&#x27;spam&#x27;</span></span><br><span class="line"></span><br><span class="line">eggs = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(eggs)</span><br><span class="line">spam()</span><br><span class="line"><span class="built_in">print</span>(eggs)</span><br></pre></td></tr></table></figure></li>
<li><p>异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span>(<span class="params">divideBy</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span> / divideBy</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error:Invalid argument.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(spam(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>写一个猜数字的小游戏</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">actrual_num = random.randint(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the number is between 1 and 20&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># guess 6 times</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;now you can guess the number from 1 - 20:&#x27;</span>)</span><br><span class="line">    guess_num = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">if</span> guess_num &gt; actrual_num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;your guess num is greater than actural num&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_num &lt; actrual_num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;your guess num is lesser than actural num&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> guess_num == actrual_num:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;congratulations!you are right,you guessed in &#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27; times!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;you are wrong,actural num is %&#x27;</span>,actrual_num)</span><br></pre></td></tr></table></figure></li>
<li><p>列表使用小技巧</p>
<p>循环列表：for i in range(len(列表名))：</p>
<p>列表赋值：变量1，变量2，变量3 = 列表名。这里注意列表的长度与变量个数一致。</p>
<p>index()方法返回下标。append、insert方法增加值，remove方法删除值。sort方法排序。</p>
<p>字符串和元组同列表类似，区别在于前两者不可变。</p>
<p>list和tuple方法可以让元组和列表互相转换。</p>
</li>
<li><p>python赋值、浅拷贝、深拷贝</p>
<ul>
<li><p><strong>直接赋值：</strong>其实就是对象的引用（别名）。</p>
</li>
<li><p><strong>浅拷贝(copy)：</strong>拷贝父对象，不会拷贝对象的内部的子对象。</p>
</li>
<li><p><strong>深拷贝(deepcopy)：</strong> copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]  <span class="comment"># 原始对象</span></span><br><span class="line"></span><br><span class="line">b = a  <span class="comment"># 赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)  <span class="comment"># 对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)  <span class="comment"># 对象拷贝，深拷贝</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">5</span>)  <span class="comment"># 修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)  <span class="comment"># 修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a = &#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b = &#x27;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;d = &#x27;</span>, d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为：</span></span><br><span class="line"><span class="comment"># (&#x27;a = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5])</span></span><br><span class="line"><span class="comment"># (&#x27;b = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5])</span></span><br><span class="line"><span class="comment"># (&#x27;c = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]])</span></span><br><span class="line"><span class="comment"># (&#x27;d = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;]])</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>字典的方法</p>
<p>keys(),values(),items();</p>
<p>get(字典键值，默认值)；获取到则成功，获取失败给默认值，不会报错。</p>
<p>setdefault();如果没有默认值，则设置默认值；如果已经有值，则不会赋默认值。</p>
<p>字典中值也可以是字典。</p>
</li>
<li><p>字符串</p>
<p>一般字符串前加r来保证其成为原始字符串。</p>
<p>‘’’ ‘’’多行字符串</p>
<p>“”‘’</p>
<p>中间是多行注释</p>
<p>“””</p>
<p>常用方法：</p>
<p>isX：比如islower(),isupper(),isalpha(),isalnum(),isdecimal(),isspace(),istitle()等返回布尔值。</p>
<p>startswith、endswith也都是返回布尔值。</p>
<p>‘,’.join(要处理的内容),如连接列表中的内容为字符串，</p>
<p>要处理的内容.split(‘\n’)，与上面相反，分割字符串为列表；</p>
<p>用rjust，ljust，center等方法来对齐文本；</p>
<p>用strip，rstrip，lstrip等方法来删除空白字符；</p>
<p>用pyperclip模块拷贝粘贴字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyperclip</span><br><span class="line">pyperclip.copy(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">pyperclip.paste()</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="模式匹配与正则表达式"><a href="#模式匹配与正则表达式" class="headerlink" title="模式匹配与正则表达式"></a>模式匹配与正则表达式</h3><ul>
<li><p>用正则表达式匹配的一般步骤</p>
<ul>
<li><p>用import re导入正则表达式模块</p>
</li>
<li><p>用re.compile()函数创建一个Regex对象（记得使用原始字符串）</p>
</li>
<li><p>向Regex对象的search()方法传入想查找的字符串。它返回一个Match对象。</p>
</li>
<li><p>调用Match对象的group方法，返回实际匹配文本的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">phoneNumRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d\d\d-\d\d\d-\d\d\d\d&#x27;</span>)</span><br><span class="line">mo = phoneNumRegex.search(<span class="string">&#x27;My number is 415-555-4242.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Phone number found: &#x27;</span> + mo.group())</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>用正则表达式匹配更多模式</p>
<ul>
<li>利用括号分组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">phoneNumRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(\d\d\d)-(\d\d\d-\d\d\d\d)&#x27;</span>)</span><br><span class="line">mo = phoneNumRegex.search(<span class="string">&#x27;My number is 415-555-4242.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Phone number found: &#x27;</span> + mo.group())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mo.group(1): &#x27;</span> + mo.group(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mo.group(2): &#x27;</span> + mo.group(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mo.group(0): &#x27;</span> + mo.group(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;mo.group(): &#x27;</span> + mo.group())</span><br></pre></td></tr></table></figure>



<ul>
<li>用管道符|匹配多个分组</li>
<li>用问号？实现可选匹配</li>
<li>用星号*匹配零次或多次</li>
<li>用加号匹配一次或多次</li>
<li>用花括号匹配特定次数</li>
<li>re.compile(r’(ha){3,5}’)贪心算法，匹配5次;re.compile(r’(ha){3,5}?’)非贪心匹配，匹配3次。</li>
<li>findall()方法，返回全部匹配对象。因为search只返回一次。</li>
<li>字符分类，常用\d数字\D非数字\w单词\W非单词\s空白\S非空白；</li>
<li>可自定义字符分类[aeiouAEIOU]等，取非则前面加上[尖括号aeiouAEIOU]，这里markdown语法有其他含义，就不写出来了^.；</li>
<li>^匹配开始，$匹配结尾。</li>
<li>通配字符.</li>
<li>.*匹配所有字符</li>
<li>newlineRegex = re.compile(‘.*’, re.DOTALL)使用 re.DOTALL作为第二个参数，让点匹配所有字符，包括换行符。</li>
<li> re.compile传入第二个参数re.IGNORECASE或者re.I来忽略大小写；</li>
<li>sub方法替换字符串；</li>
<li>管理复杂的正则表达式： re.compile传入第二个参数re.VERBOSE();</li>
<li>组合使用可以用|串联起来，re.IGNORECASE()|re.DOTALL()|re.VERBOSE()；</li>
</ul>
</li>
</ul>
<h3 id="项目实战：电话号码和email提取程序"><a href="#项目实战：电话号码和email提取程序" class="headerlink" title="项目实战：电话号码和email提取程序"></a>项目实战：电话号码和email提取程序</h3><ul>
<li><p>需要完成的任务：</p>
<ul>
<li><p>从剪贴板获取文本</p>
</li>
<li><p>找到文本中的所有电话和email</p>
</li>
<li><p>将他们粘贴到剪贴板</p>
</li>
</ul>
</li>
<li><p>代码需要做的事情：</p>
<ul>
<li>使用pyperclip模块复制和粘贴字符串</li>
<li>使用两个正则表达式，一个匹配电话号码，一个匹配email</li>
<li>将两个正则表达式找到所有匹配，而不是第一次匹配</li>
<li>将匹配的字符串整理好格式，放在一个字符串中，用于粘贴</li>
<li>如果没有找到匹配项，给出错误提示。</li>
</ul>
</li>
<li><p>分步步骤：</p>
<ol>
<li>为电话号码创建一个正则表达式</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!python3</span></span><br><span class="line"><span class="comment">#phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyperclip, re</span><br><span class="line"></span><br><span class="line">phoneRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&#x27;&#x27;(</span></span><br><span class="line"><span class="string">    (\d&#123;3&#125;|\(\d&#123;3&#125;\))?  # area code</span></span><br><span class="line"><span class="string">    (\s|-|\.)?           # separator</span></span><br><span class="line"><span class="string">    (\d&#123;3&#125;)             # first 3 digits</span></span><br><span class="line"><span class="string">    (\s|-|\.)            # separator</span></span><br><span class="line"><span class="string">    (\d&#123;4&#125;)             # last 4 digits</span></span><br><span class="line"><span class="string">    (\s*(ext|x|ext.)\s*(\d&#123;2,5&#125;))? # extension</span></span><br><span class="line"><span class="string">    )&#x27;&#x27;&#x27;</span>, re.VERBOSE)</span><br><span class="line"></span><br><span class="line"><span class="comment">### <span class="doctag">TODO:</span> Create email regex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### TODO：Find matches in cliboard text</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### <span class="doctag">TODO:</span> Copy results to the clipboard</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>为email地址创建一个正则表达式</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Create email regex</span></span><br><span class="line">emailRegex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&#x27;&#x27;(</span></span><br><span class="line"><span class="string">    [a-zA-Z0-9._%+-]+       #username</span></span><br><span class="line"><span class="string">    @                       #@ symbol</span></span><br><span class="line"><span class="string">    [a-zA-Z0-9.-]+          #domain name    </span></span><br><span class="line"><span class="string">    (\.[a-zA-Z]&#123;2,4&#125;)                      #dot-something</span></span><br><span class="line"><span class="string">    )&#x27;&#x27;&#x27;</span>, re.VERBOSE)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在剪贴板文本中找到所有匹配</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Find matches in cliboard text</span></span><br><span class="line">text = <span class="built_in">str</span>(pyperclip.paste())</span><br><span class="line">matches = []</span><br><span class="line"><span class="keyword">for</span> groups <span class="keyword">in</span> phoneRegex.findall(text):</span><br><span class="line">    pythonNum = <span class="string">&#x27;-&#x27;</span>.join([groups[<span class="number">1</span>],groups[<span class="number">3</span>],groups[<span class="number">5</span>]])</span><br><span class="line">    <span class="keyword">if</span> groups[<span class="number">8</span>] != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        pythonNum += <span class="string">&#x27; x&#x27;</span> + groups[<span class="number">8</span>]</span><br><span class="line">    matches.append(pythonNum)</span><br><span class="line"><span class="keyword">for</span> groups <span class="keyword">in</span> emailRegex.findall(text):</span><br><span class="line">    matches.append(groups[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>所有匹配连成一个字符串，复制到粘贴板上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Copy results to the clipboard</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(matches) &gt; <span class="number">0</span>:</span><br><span class="line">    pyperclip.copy(<span class="string">&#x27;\n&#x27;</span>.join(matches))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;copied to the clipboard: &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join(matches))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;No phone numbers or email found.&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>完整程序及运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!python3</span><br><span class="line">#phoneAndEmail.py - Finds phone numbers and email addresses on the clipboard</span><br><span class="line"></span><br><span class="line">import pyperclip, re</span><br><span class="line"></span><br><span class="line">phoneRegex = re.compile(r&#x27;&#x27;&#x27;(</span><br><span class="line">    (\d&#123;3&#125;|\(\d&#123;3&#125;\))?  # area code</span><br><span class="line">    (\s|-\.)?           # separator</span><br><span class="line">    (\d&#123;3&#125;)             # first 3 digits</span><br><span class="line">    (\s|-\.)            # separator</span><br><span class="line">    (\d&#123;4&#125;)             # last 4 digits</span><br><span class="line">    (\s*(ext|x|ext.)\s*(\d&#123;2,5&#125;))? # extension</span><br><span class="line">    )&#x27;&#x27;&#x27;, re.VERBOSE)</span><br><span class="line"></span><br><span class="line">### Create email regex</span><br><span class="line">emailRegex = re.compile(r&#x27;&#x27;&#x27;(</span><br><span class="line">    [a-zA-Z0-9._%+-]+       #username</span><br><span class="line">    @                       #@ symbol</span><br><span class="line">    [a-zA-Z0-9.-]+          #domain name    </span><br><span class="line">    (\.[a-zA-Z]&#123;2,4&#125;)                      #dot-something</span><br><span class="line">    )&#x27;&#x27;&#x27;, re.VERBOSE)</span><br><span class="line"></span><br><span class="line">### Find matches in cliboard text</span><br><span class="line">text = str(pyperclip.paste())</span><br><span class="line">matches = []</span><br><span class="line">for groups in phoneRegex.findall(text):</span><br><span class="line">    pythonNum = &#x27;-&#x27;.join([groups[1],groups[3],groups[5]])</span><br><span class="line">    if groups[8] != &#x27;&#x27;:</span><br><span class="line">        pythonNum += &#x27; x&#x27; + groups[8]</span><br><span class="line">    matches.append(pythonNum)</span><br><span class="line">for groups in emailRegex.findall(text):</span><br><span class="line">    matches.append(groups[0])</span><br><span class="line"></span><br><span class="line">### Copy results to the clipboard</span><br><span class="line">if len(matches) &gt; 0:</span><br><span class="line">    pyperclip.copy(&#x27;\n&#x27;.join(matches))</span><br><span class="line">    print(&#x27;copied to the clipboard: &#x27;)</span><br><span class="line">    print(&#x27;\n&#x27;.join(matches))</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;No phone numbers or email found.&#x27;)</span><br></pre></td></tr></table></figure>

<p>复制内容：</p>
<blockquote>
<p>Contact Us</p>
<p>No Starch Press, Inc.<br>245 8th Street<br>San Francisco, CA 94103 USA<br>Phone: 800.420.7240 or +1 415.863.9900 (9 a.m. to 5 p.m., M-F, PST)<br>Fax: +1 415.863.9950</p>
<p>Reach Us by Email</p>
<ul>
<li>General inquiries: <a href="mailto:info@nostarch.com">info@nostarch.com</a></li>
<li>Media requests: <a href="mailto:media@nostarch.com">media@nostarch.com</a></li>
<li>Academic requests: <a href="mailto:academic@nostarch.com">academic@nostarch.com</a> (<a href="https://nostarch.com/academic.htm">Further information</a>)</li>
<li>Conference and Events: <a href="mailto:conferences@nostarch.com">conferences@nostarch.com</a></li>
<li>Help with your order: <a href="mailto:info@nostarch.com">info@nostarch.com</a></li>
</ul>
<p>Reach Us on Social Media<br><a href="https://twitter.com/nostarch/">Twitter</a><br><a href="https://www.facebook.com/NoStarchPress">Facebook</a><br><a href="https://www.instagram.com/nostarchpress/">Instagram</a><br><a href="https://www.linkedin.com/company/no-starch-press/">Linkedin</a><br><a href="https://in.pinterest.com/nostarchpress">Pinterest</a></p>
</blockquote>
<p>CTRL+ A 全选上面内容，然后CTRL+C放到剪贴板，运行程序，结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\pythontest\autowork\venv\Scripts\python.exe D:/pythontest/autowork/venv/phoneAndEmail.py</span><br><span class="line">copied to the clipboard: </span><br><span class="line"><span class="number">800</span>-<span class="number">420</span>-<span class="number">7240</span></span><br><span class="line"><span class="number">415</span>-<span class="number">863</span>-<span class="number">9900</span></span><br><span class="line"><span class="number">415</span>-<span class="number">863</span>-<span class="number">9950</span></span><br><span class="line">info@nostarch.com</span><br><span class="line">media@nostarch.com</span><br><span class="line">academic@nostarch.com</span><br><span class="line">conferences@nostarch.com</span><br><span class="line">info@nostarch.com</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p>​    </p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面试题整理-V1 day3</title>
    <url>/2022/05/05/Python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86-V1-day3/</url>
    <content><![CDATA[<h3 id="Python面试题整理-V1-day3"><a href="#Python面试题整理-V1-day3" class="headerlink" title="Python面试题整理-V1 day3"></a>Python面试题整理-V1 day3</h3><ul>
<li><p>Filter 列出所有奇数，并构造新列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funa</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">newlist = <span class="built_in">filter</span>(funa, a)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line">newlist = [i <span class="keyword">for</span> i <span class="keyword">in</span> newlist]</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure></li>
<li><p>列表推导式，列出所有奇数。并构造新列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">res = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li>
<li><p>a = (1,),b = (1),c=(“1”)，分别是什么数据类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>,)</span><br><span class="line">b = (<span class="number">1</span>)</span><br><span class="line">c = (<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">tuple</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>合并两个列表  a = [1,2,3,3,9] ,b = [1,4,5,6,7,7]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">9</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">newlist = <span class="built_in">sorted</span>(a,reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure></li>
<li><p>打印时间戳</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">str</span>(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S &#x27;</span>)) + <span class="string">&#x27;星期：&#x27;</span>+ <span class="built_in">str</span>(datetime.datetime.now().isoweekday())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure></li>
<li><p>自定义异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;the number is bigger than 5&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure></li>
<li><p>正则中.* 和 .*？的区别？</p>
<p>贪婪匹配 以及 非贪婪匹配，注意正则的匹配（ .*？）带括号与不带括号 .*？有区别。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&quot;&lt;a&gt;呵呵&lt;/a&gt;&lt;a&gt;哈哈&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">res1 = re.findall(<span class="string">&quot;&lt;a&gt;(.*)&lt;/a&gt;&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line">res2 = re.findall(<span class="string">&quot;&lt;a&gt;(.*?)&lt;/a&gt;&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br></pre></td></tr></table></figure>

<p>[‘呵呵</a><a>哈哈’]<br>[‘呵呵’, ‘哈哈’]</p>
</li>
</ul>
<p>​        </p>
<ul>
<li><p>一行代码展开列表a = [[1,2],[3,4],[5,6]]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">x = [j <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>x = “abc”,y = “def”,z = [“d”,”e”,”f”] 分别求x.join(y),x.join(z)的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###x.join(y)，意思y是可迭代对象，x插入其中。两个结果一样。</span></span><br><span class="line">x = <span class="string">&quot;abc&quot;</span></span><br><span class="line">y = <span class="string">&quot;def&quot;</span></span><br><span class="line">z = [<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>]</span><br><span class="line"></span><br><span class="line">m = x.join(y)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment">###dabceabcf</span></span><br><span class="line">n = x.join(z)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment">####dabceabcf</span></span><br></pre></td></tr></table></figure></li>
<li><p>捕获异常的语法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> Errormsg:</span><br><span class="line">    <span class="built_in">print</span>(Errormsg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有报错，打印此行&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> Errormsg:</span><br><span class="line">    <span class="built_in">print</span>(Errormsg)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无论如何，打印此行&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>Python中交换两个数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">(a, b) = (b, a)</span><br><span class="line"><span class="built_in">print</span>(a , b)</span><br></pre></td></tr></table></figure></li>
<li><p>zip函数的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span> , <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">2</span> , <span class="number">4</span>]</span><br><span class="line">m = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">x = (<span class="number">1</span> , <span class="number">3</span>)</span><br><span class="line">y = (<span class="number">2</span> , <span class="number">4</span>)</span><br><span class="line">n = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(x, y)]</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;xy&quot;</span></span><br><span class="line">d = <span class="string">&quot;123456&quot;</span></span><br><span class="line">o = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(c, d)]</span><br><span class="line"><span class="built_in">print</span>(o)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>[(1, 2), (3, 4)]<br>[(1, 2), (3, 4)]<br>[(‘x’, ‘1’), (‘y’, ‘2’)]</p>
</li>
<li><p>a = “张明 98 分” 用re.sub 替换98为100</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">a = <span class="string">&quot;张明 98 分&quot;</span></span><br><span class="line">ret = re.sub(<span class="string">r&#x27;\d+&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure></li>
<li><p>a=”hello”和b=”你好”编码成bytes类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;hello&quot;</span></span><br><span class="line">b=<span class="string">&quot;你好&quot;</span></span><br><span class="line">m = <span class="string">b&quot;hello&quot;</span></span><br><span class="line"><span class="comment">###将str编码成bytes</span></span><br><span class="line">n = b.encode()</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment">###将bytes解码成str</span></span><br><span class="line">p = m.decode()</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure></li>
<li><p>提高python运行效率的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、使用局部变量</span><br><span class="line">尽量使用局部变量代替全局变量：便于维护，提高性能并节省内存。</span><br><span class="line">一方面可以提高程序性能，局部变量查找速度更快;另一方面可用简短标识符替代冗长的模块变量，提高可读性。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、使用较新的Python版本</span><br><span class="line">Python已经更新了很多个版本，每个版本的Python都会包含优化内容，使其运行速度优于之前的版本，所以大家记得经常更新版本哦！</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、先编译后调用</span><br><span class="line">使用<span class="built_in">eval</span>()、<span class="built_in">exec</span>()函数执行代码时，最好调用代码对象(提前通过<span class="built_in">compile</span>()函数编译成字节码)，而不是直接调用<span class="built_in">str</span>，可以避免多次执行重复编译过程，提高程序性能。</span><br><span class="line"></span><br><span class="line">正则表达式模式匹配也类似，也最好先将正则表达式模式编译成regex对象(通过re.complie()函数)，然后再执行比较和匹配。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、采用生成器表达式替代列表解析</span><br><span class="line">列表解析会产生整个列表，对大量数据的迭代会产生负面效应。而生成器表达式则不会，其不会真正创建列表，而是返回一个生成器，在需要时产生一个值(延迟计算)，对内存更加友好。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、关键代码使用外部功能包</span><br><span class="line"></span><br><span class="line">使用 C/C++ 或机器语言的外部功能包处理时间敏感任务，可以有效提高应用的运行效率。这些功能包往往依附于特定的平台，因此你要根据自己所用的平台选择合适的功能包 。比如下面四个功能包：Cython、Pylnlne、PyPy、Pyrex 。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、在排序时使用键</span><br><span class="line"></span><br><span class="line">Python 含有许多古老的排序规则，这些规则在你创建定制的排序方法时会占用很多时间，而这些排序方法运行时也会拖延程序实际的运行速度。最佳的排序方法其实是尽可能多地使用键和内置的 sort() 方法。</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、优化算法时间</span><br><span class="line"></span><br><span class="line">算法的时间复杂度对程序的执行效率影响最大，在Python中可以通过选择合适的数据结构来优化时间复杂度，如<span class="built_in">list</span>和<span class="built_in">set</span>查找某一个元素的时间复杂度分别是O(n)和O(<span class="number">1</span>)。不同的场景有不同的优化方式，总得来说，一般有分治，分支界限，贪心，动态规划等思想。</span><br><span class="line"></span><br><span class="line">例如：<span class="built_in">set</span>的用法</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>的union，intersection，difference操作要比<span class="built_in">list</span>的迭代要快。因此如果涉及到求<span class="built_in">list</span>交集，并集或者差的问题可以转换为<span class="built_in">set</span>来操作。</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、循环优化</span><br><span class="line"></span><br><span class="line">每种编程语言都会强调需要优化循环。当使用Python的时候，你可以依靠大量的技巧使得循环运行得更快。</span><br><span class="line"></span><br><span class="line">技巧 <span class="number">1</span>：减少循环内部不必要的计算</span><br><span class="line"></span><br><span class="line">技巧 <span class="number">2</span>：嵌套循环中，尽量减少内层循环的计算</span><br><span class="line"></span><br><span class="line">技巧 <span class="number">3</span>：尽量使用局部变量</span><br><span class="line"></span><br><span class="line">技巧 <span class="number">4</span>：使用 join() 连接字符串</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、交叉编译你的应用</span><br><span class="line"></span><br><span class="line">计算机其实并不理解用来创建现代应用程序的编程语言，计算机理解的是机器语言。所以我们可以用Python语言编写应用，再以C++这样的语言运行你的应用，这在运行的角度来说，是可行的。</span><br><span class="line"></span><br><span class="line">Nuitka是一款有趣的交叉编译器，能将你的Python代码转化成C++代码。这样，你就可以在native模式下执行自己的应用，而无需依赖于解释器程序。你会发现自己的应用运行效率有了较大的提高，但是这会因平台和任务的差异而有所不同。</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、充分利用多核CPU的优势</span><br><span class="line"></span><br><span class="line">因为GIL的存在，Python很难充分利用多核CPU的优势。但是，可以通过内置的模块multiprocessing实现下面几种并行模式：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、 多进程并行编程</span><br><span class="line"></span><br><span class="line">对于CPU密集型的程序，可以使用multiprocessing的Process,Pool等封装好的类，通过多进程的方式实现并行计算。但是因为进程中的通信成本比较大，对于进程之间需要大量数据交互的程序效率未必有大的提高。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、 多线程并行编程</span><br><span class="line"></span><br><span class="line">对于IO密集型的程序，multiprocessing.dummy模块使用multiprocessing的接口封装threading，使得多线程编程也变得非常轻松(比如可以使用Pool的<span class="built_in">map</span>接口，简洁高效)。分布式：multiprocessing中的Managers类提供了可以在不同进程之共享数据的方式，可以在此基础上开发出分布式的程序。 不同的业务场景可以选择其中的一种或几种的组合实现程序性能的优化。</span><br></pre></td></tr></table></figure></li>
<li><p>[1,2,3] + [4,5,6]的结果是多少？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li>
<li><p>正则匹配，匹配日期2018-03-20？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">&#x27;https://sycm.taobao.com/bda/tradinganaly/overview/get_summary.json?dateRange=2018-03-20%7C2018-03-20&amp;dateType=recent1&amp;device=1&amp;token=ff25b109b&amp;_=1521595613462&#x27;</span></span><br><span class="line"></span><br><span class="line">m = re.findall(<span class="string">r&#x27;\d+\-\d+\-\d+&#x27;</span>,url)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">ret = re.findall(<span class="string">r&quot;dateRange=(.+?)%7C(.+?)&amp;&quot;</span>, url)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure></li>
<li><p>list = [2,3,5,4,9,6] 不用sort排序，输出[2,3,4,5,6,9]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">list1 = <span class="built_in">sorted</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 妙啊</span></span><br><span class="line">list2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        list2.append(i)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure></li>
<li><p>写一个单例模式</p>
<p>单例模式是一个软件的设计模式，为了保证一个类，无论调用多少次产生的实例对象，都是指向同一个内存地址，仅仅只有一个实例（只有一个对象）。</p>
<p>实现单例模式的手段有很多种，但总的原则是保证一个类只要实例化一个对象，下一次再实例的时候就直接返回这个对象，不再做实例化的操作。所以这里面的关键一点就是，如何判断这个类是否实例化过一个对象。</p>
<p>这里介绍两类方式：</p>
<p>一类是通过模块导入的方式；<br>一类是通过魔法方法判断的方式；</p>
<p>基本原理：</p>
<ul>
<li><p>第一类通过模块导入的方式，借用了模块导入时的底层原理实现。</p>
</li>
<li><p>当一个模块（py文件）被导入时，首先会执行这个模块的代码，然后将这个模块的名称空间加载到内存。</p>
</li>
<li><p>当这个模块第二次再被导入时，不会再执行该文件，而是直接在内存中找。</p>
</li>
<li><p>于是，如果第一次导入模块，执行文件源代码时实例化了一个类，那再次导入的时候，就不会再实例化。</p>
</li>
<li><p>第二类主要是基于类和元类实现，在’对象’的魔法方法中判断是否已经实例化过一个对象</p>
</li>
<li><p>这类方式，根据实现的手法不同，又分为不同的方法，如：</p>
</li>
<li><p>通过类的绑定方法；通过元类；通过类下的__new__；通过装饰器（函数装饰器，类装饰器）实现等。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cls_singleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = Foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> cls_singleton</span><br><span class="line"></span><br><span class="line">obj1 = cls_singleton.instance</span><br><span class="line">obj2 = cls_singleton.instance</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：模块第二次导入从内存找的机制</span></span><br><span class="line">打印结果：true</span><br></pre></td></tr></table></figure></li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">  _instance = <span class="literal">None</span>	<span class="comment"># 记录实例化对象</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">  @classmethod</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_singleton</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">      cls._instance = cls(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">stu1 = Student.get_singleton(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">stu2 = Student.get_singleton(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 <span class="keyword">is</span> stu2)</span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__, stu2.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：类的绑定方法是第二种实例化对象的方式，</span></span><br><span class="line"><span class="comment"># 第一次实例化的对象保存成类的数据属性 _instance，</span></span><br><span class="line"><span class="comment"># 第二次再实例化时，在get_singleton中判断已经有了实例对象，直接返回类的数据属性 _instance</span></span><br><span class="line"><span class="comment">### 补充：这种方式实现的单例模式有一个明显的bug；bug的根源在于如果用户不通过绑定类的方法实例化对象，而是直接通过类名加括号实例化对象，那这样不再是单例模式了。</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"></span><br><span class="line">  _instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment"># if cls._instance:</span></span><br><span class="line">    <span class="comment">#   return cls._instance	        # 有实例则直接返回</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#   cls._instance = super().__new__(cls)	# 没有实例则new一个并保存</span></span><br><span class="line">    <span class="comment">#   return cls._instance	        # 这个返回是给是给init，再实例化一次，也没有关系</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:	            <span class="comment"># 这是简化的写法，上面注释的写法更容易提现判断思路</span></span><br><span class="line">      cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">    <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 <span class="keyword">is</span> stu2)</span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__, stu2.__dict__)</span><br><span class="line"></span><br><span class="line">stu3 = Student(<span class="string">&#x27;mick&#x27;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 <span class="keyword">is</span> stu3)</span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__, stu3.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(stu2.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：和方法2类似，将判断的实现方式，从类的绑定方法中转移到类的__new__中</span></span><br><span class="line"><span class="comment"># 归根结底都是 判断类有没有实例，有则直接返回，无则实例化并保存到_instance中。</span></span><br></pre></td></tr></table></figure>

<p>  ##通过元类**</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">cls, name, bases, dic</span>):</span></span><br><span class="line">    <span class="built_in">super</span>().__init__(name, bases, dic)</span><br><span class="line">    cls._instance = <span class="literal">None</span>		         <span class="comment"># 将记录类的实例对象的数据属性放在元类中自动定义了</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span>	         <span class="comment"># 此call会在类被调用（即实例化时触发）</span></span><br><span class="line">    <span class="keyword">if</span> cls._instance:				 <span class="comment"># 判断类有没有实例化对象</span></span><br><span class="line">      <span class="keyword">return</span> cls._instance</span><br><span class="line">    <span class="keyword">else</span>:						 <span class="comment"># 没有实例化对象时，控制类造空对象并初始化</span></span><br><span class="line">      obj = cls.__new__(cls, *args, **kwargs)</span><br><span class="line">      obj.__init__(*args, **kwargs)</span><br><span class="line">      cls._instance = obj			     <span class="comment"># 保存对象，下一次再实例化可以直接返回而不用再造对象</span></span><br><span class="line">      <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">metaclass=Mymeta</span>):</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 <span class="keyword">is</span> stu2)</span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__, stu2.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：类定义时会调用元类下的__init__，类调用(实例化对象)时会触发元类下的__call__方法</span></span><br><span class="line"><span class="comment"># 类定义时，给类新增一个空的数据属性，</span></span><br><span class="line"><span class="comment"># 第一次实例化时，实例化之后就将这个对象赋值给类的数据属性；第二次再实例化时，直接返回类的这个数据属性</span></span><br><span class="line"><span class="comment"># 和方式3的不同之处1：类的这个数据属性是放在元类中自动定义的，而不是在类中显示的定义的。</span></span><br><span class="line"><span class="comment"># 和方式3的不同之处2：类调用时触发元类__call__方法判断是否有实例化对象，而不是在类的绑定方法中判断</span></span><br></pre></td></tr></table></figure>

<p>  ##函数装饰器</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">  _instance_dict = &#123;&#125;		         <span class="comment"># 采用字典，可以装饰多个类，控制多个类实现单例模式</span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instance_dict:</span><br><span class="line">      _instance_dict[cls] = cls(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> _instance_dict.get(cls)</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">  <span class="comment"># def __new__(cls, *args, **kwargs):	 # 将方法3的这部分代码搬到了函数装饰器中</span></span><br><span class="line">  <span class="comment">#   if not cls._instance:</span></span><br><span class="line">  <span class="comment">#     cls._instance = super().__new__(cls)</span></span><br><span class="line">  <span class="comment">#   return cls._instan</span></span><br><span class="line">  </span><br><span class="line">stu1 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 <span class="keyword">is</span> stu2)</span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__, stu2.__dict__)</span><br></pre></td></tr></table></figure>

<p>  ##类装饰器</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span>:</span></span><br><span class="line">  _instance_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cls_name</span>):</span></span><br><span class="line">    self.cls_name = cls_name</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.cls_name <span class="keyword">not</span> <span class="keyword">in</span> SingleTon._instance_dict:</span><br><span class="line">      SingleTon._instance_dict[self.cls_name] = self.cls_name(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> SingleTon._instance_dict.get(self.cls_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SingleTon		               </span><span class="comment"># 这个语法糖相当于Student = SingleTon(Student),即Student是SingleTon的实例对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;jack&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1 <span class="keyword">is</span> stu2)</span><br><span class="line"><span class="built_in">print</span>(stu1.__dict__, stu2.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：在函数装饰器的思路上，将装饰器封装成类。</span></span><br><span class="line"><span class="comment"># 程序执行到与语法糖时，会实例化一个Student对象，这个对象是SingleTon的对象。</span></span><br><span class="line"><span class="comment"># 后面使用的Student本质上使用的是SingleTon的对象。</span></span><br><span class="line"><span class="comment"># 所以使用Student(&#x27;jack&#x27;, 18)来实例化对象，其实是在调用SingleTon的对象，会触发其__call__的执行</span></span><br><span class="line"><span class="comment"># 所以就在__call__中，判断Student类有没有实例对象了。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  本部分主要是补充介绍多线程并发情况下，多线程高并发时，如果同时有多个线程同一时刻（极端条件下）事例化对象，那么就会出现多个对象，这就不再是单例模式了。<br>  解决这个多线程并发带来的竞争问题，第一个想到的是加互斥锁，于是我们就用互斥锁的原理来解决这个问题。<br>  解决的关键点，无非就是将具体示例化操作的部分加一把锁，这样同时来的多个线程就需要排队。<br>  这样一来只有第一个抢到锁的线程实例化一个对象并保存在_instance中，同一时刻抢锁的其他线程再抢到锁后，不会进入这个判断if not cls._instance，直接把保存在_instance的对象返回了。这样就实现了多线程下的单例模式。<br>  此时还有一个问题需要解决，后面所有再事例对象时都需要再次抢锁，这会大大降低执行效率。解决这个问题也很简单，直接在抢锁前，判断下是否有单例对象了，如果有就不再往下抢锁了（代码第11行判断存在的意义）。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"></span><br><span class="line">  _instance = <span class="literal">None</span>				<span class="comment"># 保存单例对象</span></span><br><span class="line">  _lock = threading.RLock()		    <span class="comment"># 锁</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> cls._instance:			<span class="comment"># 如果已经有单例了就不再去抢锁，避免IO等待</span></span><br><span class="line">      <span class="keyword">return</span> cls._instance</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> cls._lock:				<span class="comment"># 使用with语法，方便抢锁释放锁</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:	</span><br><span class="line">        cls._instance = <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br><span class="line">      <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure>

<ul>
<li><p>保留两位小数,几种方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1.3333333333</span></span><br><span class="line">b = <span class="built_in">round</span>(a,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.2f&#x27;</span>%a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(a))</span><br></pre></td></tr></table></figure></li>
<li><p>求三种方法打印结果</p>
<p>fn(“one”,1）直接将键值对传给字典；</p>
<p>fn(“two”,2)因为字典在内存中是可变数据类型，所以指向同一个地址，传了新的额参数后，会相当于给字典增加键值对</p>
<p>fn(“three”,3,{})因为传了一个新字典，所以不再是原先默认参数的字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">k,v,dic=&#123;&#125;</span>):</span></span><br><span class="line">    dic[k] = v</span><br><span class="line">    <span class="built_in">print</span>(dic)</span><br><span class="line">    </span><br><span class="line">fn(<span class="string">&quot;one&quot;</span>,<span class="number">1</span>)</span><br><span class="line">fn(<span class="string">&quot;two&quot;</span>,<span class="number">2</span>)</span><br><span class="line">fn(<span class="string">&quot;three&quot;</span>,<span class="number">3</span>,&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>输出：<br>{‘one’: 1}<br>{‘one’: 1, ‘two’: 2}<br>{‘three’: 3}</p>
</li>
<li><p>列出常见的状态码和意义</p>
<p>200 OK </p>
<p>请求正常处理完毕</p>
<p>204 No Content </p>
<p>请求成功处理，没有实体的主体返回</p>
<p>206 Partial Content </p>
<p>GET范围请求已成功处理</p>
<p>301 Moved Permanently </p>
<p>永久重定向，资源已永久分配新URI</p>
<p>302 Found </p>
<p>临时重定向，资源已临时分配新URI</p>
<p>303 See Other </p>
<p>临时重定向，期望使用GET定向获取</p>
<p>304 Not Modified </p>
<p>发送的附带条件请求未满足</p>
<p>307 Temporary Redirect </p>
<p>临时重定向，POST不会变成GET</p>
<p>400 Bad Request </p>
<p>请求报文语法错误或参数错误</p>
<p>401 Unauthorized </p>
<p>需要通过HTTP认证，或认证失败</p>
<p>403 Forbidden </p>
<p>请求资源被拒绝</p>
<p>404 Not Found </p>
<p>无法找到请求资源（服务器无理由拒绝）</p>
<p>500 Internal Server Error </p>
<p>服务器故障或Web应用故障</p>
<p>503 Service Unavailable </p>
<p>服务器超负载或停机维护</p>
</li>
<li><p>分别从前端、后端、数据库阐述web项目的性能优化</p>
<p>前端优化：</p>
<p>1、减少http请求、例如制作精灵图</p>
<p>2、html和CSS放在页面上部，javascript放在页面下面，因为js加载比HTML和Css加载慢，所以要优先加载html和css,以防页面显示不全，性能差，也影响用户体验差</p>
<p>后端优化：</p>
<p>1、缓存存储读写次数高，变化少的数据，比如网站首页的信息、商品的信息等。应用程序读取数据时，一般是先从缓存中读取，如果读取不到或数据已失效，再访问磁盘数据库，并将数据再次写入缓存。</p>
<p>2、异步方式，如果有耗时操作，可以采用异步，比如celery</p>
<p>3、代码优化，避免循环和判断次数太多，如果多个if else判断，优先判断最有可能先发生的情况</p>
<p>数据库优化：</p>
<p>1、如有条件，数据可以存放于redis，读取速度快</p>
<p>2、建立索引、外键等</p>
</li>
<li><p>dict = {“name”:”zhangsan”,”age”:18} 删除name的kv</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>)</span><br><span class="line"></span><br><span class="line">dict2 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">dict2.pop(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict2)</span><br></pre></td></tr></table></figure></li>
<li><p>A =zip((“a”,”b”,”c”,”d”,”e”),(1,2,3,4,5)) 转化为字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A =<span class="built_in">zip</span>((<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line">A0 = <span class="built_in">dict</span>(A)</span><br><span class="line"><span class="built_in">print</span>(A0)</span><br><span class="line"></span><br><span class="line">A1 = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">A2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> A1 <span class="keyword">if</span> i <span class="keyword">in</span> A0]</span><br><span class="line"><span class="built_in">print</span>(A2)</span><br><span class="line"></span><br><span class="line"><span class="comment">### s in A0 即a，b，c，d，e  然后获取A0[a-z]的值</span></span><br><span class="line">A3 = [A0[s] <span class="keyword">for</span> s <span class="keyword">in</span> A0]</span><br><span class="line"><span class="built_in">print</span>(A3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> A0:</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">### dict 创建字典的方法</span></span><br><span class="line">s1 = <span class="built_in">dict</span>([[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>],[<span class="string">&quot;age&quot;</span>,<span class="number">18</span>]])</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">s2 = <span class="built_in">dict</span>([(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>),(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>)])</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>简述同源策略</p>
</li>
</ul>
<p>  同源策略需要同时满足以下三点要求： </p>
<p>  1）协议相同 </p>
<p>  2）域名相同 </p>
<p>  3）端口相同 </p>
<p>  http:<a href="http://www.test.com与https:www.test.com">www.test.com与https:www.test.com</a> 不同源——协议不同 </p>
<p>  http:<a href="http://www.test.com与http:www.admin.com">www.test.com与http:www.admin.com</a> 不同源——域名不同 </p>
<p>  http:<a href="http://www.test.com与http:www.test.com:8081">www.test.com与http:www.test.com:8081</a> 不同源——端口不同</p>
<p>  只要不满足其中任意一个要求，就不符合同源策略，就会出现“跨域”</p>
<ul>
<li><p>简述cookie和session的区别</p>
<p>1，session 在服务器端，cookie 在客户端（浏览器）</p>
<p>2、session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效，存储Session时，键与Cookie中的sessionid相同，值是开发人员设置的键值对信息，进行了base64编码，过期时间由开发人员设置</p>
<p>3、cookie安全性比session差</p>
</li>
<li><p>简述多线程、多进程</p>
<p>进程：</p>
<p>1、操作系统进行资源分配和调度的基本单位，多个进程之间相互独立</p>
<p>2、稳定性好，如果一个进程崩溃，不影响其他进程，但是进程消耗资源大，开启的进程数量有限制</p>
<p>线程：</p>
<p>1、CPU进行资源分配和调度的基本单位，线程是进程的一部分，是比进程更小的能独立运行的基本单位，一个进程下的多个线程可以共享该进程的所有资源</p>
<p>2、如果IO操作密集，则可以多线程运行效率高，缺点是如果一个线程崩溃，都会造成进程的崩溃</p>
<p>应用：</p>
<p>IO密集的用多线程，在用户输入，sleep 时候，可以切换到其他线程执行，减少等待的时间</p>
<p>CPU密集的用多进程，因为假如IO操作少，用多线程的话，因为线程共享一个全局解释器锁，当前运行的线程会霸占GIL，其他线程没有GIL，就不能充分利用多核CPU的优势</p>
</li>
<li><p>简述any()和all()方法</p>
<p>any():只要迭代器中有一个元素为真就为真</p>
<p>all():迭代器中所有的判断项返回都是真，结果才为真</p>
<p>python中什么元素为假？</p>
<p>答案：（0，空字符串，空列表、空字典、空元组、None, False）</p>
</li>
<li><p>IOError、AttributeError、ImportError、IndentationError、IndexError、KeyError、SyntaxError、NameError分别代表什么异常</p>
<p>IOError：输入输出异常</p>
<p>AttributeError：试图访问一个对象没有的属性</p>
<p>ImportError：无法引入模块或包，基本是路径问题</p>
<p>IndentationError：语法错误，代码没有正确的对齐</p>
<p>IndexError：下标索引超出序列边界</p>
<p>KeyError:试图访问你字典里不存在的键</p>
<p>SyntaxError:Python代码逻辑语法出错，不能执行</p>
<p>NameError:使用一个还未赋予对象的变量</p>
</li>
<li><p>列出几种魔法方法并简要介绍用途</p>
<p><strong>init</strong>:对象初始化方法</p>
<p><strong>new</strong>:创建对象时候执行的方法，单列模式会用到</p>
<p><strong>str</strong>:当使用print输出对象的时候，只要自己定义了__str__(self)方法，那么就会打印从在这个方法中return的数据</p>
<p><strong>del</strong>:删除对象执行的方法</p>
</li>
<li><p>python 1.py 22 33命令行启动程序并传参，print(sys.argv)会输出什么数据？</p>
<p>文件名和参数构成的列表,[‘1.py’ , ‘22’ ,’33’]</p>
</li>
<li><p>将[i for i in range(3)]迭代器改成生成器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">list</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">### 待研究</span></span><br><span class="line"><span class="built_in">tuple</span> = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">tuple</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>去掉字符串的空格，a = ‘hehehad    ‘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;hehehad    &#x27;</span></span><br><span class="line">b = a.strip()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(b))</span><br></pre></td></tr></table></figure></li>
<li><p>举例sort 和 sorted 来对列表处理结果 a = [-1,0,2,-10,200,3,5]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [-<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,-<span class="number">10</span>,<span class="number">200</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line">a.sort(reverse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">sorted</span>(a,reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure></li>
<li><p>对list使用lamada函数进行排序，list = [1,0,-2,-30,-6,5,-7,16,88,-89]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">30</span>,-<span class="number">6</span>,<span class="number">5</span>,-<span class="number">7</span>,<span class="number">16</span>,<span class="number">88</span>,-<span class="number">89</span>]</span><br><span class="line">a = <span class="built_in">sorted</span>(<span class="built_in">list</span>,key = <span class="keyword">lambda</span> x:x)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>输出结果：[-89, -30, -7, -6, -2, 0, 1, 5, 16, 88]</p>
</li>
<li><p>对list使用lamada函数进行排序，list = [1,0,-2,-30,-6,5,-7,16,88,-89],正数小到大，负数大到小。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">30</span>,-<span class="number">6</span>,<span class="number">5</span>,-<span class="number">7</span>,<span class="number">16</span>,<span class="number">88</span>,-<span class="number">89</span>]</span><br><span class="line">b = <span class="built_in">sorted</span>(list2,key = <span class="keyword">lambda</span> x:(x&lt;<span class="number">0</span>,<span class="built_in">abs</span>(x)))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<p>输出结果：[0, 1, 5, 16, 88, -2, -6, -7, -30, -89]</p>
</li>
<li><p>列表嵌套字典的排序，分别根据年龄和姓名排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">17</span>&#125;</span><br><span class="line">    ,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ww&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">25</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zl&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">### 按姓名排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(<span class="built_in">list</span>,key = <span class="keyword">lambda</span> x:x[<span class="string">&quot;name&quot;</span>],reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 按年龄排序，从大到小。</span></span><br><span class="line">c = <span class="built_in">sorted</span>(<span class="built_in">list</span>,key = <span class="keyword">lambda</span> x:x[<span class="string">&quot;age&quot;</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></li>
<li><p>列表嵌套元组的排序，分别根据年龄和姓名排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>),(<span class="string">&quot;name&quot;</span>,<span class="number">19</span>),(<span class="string">&quot;lll&quot;</span>,<span class="number">15</span>),(<span class="string">&quot;xxx&quot;</span>,<span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">### 按姓名排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(<span class="built_in">list</span>,key = <span class="keyword">lambda</span> x:x[<span class="number">0</span>],reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 按年龄排序，从大到小。</span></span><br><span class="line">c = <span class="built_in">sorted</span>(<span class="built_in">list</span>,key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>列表嵌套列表的排序，分别根据年龄和姓名排序。年龄有相同？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [[<span class="string">&quot;age&quot;</span>,<span class="number">18</span>],[<span class="string">&quot;name&quot;</span>,<span class="number">19</span>],[<span class="string">&quot;lll&quot;</span>,<span class="number">15</span>],[<span class="string">&quot;xxx&quot;</span>,<span class="number">25</span>],[<span class="string">&quot;zzz&quot;</span>,<span class="number">25</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">### 按姓名排序</span></span><br><span class="line">b = <span class="built_in">sorted</span>(<span class="built_in">list</span>,key = <span class="keyword">lambda</span> x:x[<span class="number">0</span>],reverse=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 按年龄排序，从大到小。有相同年龄，可以再加一个字段，来排序姓名。</span></span><br><span class="line">c = <span class="built_in">sorted</span>(<span class="built_in">list</span>,key = <span class="keyword">lambda</span> x:(x[<span class="number">1</span>],x[<span class="number">0</span>]),reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2021/11/29/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>markdown的语法非常简单，常见的标记符合不超过10个，用于日常写作记录绰绰有余，不到半个小时就能完全掌握。</p>
<p>1.标题</p>
<p>标题是每篇文章必备而且最常用的格式。<br>在Markdown中，如果想将一段文字定义为标题，只需要在这段文字前面加上 #，再在 # 后加一个空格即可。<br>还可增加二、三、四、五、六级标题，总共六级，只需要增加 # ，增加一个 # ，标题字号相应降低一级。</p>
<p>#一级标题<br>##二级标题<br>###三级标题<br>####四级标题</p>
<p>2.列表</p>
<p>列表格式也很常用，它可以让你的文稿变得井井有条。在 Markdown 中，你只需要在文字前面加上 - 就可以了；<br>如果你希望是有序列表，在文字前面加上 1. 2. 3. 即可。<br>注：-、1.和文字之间要保留一个字符的空格。</p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>列表1<ul>
<li>列表1.1</li>
<li>列表1.2</li>
</ul>
</li>
<li>列表2</li>
<li>列表3</li>
</ul>
<p>3.引用</p>
<p>如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。</p>
<p>　　在引用文字前加上 &gt; 并与文字保留一个字符的空格，即可。</p>
<p>###引用</p>
<blockquote>
<p>记录，成为最好的自己，为此而奋斗</p>
</blockquote>
<p>4.粗体和斜体</p>
<p>Markdown 的粗体和斜体也非常简单：</p>
<p>　　用两个 * 包含一段文本就是粗体的语法；</p>
<p>　　用一个 * 包含一段文本就是斜体的语法。</p>
<p><em>这是粗体</em><br><strong>这是斜体</strong></p>
<h4 id="注意：符号和文本之间无须空格"><a href="#注意：符号和文本之间无须空格" class="headerlink" title="注意：符号和文本之间无须空格"></a>注意：符号和文本之间无须空格</h4><p>5.链接与图片</p>
<p>链接：在 Markdown 中，插入链接只需要使用 <a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">显示文本</a> 即可。</p>
<p>　　图片：在 Markdown 中，插入图片只需要使用 <img src="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" alt="显示文本">即可。</p>
<p>　　注：插入图片的语法和链接的语法很像，只是前面多了一个 ！</p>
<h3 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h3><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">显示文本</a></p>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p><img src="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" alt="显示文本"></p>
<p>6.分割线<br>　分割线的语法只需要另起一行，连续输入三个星号 *** 即可分割两段文字内容。</p>
<p>###分割线<br>这是第一段的内容</p>
<hr>
<p>这是第二段的内容</p>
<p>7.表格</p>
<p>当你需要在Markdown文稿中键入表格，代码如下：</p>
<table>
<thead>
<tr>
<th>header 1</th>
<th>header 2</th>
</tr>
</thead>
<tbody><tr>
<td>row 1 col 1</td>
<td>row 1 col 2</td>
</tr>
<tr>
<td>row 2 col 1</td>
<td>row 2 col 2</td>
</tr>
</tbody></table>
<p>8.windows程序如何生成目录结构树？<br>电脑中打开cmd<br>在cmd中进入要生成目录结构的目录<br>输入：tree /f &gt; list.txt（目录结构输入成功，并保存为一个list.txt文件）<br>打开此文件，即可看到生成的目录结构树</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium 3</title>
    <url>/2022/08/22/Selenium-3/</url>
    <content><![CDATA[<h1 id="Selenium3-自动化实战"><a href="#Selenium3-自动化实战" class="headerlink" title="Selenium3 自动化实战"></a>Selenium3 自动化实战</h1><ul>
<li>预置条件</li>
</ul>
<p>比较简单，直接百度搜索安装即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python官方网站：https://www.python.org</span><br><span class="line">Selenium <span class="number">3</span>官方网站：https://www.seleniumhq.org/download</span><br><span class="line">IEDriver驱动下载地址：http://selenium-release.storage.googleapis.com/index.html</span><br><span class="line">Firefox驱动下载地址：https://github.com/mozilla/geckodriver/releases</span><br><span class="line">Chrome驱动下载地址：http://chromedriver.storage.googleapis.com/index.html</span><br><span class="line">HTMLTestRunner.py下载地址：https://pan.baidu.com/s/13XAwyPWAKRxRXUwTZ_jkag</span><br><span class="line">Jenkins官网地址：https://jenkins.io</span><br><span class="line">PyCharm开发集成环境官网地址：https://www.jetbrains.com/pycharm</span><br><span class="line">robot.hpi插件官方下载地址：http://mirrors.jenkins-ci.org/plugins/robot</span><br><span class="line">Charles破解版（V <span class="number">3.11</span>）工具包地址：https://pan.baidu.com/s/1EhmXykUz94yrlhKatY2SIw</span><br><span class="line">Postman官方下载地址：https://www.getpostman.com/apps</span><br><span class="line">Node.js官网下载地址：http://nodejs.cn/download</span><br><span class="line"><span class="number">32</span>位安装包下载址：https://nodejs.org/dist/v4<span class="number">.4</span><span class="number">.3</span>/node-v4<span class="number">.4</span><span class="number">.3</span>-x86.msi</span><br><span class="line"><span class="number">64</span>位安装包下载地址：https://nodejs.org/dist/v11<span class="number">.0</span><span class="number">.0</span>/node-v11<span class="number">.0</span><span class="number">.0</span>-x64.msi</span><br><span class="line">Requests库官方地址：https://pypi.org/project/requests/<span class="comment">#files</span></span><br><span class="line">Collections库离线安装包下载：http://robotframework.org/robotframework/latest/libraries/Collections.html</span><br><span class="line">Appium官方下载地址：https://bitbucket.org/appium/appium.app/downloads</span><br><span class="line">Git官方下载地址：https://git-scm.com/download/win</span><br></pre></td></tr></table></figure>

<ul>
<li>元素定位实战</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####2.3.1  单个元素定位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.通过find_element_by_id定位</span></span><br><span class="line"><span class="comment"># 示例如下：</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">## 导入By类</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;大道至简&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line"><span class="comment">###这个写法已经过时不用了</span></span><br><span class="line"><span class="comment">###driver.find_element_by_id(&quot;kw&quot;).send_keys(&#x27;大道至简&#x27;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2.通过find_element_by_name定位</span></span><br><span class="line"><span class="comment">#示例如下：</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">## 导入By类</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment">#driver.find_element_by_name(&quot;kw&quot;).send_keys(&#x27;大道至简&#x27;)</span></span><br><span class="line">driver.find_element(By.NAME,<span class="string">&#x27;wd&#x27;</span>).send_keys(<span class="string">&#x27;大道至简&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3.通过find_element_by_class_name定位</span></span><br><span class="line"><span class="comment"># 示例如下：</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">## 导入By类</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment">### driver.find_element_by_class_name(&quot;s_ipt&quot;).send_keys(&#x27;大道至简&#x27;)</span></span><br><span class="line">driver.find_element(By.CLASS_NAME,<span class="string">&#x27;s_ipt&#x27;</span>).send_keys(<span class="string">&#x27;大道至简&#x27;</span>)</span><br><span class="line">driver.find_element(By.ID,<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;10秒前&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;10秒后&#x27;</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 补充，常用可以用xpath来定位。</span></span><br><span class="line"><span class="comment">### 或者通过css定位器，by css_selector时，注意id简写为&#x27;#&#x27;,class属性简写为&#x27;.&#x27;，层级关系可以用&#x27;&gt;&#x27;来表示。</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #2.3.2 多个元素定位实战</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">## 导入By类</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;file:///&#x27;</span> + os.path.abspath(<span class="string">&#x27;checkbox.html&#x27;</span>))</span><br><span class="line"><span class="comment">### driver.find_elements_by_css_selector(&quot;input[type=&#x27;checkbox&#x27;]&quot;)[0].click()</span></span><br><span class="line">driver.find_element(By.CSS_SELECTOR,<span class="string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>)[<span class="number">0</span>].click(<span class="number">0</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #2.3.3  多个元素定位，循环获取属性</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">## 导入By类</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">###tag = dr.find_elements_by_tag_name(&#x27;input&#x27;)</span></span><br><span class="line">tag = driver.find_elements(By.TAG_NAME,<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> tag:</span><br><span class="line">    <span class="keyword">if</span> t.get_attribute(<span class="string">&#x27;autocomplete&#x27;</span>) == <span class="string">&#x27;off&#x27;</span>:</span><br><span class="line">        t.send_keys(<span class="string">&#x27;fighter007&#x27;</span>)</span><br><span class="line"><span class="comment">###driver.find_element_by_id(&#x27;su&#x27;).click()</span></span><br><span class="line">tag = driver.find_element(By.ID,<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;10秒前&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;10秒后&#x27;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #2.3.4 js定位</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">## 导入By类</span></span><br><span class="line"></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&#x27;https://www.jianshu.com/sign_in&#x27;</span>)</span><br><span class="line">t.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#点击注册按钮</span></span><br><span class="line"><span class="comment">#js_register = &#x27;document.getElementById(&quot;js-sign-up-btn&quot;).click();&#x27;返回单个elements元素定位，</span></span><br><span class="line"><span class="comment"># 其他类型的js元素定位均返回list对象</span></span><br><span class="line">js_register = <span class="string">&#x27;document.getElementById(&quot;js-sign-up-btn&quot;).click();&#x27;</span></span><br><span class="line">dr.execute_script(js_register)</span><br><span class="line">t.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># #2.3.5 jquery定位</span></span><br><span class="line"><span class="comment"># #定位登录连接</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">## 导入By类</span></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&#x27;https://www.jianshu.com/sign_in&#x27;</span>)</span><br><span class="line">t.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">js_class = <span class="string">&#x27;document.getElementsByClassName(&quot;active&quot;)[0].click();&#x27;</span></span><br><span class="line">dr.execute_script(js_class)</span><br><span class="line">t.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#定位账号文本框  输入username</span></span><br><span class="line">js_input=<span class="string">&#x27;document.getElementsByTagName(&quot;input&quot;)[2].value=&quot;username&quot;;&#x27;</span></span><br><span class="line">dr.execute_script(js_input)</span><br><span class="line">t.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#定位密码文本框 输入password</span></span><br><span class="line">js_passwd = <span class="string">&#x27;document.getElementsByTagName(&quot;input&quot;)[3].value=&quot;password&quot;;&#x27;</span></span><br><span class="line">dr.execute_script(js_passwd)</span><br><span class="line">t.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#使用css选择器定位 登录按钮，目前跳出验证图片弹窗</span></span><br><span class="line">css_btn = <span class="string">&#x27;document.querySelectorAll(&quot;.sign-in-button&quot;)[0].click();&#x27;</span></span><br><span class="line">dr.execute_script(css_btn)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li><p>下拉框实战</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#2.4.1 下拉框定位  value属性定位</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">url = dr.get(<span class="string">&quot;file:///D:/xialakuang.html&quot;</span>)</span><br><span class="line">element = dr.find_element(By.ID,<span class="string">&quot;s4Id&quot;</span>)</span><br><span class="line"><span class="comment">###value属性定位</span></span><br><span class="line">Select(element).select_by_value(<span class="string">&quot;o1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.4.2下拉框   index属性定位</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By <span class="comment">#引入By类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select  <span class="comment">#引入Select类</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">url = dr.get(<span class="string">&quot;file:///D:/xialakuang.html&quot;</span>)</span><br><span class="line">element = dr.find_element(By.ID,<span class="string">&quot;s4Id&quot;</span>)</span><br><span class="line"><span class="comment">###index属性定位</span></span><br><span class="line">Select(element).select_by_index(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###2.4.3  visible_text属性定位</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">url = dr.get(<span class="string">&quot;file:///D:/xialakuang.html&quot;</span>)</span><br><span class="line">element = dr.find_element(By.ID,<span class="string">&quot;s4Id&quot;</span>)</span><br><span class="line"><span class="comment">###直接获取属性</span></span><br><span class="line">Select(element).select_by_visible_text(<span class="string">&quot;o3&quot;</span>）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.4.4  元素二次定位实战</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">url = dr.get(<span class="string">&quot;file:///D:/xialakuang.html&quot;</span>)</span><br><span class="line"><span class="comment">###二次定位，必须用click方法才能生效</span></span><br><span class="line">dr.find_element_by_id(<span class="string">&quot;s4Id&quot;</span>).find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;id2&#x27;]&quot;</span>).click()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>鼠标操作实战</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###2.5.1 鼠标悬停实战</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains  <span class="comment">#导入ActionChains类</span></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">setting = dr.find_element_by_link_text(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="comment">###移动到某个元素上悬停</span></span><br><span class="line">ActionChains(dr).move_to_element(setting).perform()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">dr.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##2.5.2  鼠标右键实战</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains  <span class="comment">#导入ActionChains类</span></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#定位百度一下按钮元素</span></span><br><span class="line">context = dr.find_element_by_id(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"><span class="comment">#鼠标悬停右键操作</span></span><br><span class="line">ActionChains(dr).context_click(context).perform()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##2.5.3  鼠标双击实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains  <span class="comment">#导入ActionChains类</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">dr.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;双击一下&#x27;</span>)</span><br><span class="line"><span class="comment">#定位百度按钮元素</span></span><br><span class="line">double = dr.find_element_by_id(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"><span class="comment">#模拟鼠标双击操作</span></span><br><span class="line">ActionChains(dr).double_click(double).perform()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>元素等待实战</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#强制等待</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">sleep(<span class="number">5</span>)   <span class="comment">#强制等待5s</span></span><br><span class="line">dr.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;双击一下&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">dr.implicitly_wait(<span class="number">30</span>)   <span class="comment">#隐式等待设置 30 s</span></span><br><span class="line">dr.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;双击一下&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By   <span class="comment">#导入By类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait  <span class="comment">#导入WebDriverWait类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment"># 导入EC模块</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://mail.sina.com.cn/&#x27;</span>)</span><br><span class="line"><span class="comment">###显示等待，直到出现了某个元素，才开始执行操作。最长等待5s，每隔0.5s执行一次，如果超过5s则抛异常。</span></span><br><span class="line">element = WebDriverWait(driver,<span class="number">5</span>,<span class="number">0.5</span>).until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;freename&#x27;</span>)))</span><br><span class="line">element.send_keys(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>表单切换实战</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###2.7.1表单切换实战</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdrvier</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://mail.qq.com/cgi-bin/loginpage&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">###切换标签</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;login_frame&#x27;</span>)   <span class="comment">#切换iframe标签</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line">driver.switch_to.default_content()  <span class="comment">#退出iframe标签</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###2.7.2 嵌套表单切换 平行表单切换实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdrvier</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;file:///E:/webdriver_api_demo/frame.html&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#先切换到最外层的iframe标签</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;f1&#x27;</span>)   </span><br><span class="line"><span class="comment">#再切换到第二个iframe标签</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line"><span class="comment">#定位处在第二个iframe标签中的元素</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 2.7.3 </span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdrvier</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;file:///E:/webdriver_api_demo/frame.html&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#默认在iframe1标签</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;osslog_iframe&#x27;</span>)   </span><br><span class="line"><span class="comment">#退出iframe1标签</span></span><br><span class="line">driver.switch_to.default_content()  <span class="comment">#退出iframe标签</span></span><br><span class="line"><span class="comment">#切换到iframe2标签</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;actionFrame&#x27;</span>)</span><br><span class="line"><span class="comment">#操作iframe2标签下面的元素</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###2.7.4 表单特殊情况处理</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdrvier</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://mail.qq.com/cgi-bin/loginpage&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#使用xpath层级定位iframe标签</span></span><br><span class="line">Xpath=driver.find_element_by_xpath(<span class="string">&quot;//div[@id=’QMEditorArea’]/table/tbody/tr[2]/td/iframe&quot;</span>)</span><br><span class="line">driver.switch_to.frame(Xpath)   <span class="comment">#切换到iframe标签</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;login_button&quot;</span>).click()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>窗口切换实战</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##2.8  窗口切换实战</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdrvier</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">driver.find_element_by_id(“kw”).send_keys(“渗透吧”)</span><br><span class="line">driver.find_element_by_id(“su”).click()</span><br><span class="line"><span class="comment">#第一个窗口下点击渗透吧链接</span></span><br><span class="line">driver.find_element_xpath(‘//*[@<span class="built_in">id</span>=<span class="string">&quot;1&quot;</span>]/h3/a’).click()</span><br><span class="line"><span class="comment">#使用get获取跳转后的url地址,切换过去</span></span><br><span class="line">driver.get(‘http://tieba.baidu.com/f?kw=%C9%F8%CD%B8&amp;fr=ala0&amp;tpl=<span class="number">5</span>’)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#操作跳转后所在窗口的页面元素</span></span><br><span class="line">driver.find_element_by_link_text(‘进入贴吧’).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###2.8.2  SWITCH方法实战</span></span><br><span class="line"><span class="keyword">import</span> selenium3</span><br><span class="line"><span class="keyword">from</span> selenium3 <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium3.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">url = <span class="string">&quot;https://www.so.com/&quot;</span></span><br><span class="line">dr.get(url)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">dr.find_element_by_link_text(<span class="string">&quot;360导航&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#获取所有窗口的句柄</span></span><br><span class="line">windows = dr.window_handles</span><br><span class="line"><span class="comment">#通过索引切换到第二个窗口</span></span><br><span class="line">dr.switch_to.window(windows[<span class="number">1</span>])</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#在第二个窗口里面文本框内输入 第二个窗口</span></span><br><span class="line">dr.find_element_by_id(<span class="string">&quot;search-kw&quot;</span>).send_keys(<span class="string">&quot;第二个窗口&quot;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#切换到第一个窗口</span></span><br><span class="line">dr.switch_to.window(window[<span class="number">0</span>])</span><br><span class="line"><span class="comment">###在第一个窗口的文本框中输入&quot;第一个窗口&quot;</span></span><br><span class="line">dr.find_element_by_id(<span class="string">&quot;input&quot;</span>).send_keys(<span class="string">&quot;第一个窗口&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>警告框实战</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.9  警告框实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains </span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">setting = dr.find_element_by_link_text(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line">ActionChains(dr).move_to_element(setting).perform()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">dr.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 选择简体中文</span></span><br><span class="line">dr.find_element_by_id(<span class="string">&quot;SL_1&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 下拉框的操作</span></span><br><span class="line">select = dr.find_element_by_xpath(<span class="string">&quot;//select[@id=&#x27;nr&#x27;]&quot;</span>)</span><br><span class="line">Select(select).select_by_value(<span class="string">&quot;20&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">dr.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>).click()</span><br><span class="line"><span class="comment"># 处理警告框</span></span><br><span class="line">alert = dr.switch_to.alert</span><br><span class="line"><span class="comment"># 打印警告信息</span></span><br><span class="line"><span class="built_in">print</span>(alert.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 后续有其他操作，如确认操作dr.switch_to.alert.accept(),拒绝警告框dr.switch_to.alert.dismiss()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript实战</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##2.10.1 JavaScript实战</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver=webdriver.Chrome()</span><br><span class="line">driver.get(“http://localhost:<span class="number">8080</span>”)</span><br><span class="line"><span class="comment">#定位富文本 并向富文本输入内容 A</span></span><br><span class="line">js=<span class="string">&quot;document.getElementById(&#x27;content_ifr&#x27;).contentWindow.document.body.innerHTML=&#x27;%s&#x27;&quot;</span> %(A)</span><br><span class="line">driver.execute_script(js)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##2.10.2  处理隐藏元素实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&#x27;file:///E:/webdriver_api_demo/frame.html&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#设置元素为可见，强制设置</span></span><br><span class="line">js = <span class="string">&#x27;document.querySelectorAll(&quot;select&quot;)[0].style.display=&quot;block&quot;;&#x27;</span></span><br><span class="line">dr.execute_script(js)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">element = dr.find_element(By.ID,<span class="string">&quot;s3&quot;</span>)</span><br><span class="line">Select(element).select_by_visible_text(<span class="string">&quot;po设计模式&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##2.10.3  处理readonly属性实战</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">dr.get(<span class="string">&#x27;https://kyfw.12306.cn/otn/leftTicket/init&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">###强制移除属性</span></span><br><span class="line">js1 = <span class="string">&quot;document.getElementById(&#x27;train_date&#x27;).removeAttribute(&#x27;readonly&#x27;);&quot;</span>  <span class="comment">#移除readonly属性</span></span><br><span class="line">dr.execute_script(js1)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">dr.find_element_by_id(<span class="string">&#x27;train_date&#x27;</span>).clear()   <span class="comment">#清空日期</span></span><br><span class="line">dr.find_element_by_id(<span class="string">&#x27;train_date&#x27;</span>).send_keys(<span class="string">&#x27;2018-12-10&#x27;</span>)  <span class="comment">#输入最新日期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##2.10.4  处理浏览器滚动条实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver=webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)  <span class="comment">#访问百度搜索</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.scrollTo(0,10000);&quot;</span>) <span class="comment">#将页面滚动条拖到底部</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;window.scrollTo(10000,0);&quot;</span>)  <span class="comment">#将滚动条移动到页面的顶部</span></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys   <span class="comment">#引入键盘类</span></span><br><span class="line">driver=webdriver.Chrome()</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)  <span class="comment">#访问百度搜索</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;好奇心日报&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#将页面滚动条拖到底部</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;page&quot;]/a[10]&#x27;</span>).send_keys(Keys.DOWN)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#将滚动条移动到页面的顶部</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;s_tab&quot;]/div/a[9]&#x27;</span>).send_keys(Keys.UP)</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>unittest单元测试框架</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##2.11.1  unittest简介</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStrSample</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_strendswich</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertEqual(<span class="string">&#x27;foo&#x27;</span>.endswith(<span class="string">&#x27;o&#x27;</span>),<span class="literal">False</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_split</span>(<span class="params">self</span>):</span></span><br><span class="line">        s = <span class="string">&#x27;my name is Fighter&#x27;</span></span><br><span class="line">        self.assertEqual(s.split(), [<span class="string">&#x27;my&#x27;</span>, <span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;Fighter&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line"><span class="comment">##2.11.2  前置和后置</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStringMethods</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;每条测试用例开始执行前做的操作.....&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_isupper</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertTrue(<span class="string">&#x27;FOO&#x27;</span>.endswith(<span class="string">&#x27;O&#x27;</span>))</span><br><span class="line">        self.assertFalse(<span class="string">&#x27;Foo&#x27;</span>.isupper())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第一条测试用例&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_strendswich</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertEqual(<span class="string">&#x27;foo&#x27;</span>.endswith(<span class="string">&#x27;o&#x27;</span>), <span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第二条测试用例&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;每条测试用例执行完毕后做的操作.....&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##2.11.3  常用断言方法</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestWebUI</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_QQLogin</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&#x27;https://mail.qq.com/cgi-bin/loginpage&#x27;</span>)</span><br><span class="line">        self.assertEqual(self.driver.title,<span class="string">&#x27;登录QQ邮箱&#x27;</span>,’页面跳转失败，请重新检查！’)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_MaoyanMovie</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&#x27;https://maoyan.com/&#x27;</span>)</span><br><span class="line">        self.assertEqual(self.driver.title,<span class="string">&#x27;猫眼电影 - 一网打尽好电影&#x27;</span>,’页面跳转失败,请重新检查！’)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##2.11.4  setUpClass和tearDownClass</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestWebUI</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.driver = webdriver.Chrome()</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.driver.quit()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_QQLogin</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&#x27;https://mail.qq.com/cgi-bin/loginpage&#x27;</span>)</span><br><span class="line">        self.assertEqual(self.driver.title,<span class="string">&#x27;登录QQ邮箱&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_MaoyanMovie</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&#x27;https://maoyan.com/&#x27;</span>)</span><br><span class="line">        self.assertEqual(self.driver.title,<span class="string">&#x27;猫眼电影 - 一网打尽好电影&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">常用断言：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>assertEqual(self, first, second, msg=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">--判断两个参数相等：first == second</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>assertNotEqual(self, first, second, msg=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">--判断两个参数不相等：first ！= second</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>assertIn(self, member, container, msg=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">--判断是字符串是否包含：member <span class="keyword">in</span> container</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>assertNotIn(self, member, container, msg=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">--判断是字符串是否不包含：member <span class="keyword">not</span> <span class="keyword">in</span> container</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>assertTrue(self, expr, msg=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">--判断是否为真：expr <span class="keyword">is</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>assertFalse(self, expr, msg=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">--判断是否为假：expr <span class="keyword">is</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>assertIsNone(self, obj, msg=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">--判断是否为<span class="literal">None</span>：obj <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>assertIsNotNone(self, obj, msg=<span class="literal">None</span>)</span><br><span class="line">--判断是否不为<span class="literal">None</span>：obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>##测试固件分离</p>
<p>对测试项目来说，一遍用例跟通用测试步骤分离。比如测试地址、实例化浏览器、关闭浏览器等操作固定，可以单独搞个py文件，然后测试用例执行时，<br>只需要导入这些setup、teardonw类即可。</p>
<p>Myunit.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestWebUI</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.driver = webdriver.Chrome()</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>testUnit.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Myunit <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestModle</span>(<span class="params">TestWebUI</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_QQLogin</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&#x27;https://mail.qq.com/cgi-bin/loginpage&#x27;</span>)</span><br><span class="line">        self.assertEqual(self.driver.title,<span class="string">&#x27;登录QQ邮箱&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_MaoyanMovie</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.get(<span class="string">&#x27;https://maoyan.com/&#x27;</span>)</span><br><span class="line">        self.assertEqual(self.driver.title,<span class="string">&#x27;猫眼电影 - 一网打尽好电影&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>##生成HTML测试报告</p>
<p>allTest.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,time,unittest</span><br><span class="line"><span class="keyword">from</span> HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllCases</span>():</span></span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;获取tesTcase下面的所有测试模块&#x27;&#x27;&#x27;</span></span><br><span class="line">   Testsuite = unittest.defaultTestLoader.discover(</span><br><span class="line">      start_dir=os.path.join(os.path.dirname(__file__),<span class="string">&#x27;TestCases&#x27;</span>),</span><br><span class="line">      pattern=<span class="string">&#x27;test*.py&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> Testsuite</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RunMain</span>():</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;生成测试报告写入指定Reports目录&#x27;&#x27;&#x27;</span></span><br><span class="line">   fp=<span class="built_in">open</span>(os.path.join(os.path.dirname(__file__),<span class="string">&#x27;Reports&#x27;</span>,</span><br><span class="line">time.strftime(<span class="string">&quot;%Y_%m_%d_%H_%M_%S&quot;</span>)+ <span class="string">&#x27;report.html&#x27;</span>),<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">   HTMLTestRunner(stream=fp,title=<span class="string">&#x27;Python+Selenium自动化测试实战&#x27;</span>,</span><br><span class="line">                   description=<span class="string">&#x27;基于python语言UI自动化测试&#x27;</span>).run(getAllCases())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   RunMain()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>数据驱动测试实战</li>
</ul>
<p>DDT 安装：pip install ddt</p>
<p>##2.12.2  DDT在自动化测试中的应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ddt</span><br><span class="line">import unittest</span><br><span class="line">Data = [&#123;&#x27;name&#x27;:&quot;keep learing&quot;&#125;,</span><br><span class="line">        &#123;&#x27;age&#x27;:18&#125;,</span><br><span class="line">        &#123;&#x27;address&#x27;:&quot;深圳地区&quot;&#125;]</span><br><span class="line">@ddt.ddt</span><br><span class="line">class TestModules(unittest.TestCase):</span><br><span class="line">    def setUp(self):</span><br><span class="line">        print(&#x27;testcase beaning....&#x27;)</span><br><span class="line">    def tearDown(self):</span><br><span class="line">        print(&#x27;testcase ending.....&#x27;)</span><br><span class="line">    @ddt.data(*Data)</span><br><span class="line">    def test_DataDriver(self,Data):</span><br><span class="line">        print(&#x27;DDT数据驱动实战演示：&#x27;,Data)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###2.12.3  Excel自动化测试实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> ddt,unittest</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait   <span class="comment">#导入WebDriverWait类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment"># 导入EC模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readUserName</span>(<span class="params">row</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;读取用户名&#x27;&#x27;&#x27;</span></span><br><span class="line">    book  = xlrd.open_workbook(<span class="string">&#x27;datainfo.xlsx&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    table = book.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> table.row_values(row)[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readPasswd</span>(<span class="params">row</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;读取用户名&#x27;&#x27;&#x27;</span></span><br><span class="line">    book  = xlrd.open_workbook(<span class="string">&#x27;datainfo.xlsx&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    table = book.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> table.row_values(row)[<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readAssertText</span>(<span class="params">row</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;读取预期结果&#x27;&#x27;&#x27;</span></span><br><span class="line">    book  = xlrd.open_workbook(<span class="string">&#x27;datainfo.xlsx&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    table = book.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> table.row_values(row)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">TestSouHuLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.testUrl = <span class="string">&quot;https://mail.sohu.com/fe/#/login&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">by_css</span>(<span class="params">self,usernameloc</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;重写css定位&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element_by_css_selector(usernameloc)</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">getassertText</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取验证信息&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            loctor = (By.CSS_SELECTOR,<span class="string">&#x27;.tipHolder.ng-binding&#x27;</span>)</span><br><span class="line">            WebDriverWait(self.driver, <span class="number">5</span>, <span class="number">0.5</span>).until(EC.presence_of_element_located((loctor)))</span><br><span class="line">            <span class="keyword">return</span> self.by_css(<span class="string">&#x27;.tipHolder.ng-binding&#x27;</span>).text</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> message:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;元素定位报错!报错原因是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(message))</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">souhuLogin</span>(<span class="params">self,user,passwd</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;封装登录功能&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.by_css(<span class="string">&#x27;.addFocus.ipt-account.ng-pristine.ng-valid&#x27;</span>).send_keys(user)</span><br><span class="line">        self.by_css(<span class="string">&#x27;.addFocus.ng-pristine.ng-valid&#x27;</span>).send_keys(passwd)</span><br><span class="line">        self.by_css(<span class="string">&#x27;.btn-login.fontFamily&#x27;</span>).click()</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">test_souHuLogin_001</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;账号和密码为空：登录失败&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.driver.get(self.testUrl)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        self.souhuLogin(readUserName(<span class="number">1</span>),readPasswd(<span class="number">1</span>))</span><br><span class="line">        self.assertEqual(self.getassertText(), readAssertText(<span class="number">1</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">test_souHuLogin_002</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;账号正确和密码为空：登录失败&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.driver.get(self.testUrl)</span><br><span class="line">        self.souhuLogin(readUserName(<span class="number">2</span>), readPasswd(<span class="number">2</span>))</span><br><span class="line">        self.assertEqual(self.getassertText(), readAssertText(<span class="number">2</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">test_souHuLogin_003</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;账号错误和密码为空：登录失败&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.driver.get(self.testUrl)</span><br><span class="line">        self.souhuLogin(readUserName(<span class="number">3</span>), readPasswd(<span class="number">3</span>))</span><br><span class="line">        self.assertEqual(self.getassertText(), readAssertText(<span class="number">3</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span>  <span class="title">test_souHuLogin_004</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;账号为空和密码正确：登录失败&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.driver.get(self.testUrl)</span><br><span class="line">        self.souhuLogin(readUserName(<span class="number">4</span>), readPasswd(<span class="number">4</span>))</span><br><span class="line">        self.assertEqual(self.getassertText(), readAssertText(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###2.12.4  Excel整合DDT自动化测试实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> ddt,unittest</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait      <span class="comment">#导入WebDriverWait类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment">#导入EC模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readData</span>():</span></span><br><span class="line">    book  = xlrd.open_workbook(<span class="string">&#x27;datainfo.xlsx&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)  <span class="comment">#读取datainfo.xlsx表</span></span><br><span class="line">    table = book.sheet_by_index(<span class="number">0</span>)               <span class="comment">#获取第一个sheet</span></span><br><span class="line">    newRows=[]                  </span><br><span class="line">    <span class="keyword">for</span> rowValue <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,table.nrows):</span><br><span class="line">        newRows.append(table.row_values(rowValue,<span class="number">0</span>,table.ncols))</span><br><span class="line">    <span class="keyword">return</span> newRows             <span class="comment">#返回新的newRows</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt.ddt</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.testUrl = <span class="string">&quot;https://mail.sohu.com/fe/#/login&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver.quit()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">by_css</span>(<span class="params">self,usernameloc</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;重写css定位&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element_by_css_selector(usernameloc)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getassertText</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取验证信息&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            loctor = (By.CSS_SELECTOR,<span class="string">&#x27;.tipHolder.ng-binding&#x27;</span>)</span><br><span class="line">            WebDriverWait(self.driver, <span class="number">5</span>, <span class="number">0.5</span>).until(EC.presence_of_element_located((loctor)))</span><br><span class="line">            <span class="keyword">return</span> self.by_css(<span class="string">&#x27;.tipHolder.ng-binding&#x27;</span>).text</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> message:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;元素定位报错!报错原因是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(message))</span><br><span class="line"><span class="meta">    @ddt.data(<span class="params">*readData(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="meta">    @ddt.unpack</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_souhuLogin</span>(<span class="params">self,user,passwd,text</span>):</span></span><br><span class="line">        self.driver.get(self.testUrl)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        self.by_css(<span class="string">&#x27;.addFocus.ipt-account.ng-pristine.ng-valid&#x27;</span>).send_keys(user)</span><br><span class="line">        self.by_css(<span class="string">&#x27;.addFocus.ng-pristine.ng-valid&#x27;</span>).send_keys(passwd)</span><br><span class="line">        self.by_css(<span class="string">&#x27;.btn-login.fontFamily&#x27;</span>).click()</span><br><span class="line">        self.assertEqual(self.getassertText(),text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####2.12.5  YAML自动化测试实战,需要pip install pyyaml</span></span><br><span class="line"><span class="keyword">import</span> unittest,yaml</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readYaml</span>():</span></span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;获取所有yaml所有数据&#x27;&#x27;&#x27;</span></span><br><span class="line">   f = <span class="built_in">open</span>(<span class="string">&#x27;data.yaml&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">   data = yaml.load(f)</span><br><span class="line">   f.close()</span><br><span class="line">   <span class="keyword">return</span> data</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.driver = webdriver.Chrome()</span><br><span class="line">      self.testUrl = <span class="string">&quot;https://mail.sohu.com/fe/#/login&quot;</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.driver.quit()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">by_css</span>(<span class="params">self,usernameloc</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;重写css定位&#x27;&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> self.driver.find_element_by_css_selector(usernameloc)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">getassertText</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;获取验证信息&#x27;&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">         <span class="keyword">return</span> self.by_css(<span class="string">&#x27;.tipHolder.ng-binding&#x27;</span>).text</span><br><span class="line">      <span class="keyword">except</span> Exception <span class="keyword">as</span> message:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;元素定位报错!报错原因是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(message))</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">souhuLogin</span>(<span class="params">self,user,passwd</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;封装登录功能&#x27;&#x27;&#x27;</span></span><br><span class="line">      self.by_css(<span class="string">&#x27;.addFocus.ipt-account.ng-pristine.ng-valid&#x27;</span>).send_keys(user)</span><br><span class="line">      self.by_css(<span class="string">&#x27;.addFocus.ng-pristine.ng-valid&#x27;</span>).send_keys(passwd)</span><br><span class="line">      self.by_css(<span class="string">&#x27;.btn-login.fontFamily&#x27;</span>).click()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">test_souHuLogin_001</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;账号正确和密码为空：登录失败&#x27;&#x27;&#x27;</span></span><br><span class="line">      self.driver.get(self.testUrl)</span><br><span class="line">      sleep(<span class="number">3</span>)</span><br><span class="line">      self.souhuLogin(readYaml()[<span class="string">&#x27;userNull&#x27;</span>][<span class="string">&#x27;username&#x27;</span>],readYaml()[<span class="string">&#x27;userNull&#x27;</span>][<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">      self.assertEqual(self.getassertText(), readYaml()[<span class="string">&#x27;userNull&#x27;</span>][<span class="string">&#x27;assertText&#x27;</span>])</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">test_souHuLogin_002</span>(<span class="params">self</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;账号错误和密码为空：登录失败&#x27;&#x27;&#x27;</span></span><br><span class="line">      self.driver.get(self.testUrl)</span><br><span class="line">      sleep(<span class="number">3</span>)</span><br><span class="line">      self.souhuLogin(readYaml()[<span class="string">&#x27;passNull&#x27;</span>][<span class="string">&#x27;username1&#x27;</span>],readYaml()[<span class="string">&#x27;passNull&#x27;</span>][<span class="string">&#x27;password1&#x27;</span>])</span><br><span class="line">      self.assertEqual(self.getassertText(), readYaml()[<span class="string">&#x27;passNull&#x27;</span>][<span class="string">&#x27;assertText1&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   unittest.main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####2.12.6  Parameterized参数化实战,需要pip install parameterized</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> parameterized <span class="keyword">import</span> parameterized  <span class="comment">#导入参数化模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.driver = webdriver.Chrome()</span><br><span class="line">        cls.testUrl = <span class="string">&#x27;https://mail.sohu.com/fe/#/login&#x27;</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        cls.driver.quit()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">by_css</span>(<span class="params">self, usernameloc</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;重写css定位&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element_by_css_selector(usernameloc)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getassertText</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取验证信息&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.by_css(<span class="string">&#x27;.tipHolder.ng-binding&#x27;</span>).text</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> message:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;元素定位报错!报错原因是：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(message))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">souhuLogin</span>(<span class="params">self, user, passwd</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;封装登录功能&#x27;&#x27;&#x27;</span></span><br><span class="line">        self.by_css(<span class="string">&#x27;.addFocus.ipt-account.ng-pristine.ng-valid&#x27;</span>).send_keys(user)</span><br><span class="line">        self.by_css(<span class="string">&#x27;.addFocus.ng-pristine.ng-valid&#x27;</span>).send_keys(passwd)</span><br><span class="line">        self.by_css(<span class="string">&#x27;.btn-login.fontFamily&#x27;</span>).click()</span><br><span class="line">上述代码，对搜狐邮箱登录、css元素定位、登录后的验证信息功能进行二次封装。封装后的方法分别是souhuLogin()、by_css()、getassertText()。</span><br><span class="line"><span class="meta">@parameterized.expand(<span class="params">[</span></span></span><br><span class="line"><span class="params"><span class="meta">        (<span class="params"><span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;请输入账号密码&#x27;</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">        (<span class="params"><span class="string">&#x27;admin111@sohu.com&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;请输入账号密码&#x27;</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">(<span class="params"><span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;a123456789&#x27;</span>, <span class="string">&#x27;请输入账号密码&#x27;</span></span>)]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span>(<span class="params">self,username, password, assert_text</span>):</span></span><br><span class="line">        <span class="comment">#登录系统</span></span><br><span class="line">        self.driver.get(self.testUrl)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        self.souhuLogin(username,password)</span><br><span class="line">        self.assertEqual(self.getassertText(), assert_text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>


<ul>
<li>发送邮件实战</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###2.13.1  纯文本的邮件实战</span></span><br><span class="line"><span class="keyword">import</span> smtplib     <span class="comment">#调用smtp发件服务</span></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText    <span class="comment">#导入做纯文本的邮件模板类</span></span><br><span class="line">smtpsever=<span class="string">&#x27;smtp.qq.com&#x27;</span>                <span class="comment">#QQ邮箱服务器</span></span><br><span class="line">sender=<span class="string">&#x27;qq邮箱账号@qq.com&#x27;</span>           <span class="comment">#发送者邮箱</span></span><br><span class="line">psw=<span class="string">&quot;hcygozfxeassddhhb&quot;</span>              <span class="comment">#配置邮箱客户端生成的QQ邮箱授权码</span></span><br><span class="line">receiver=<span class="string">&#x27;126邮箱账号@126.com&#x27;</span>       <span class="comment">#接收者邮箱</span></span><br><span class="line">port=<span class="number">465</span>   <span class="comment">#QQ邮箱服务器默认端口号</span></span><br><span class="line"></span><br><span class="line">msg=MIMEText(body,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)     <span class="comment">#邮件正文内容</span></span><br><span class="line">msg[<span class="string">&#x27;from&#x27;</span>]=qq邮箱账号@qq.com<span class="string">&#x27;     #发送者账号</span></span><br><span class="line"><span class="string">msg[&#x27;</span>to<span class="string">&#x27;]=&#x27;</span><span class="number">126</span>邮箱账号@qq.com<span class="string">&#x27;      #接收者账号</span></span><br><span class="line"><span class="string">msg[&#x27;</span>subject<span class="string">&#x27;] = &quot;这个是纯文本发送的邮件示例&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">smtp = smtplib.SMTP_SSL(smtpsever,port)  #调用发件服务</span></span><br><span class="line"><span class="string">smtp.login(sender,psw)   #通过发送者的邮箱账号和授权码登录邮箱</span></span><br><span class="line"><span class="string">smtp.sendmail(sender,receiver,msg.as_string())  #发送邮件，信息以字符串方式保存</span></span><br><span class="line"><span class="string">smtp.quit()                                   #关闭邮件服务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###2.13.2  带附件的邮件实战</span></span><br><span class="line"><span class="string">import smtplib</span></span><br><span class="line"><span class="string">from email.mime.text import MIMEText           #导入做纯文本的邮件模板类</span></span><br><span class="line"><span class="string">from email.mime.multipart import MIMEMultipart   #导入MIMEMultipart类</span></span><br><span class="line"><span class="string">#发邮件相关参数</span></span><br><span class="line"><span class="string">smtpsever=&#x27;</span>smtp.qq.com<span class="string">&#x27;       #QQ邮箱服务器</span></span><br><span class="line"><span class="string">sender=&#x27;</span>239xxxxx@qq.com<span class="string">&#x27;    #发送者邮箱</span></span><br><span class="line"><span class="string">psw=&quot;xxxxxxxxxxxxxxxx&quot;      #qq邮箱授权码</span></span><br><span class="line"><span class="string">receiver=&#x27;</span>xxxxx@<span class="number">126.</span>com<span class="string">&#x27;    #接收者邮箱账号</span></span><br><span class="line"><span class="string">port=465                   #QQ邮箱服务器默认端口号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">filepath=r&quot;./readme.txt&quot;  #编辑邮件的内容</span></span><br><span class="line"><span class="string">with open(filepath,&#x27;</span><span class="string">rb&#x27;) as fp:    #读文件</span></span><br><span class="line"><span class="string">    mail_body=fp.read()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#主题</span></span><br><span class="line"><span class="string">msg=MIMEMultipart()</span></span><br><span class="line"><span class="string">msg[&quot;from&quot;]=sender</span></span><br><span class="line"><span class="string">msg[&quot;to&quot;]=receiver</span></span><br><span class="line"><span class="string">msg[&quot;subject&quot;]=&quot;带附件的邮件发送模版主题&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">body=MIMEText(mail_body,&quot;html&quot;,&quot;utf-8&quot;)</span></span><br><span class="line"><span class="string">msg.attach(body)</span></span><br><span class="line"><span class="string">att = MIMEText(mail_body,&quot;base64&quot;,&quot;utf-8&quot;)</span></span><br><span class="line"><span class="string">att[&quot;Content-Type&quot;] = &quot;application/octet-stream&quot;</span></span><br><span class="line"><span class="string">att[&quot;Content-Disposition&quot;] = &#x27;</span>attachment; filename=<span class="string">&quot;test_report.html&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">msg.attach(att)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    smtp=smtplib.SMTP()</span></span><br><span class="line"><span class="string">    smtp.connect(smtpsever)                     #连接QQ邮箱服务器</span></span><br><span class="line"><span class="string">    smtp.login(sender,psw)                       #调用发件服务</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    smtp=smtplib.SMTP_SSL(smtpsever,port)</span></span><br><span class="line"><span class="string">    smtp.login(sender,psw)                       #登录邮箱</span></span><br><span class="line"><span class="string">smtp.sendmail(sender,receiver,msg.as_string())     #发送邮件</span></span><br><span class="line"><span class="string">smtp.quit()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>自动化封装实战1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###2.14.1  自动化封装实战-第一部</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By             <span class="comment">#导入By类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait   <span class="comment">#导入WebDriverWait类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment">#导入EC模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Element_Locator</span>(<span class="params">*new_loctor</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;重写find_element定位方法&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> driver.find_element(*new_loctor)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_username</span>(<span class="params">username,*userLoctor</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入用户名&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Element_Locator(*userLoctor).send_keys(username)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_password</span>(<span class="params">password,*passwdLoctor</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;输入密码&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Element_Locator(*passwdLoctor).send_keys(password)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_btn</span>(<span class="params">*clickLoctor</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;点击登录按钮&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Element_Locator(*clickLoctor).click()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">assert_Login_text</span>(<span class="params">*assertText</span>):</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;获取登录成功后的验证信息&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Element_Locator(*assertText).text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#定位器</span></span><br><span class="line">    user_loc = (By.ID, <span class="string">&#x27;mobilePhone&#x27;</span>)</span><br><span class="line">    passwd_loc = (By.ID, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    click_loc = (By.ID, <span class="string">&#x27;loginBtn&#x27;</span>)</span><br><span class="line">    successLogin_loc = (By.CSS_SELECTOR,<span class="string">&#x27;a.fc-blue.mr-5&#x27;</span>)</span><br><span class="line">    driver = webdriver.Chrome()  <span class="comment"># 获取驱动</span></span><br><span class="line">    driver.get(<span class="string">&#x27;https://www.gjfax.com/toLogin&#x27;</span>)  <span class="comment"># 获取测试网址</span></span><br><span class="line">    driver.maximize_window()  <span class="comment"># 最大化窗口</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    driver.refresh()</span><br><span class="line">    input_username(<span class="string">&#x27;18513600235&#x27;</span>,*user_loc)     <span class="comment">#输入账号</span></span><br><span class="line">    input_password(<span class="string">&#x27;a123456&#x27;</span>,*passwd_loc)       <span class="comment">#输入密码</span></span><br><span class="line">    click_btn(*click_loc)                         <span class="comment">#点击登录按钮</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 断言</span></span><br><span class="line">    <span class="keyword">if</span> assert_Login_text(*successLogin_loc) == <span class="string">&#x27;安全退出&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试用例通过！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试用例失败！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>自动化封装实战2</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###2.14.2  自动化封装实战-第二部</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By  <span class="comment">#二次定位的By类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GJsProject</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">      self.driver = webdriver.Chrome()   <span class="comment">#定义驱动</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">openbrowser</span>(<span class="params">self,url</span>):</span>            <span class="comment">#定义基础操作</span></span><br><span class="line">      self.driver.get(url)</span><br><span class="line">      self.driver.maximize_window()</span><br><span class="line">      sleep(<span class="number">2</span>)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">by_css</span>(<span class="params">self,loc</span>):</span></span><br><span class="line">      <span class="string">&#x27;&#x27;&#x27;重写css定位&#x27;&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> self.driver.find_element(By.CSS_SELECTOR,loc)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">click_login_btn</span>(<span class="params">self,loc</span>):</span>             <span class="comment">#点击登录按钮</span></span><br><span class="line">      self.by_css(loc).click()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">input_username_Text</span>(<span class="params">self,loc,text</span>):</span>  <span class="comment">#输入账号</span></span><br><span class="line">      self.by_css(loc).send_keys(text)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">input_password_Text</span>(<span class="params">self,loc,text</span>):</span>  <span class="comment">#输入密码</span></span><br><span class="line">      self.by_css(loc).send_keys(text)</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">click_login_button</span>(<span class="params">self,loc</span>):</span>        <span class="comment">#点击登录按钮</span></span><br><span class="line">      self.by_css(loc).click()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">assert_success_text</span>(<span class="params">self,loc</span>):</span>     <span class="comment">#获取验证信息</span></span><br><span class="line">      <span class="keyword">return</span> self.by_css(loc).text    </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">logsys_gjs_action</span>(<span class="params">self,loc</span>):</span>       <span class="comment">#退出系统</span></span><br><span class="line">      self.by_css(loc).click()</span><br><span class="line">      sleep(<span class="number">2</span>)</span><br><span class="line">      self.driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录流程</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">login_gjs</span>(<span class="params">self,url,loc1,loc2,username,loc3,password,loc4,loc5,exceptText,loc6</span>):</span></span><br><span class="line">      self.openbrowser(url)</span><br><span class="line">      sleep(<span class="number">1</span>)</span><br><span class="line">      self.click_login_btn(loc1)</span><br><span class="line">      sleep(<span class="number">1</span>)</span><br><span class="line">      self.input_username_Text(loc2,username)</span><br><span class="line">      sleep(<span class="number">1</span>)</span><br><span class="line">      self.input_password_Text(loc3,password)</span><br><span class="line">      sleep(<span class="number">1</span>)</span><br><span class="line">      self.click_login_button(loc4)</span><br><span class="line">      sleep(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> self.assert_success_text(loc5) == exceptText:  <span class="comment">#断言登录是否成功</span></span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line">      self.logsys_gjs_action(loc6)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   t = GJs()</span><br><span class="line">   url = <span class="string">&#x27;https://www.gjfax.com/&#x27;</span>           <span class="comment">#打开项目地址</span></span><br><span class="line">   loc1 = <span class="string">&quot;span.menubar-btn .fc-white&quot;</span>    <span class="comment">#定位器</span></span><br><span class="line">   loc2 = <span class="string">&quot;#mobilePhone&quot;</span></span><br><span class="line">   username = <span class="string">&#x27;18513600235&#x27;</span></span><br><span class="line">   loc3 = <span class="string">&quot;#password&quot;</span></span><br><span class="line">   password = <span class="string">&#x27;a123456&#x27;</span></span><br><span class="line">   loc4 = <span class="string">&quot;#loginBtn&quot;</span></span><br><span class="line">   loc5 = <span class="string">&quot;a.fc-blue.mr-5&quot;</span> </span><br><span class="line">   exceptText = <span class="string">&#x27;安全退出&#x27;</span></span><br><span class="line">   loc6 = <span class="string">&quot;a.fc-blue.mr-5&quot;</span></span><br><span class="line">   t.login_gjs(url,loc1,loc2,username,loc3,password,loc4,loc5,exceptText,loc6)  <span class="comment">#调用登录方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试框架的封装和脚本的分层设计</li>
</ul>
<h3 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h3><p>homePage.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding=utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Le.shen&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait   <span class="comment">#显示等待</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC  <span class="comment">#判断元素是否被定位到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#页面的基础类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span>():</span></span><br><span class="line">	<span class="comment">#构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url,dr</span>):</span></span><br><span class="line">		self.url = url</span><br><span class="line">		self.dr = dr</span><br><span class="line"></span><br><span class="line">	<span class="comment">#封装元素定位方式</span></span><br><span class="line">	<span class="comment">###如果找不到元素就抛出except异常，HomePage类用于所有页面的继承。</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">find_element</span>(<span class="params">self,*loc</span>):</span></span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			WebDriverWait(self.dr,<span class="number">20</span>).until(EC.visibility_of_element_located(loc))</span><br><span class="line">			<span class="keyword">return</span> self.dr.find_element(*loc)</span><br><span class="line">		<span class="keyword">except</span> Exception <span class="keyword">as</span> message:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;元素定位在页面中无法找到！&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(message))</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>loginpage.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding=utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Le.shen&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;../basePage&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> homePage <span class="keyword">import</span> HomePage   <span class="comment">#导入基础类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By <span class="comment">#定位方式</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录的页面类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span>(<span class="params">HomePage</span>):</span></span><br><span class="line">	<span class="comment">#定位器</span></span><br><span class="line">	<span class="comment">#用户名</span></span><br><span class="line">	username_loc = (By.ID,<span class="string">&#x27;mobilePhone&#x27;</span>)</span><br><span class="line">	<span class="comment">#密码</span></span><br><span class="line">	password_loc = (By.ID,<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">	<span class="comment">#登录按钮</span></span><br><span class="line">	loginBtn_loc = (By.ID,<span class="string">&#x27;loginBtn&#x27;</span>)</span><br><span class="line">	<span class="comment">#退出连接</span></span><br><span class="line">	logoutBtn_loc = (By.CSS_SELECTOR,<span class="string">&#x27;a.fc-blue.mr-5&#x27;</span>)</span><br><span class="line">	<span class="comment">#用户名为空</span></span><br><span class="line">	userNull_loc = (By.CSS_SELECTOR,<span class="string">&#x27;#error &gt; span.error&#x27;</span>)</span><br><span class="line">	<span class="comment">#密码为空</span></span><br><span class="line">	passWordNull_loc = (By.CSS_SELECTOR,<span class="string">&#x27;#error &gt; span.error&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#打开登陆页面</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">openLoginPage</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.dr.get(self.url)</span><br><span class="line">		self.dr.refresh()</span><br><span class="line">		self.dr.maximize_window()</span><br><span class="line">		sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#输入用户名</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">input_userName</span>(<span class="params">self,userName</span>):</span></span><br><span class="line">		self.find_element(*self.username_loc).send_keys(userName)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#输入密码</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">input_passWord</span>(<span class="params">self,password</span>):</span></span><br><span class="line">		self.find_element(*self.password_loc).send_keys(password)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#点击登录按钮</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">click_loginBtn</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.find_element(*self.loginBtn_loc).click()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#获取登录成功后的提示信息</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_assertText</span>(<span class="params">self</span>):</span></span><br><span class="line">		sleep(<span class="number">3</span>)</span><br><span class="line">		<span class="keyword">return</span> self.find_element(*self.logoutBtn_loc).text</span><br><span class="line"></span><br><span class="line">	<span class="comment">#用户名为空的提示</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_userNullText</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="keyword">return</span> self.find_element(*self.userNull_loc).text</span><br><span class="line"></span><br><span class="line">	<span class="comment">#密码为空的提示</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_passwordNullText</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="keyword">return</span> self.find_element(*self.passWordNull_loc).text</span><br><span class="line"></span><br><span class="line">	<span class="comment">#组装成登录流程</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">login_gjs_pro</span>(<span class="params">self,username,password</span>):</span></span><br><span class="line">		self.input_userName(username)</span><br><span class="line">		self.input_passWord(password)</span><br><span class="line">		self.click_loginBtn()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>test_Login.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding=utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Le.shen&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys,unittest</span><br><span class="line">sys.path.append(<span class="string">&#x27;../common&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;../page&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> ownUnit <span class="keyword">import</span> MyunitTests  <span class="comment">#导入测试关键所在类</span></span><br><span class="line"><span class="keyword">from</span> helper <span class="keyword">import</span> Helper        <span class="comment">#新增Helper类</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> getImage <span class="keyword">import</span> SaveImage  <span class="comment">#导入截图功能</span></span><br><span class="line"><span class="keyword">import</span> logging  <span class="comment">#导入日志模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span>(<span class="params">MyunitTests,Helper</span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># def  test_login(self):</span></span><br><span class="line">	<span class="comment"># 	&#x27;&#x27;&#x27;正确的用户名和密码&#x27;&#x27;&#x27;</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.openLoginPage()</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;PO-gjs：打开浏览器进入到项目首页&#x27;)</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.login_gjs_pro(self.readusername(1),self.readpassword(1))</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;PO-gjs：输入正确的用户名和密码&#x27;)</span></span><br><span class="line">	<span class="comment"># 	sleep(5)</span></span><br><span class="line">	<span class="comment"># 	self.assertEqual(self.loginpage.get_assertText(),self.exceptText(1))  #断言</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;PO-gjs：登录成功获取信息进行断言&#x27;)</span></span><br><span class="line">	<span class="comment"># 	SaveImage(self.dr,&#x27;login_success.png&#x27;)</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;PO-gjs：登录成功后获取截图信息&#x27;)</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;PO-gjs：第4条用例执行结束.....&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_user_null</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;测试密码为空&#x27;&#x27;&#x27;</span></span><br><span class="line">		self.loginpage.openLoginPage()</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：打开浏览器进入到项目首页&#x27;</span>)</span><br><span class="line">		self.loginpage.login_gjs_pro(self.readusername(<span class="number">2</span>),self.readpassword(<span class="number">2</span>))</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：输入正确用户名和密码为空&#x27;</span>)</span><br><span class="line">		self.assertEqual(self.loginpage.get_passwordNullText(),self.exceptText(<span class="number">2</span>))  <span class="comment">#断言</span></span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：登录失败获取信息进行断言&#x27;</span>)</span><br><span class="line">		SaveImage(self.dr,<span class="string">&#x27;loginpasswdNull.png&#x27;</span>)</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：登录失败后获取截图信息&#x27;</span>)</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：第1条用例执行结束.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_username_null</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;测试用户名为空&#x27;&#x27;&#x27;</span></span><br><span class="line">		self.loginpage.openLoginPage()</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：打开浏览器进入到项目首页&#x27;</span>)</span><br><span class="line">		self.loginpage.login_gjs_pro(self.readusername(<span class="number">3</span>),self.readpassword(<span class="number">3</span>))</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：输入用户名为空和正确密码&#x27;</span>)</span><br><span class="line">		self.assertEqual(self.loginpage.get_userNullText(),self.exceptText(<span class="number">3</span>))</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：登录失败获取信息进行断言&#x27;</span>)</span><br><span class="line">		SaveImage(self.dr,<span class="string">&#x27;loginuserNull.png&#x27;</span>)</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：登录失败后获取截图信息&#x27;</span>)</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：第3条用例执行结束.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_user_passwd_null</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;测试用户名/密码为空&#x27;&#x27;&#x27;</span></span><br><span class="line">		self.loginpage.openLoginPage()</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：打开浏览器进入到项目首页&#x27;</span>)</span><br><span class="line">		self.loginpage.login_gjs_pro(self.readusername(<span class="number">4</span>),self.readpassword(<span class="number">4</span>))</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：输入用户名为空和正确为空&#x27;</span>)</span><br><span class="line">		self.assertEqual(self.loginpage.get_passwordNullText(),self.exceptText(<span class="number">4</span>))</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：登录失败获取信息进行断言&#x27;</span>)</span><br><span class="line">		SaveImage(self.dr,<span class="string">&#x27;loginuserAndpasswd.png&#x27;</span>)</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：登录失败后获取截图信息&#x27;</span>)</span><br><span class="line">		self.log(<span class="string">&#x27;PO-gjs：第2条用例执行结束.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># self.loginpage.openLoginPage()</span></span><br><span class="line"><span class="comment"># self.log(&#x27;测试正常的登录：po自动化测试--&gt;打开登录页面&#x27;)</span></span><br><span class="line"><span class="comment"># # 输入账号</span></span><br><span class="line"><span class="comment"># self.loginpage.input_userName(self.readusername(1))</span></span><br><span class="line"><span class="comment"># self.log(&#x27;测试正常的登录：po自动化测试--&gt;输入账号&#x27;)</span></span><br><span class="line"><span class="comment"># # 输入密码</span></span><br><span class="line"><span class="comment"># self.loginpage.input_passWord(self.readpassword(1))</span></span><br><span class="line"><span class="comment"># self.log(&#x27;测试正常的登录：po自动化测试--&gt;输入密码&#x27;)</span></span><br><span class="line"><span class="comment"># # 点击登录</span></span><br><span class="line"><span class="comment"># self.loginpage.click_loginBtn()</span></span><br><span class="line"><span class="comment"># self.log(&#x27;测试正常的登录：po自动化测试--&gt;点击登录按钮&#x27;)</span></span><br><span class="line"><span class="comment"># # 断言</span></span><br><span class="line"><span class="comment"># self.assertEqual(self.loginpage.get_assertText(), self.exceptText(1))</span></span><br><span class="line"><span class="comment"># self.log(&#x27;测试正常的登录：po自动化测试--&gt;验证登录是否成功！&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># import xlrd,logging</span></span><br><span class="line"><span class="comment"># from PO.common.helper import *           ,Helper  继承</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># #测试密码为空</span></span><br><span class="line">	<span class="comment"># def test_user_null(self):</span></span><br><span class="line">	<span class="comment"># 	#打开登录页面</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.openLoginPage()</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;测试密码为空：po自动化测试--&gt;打开登录页面&#x27;)</span></span><br><span class="line">	<span class="comment"># 	#输入账号</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.input_userName(self.readusername(2))</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;测试密码为空：po自动化测试--&gt;输入账号&#x27;)</span></span><br><span class="line">	<span class="comment"># 	#输入密码</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.input_passWord(self.readpassword(2))</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;测试密码为空：po自动化测试--&gt;输入密码&#x27;)</span></span><br><span class="line">	<span class="comment"># 	#点击登录</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.click_loginBtn()</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;测试密码为空：po自动化测试--&gt;点击登录按钮&#x27;)</span></span><br><span class="line">	<span class="comment"># 	#断言</span></span><br><span class="line">	<span class="comment"># 	self.assertEqual(self.loginpage.get_passwordNullText(),self.exceptText(2))</span></span><br><span class="line">	<span class="comment"># 	self.log(&#x27;测试密码为空：po自动化测试--&gt;验证登录是否成功！&#x27;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">	<span class="comment"># #测试用户名为空</span></span><br><span class="line">	<span class="comment"># def test_password_null(self):</span></span><br><span class="line">	<span class="comment"># 	#打开登录页面</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.openLoginPage()</span></span><br><span class="line">	<span class="comment"># 	#输入账号</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.input_userName(self.readusername(3))</span></span><br><span class="line">	<span class="comment"># 	#输入密码</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.input_passWord(self.readpassword(3))</span></span><br><span class="line">	<span class="comment"># 	#点击登录</span></span><br><span class="line">	<span class="comment"># 	self.loginpage.click_loginBtn()</span></span><br><span class="line">	<span class="comment"># 	#断言</span></span><br><span class="line">	<span class="comment"># 	self.assertEqual(self.loginpage.get_userNullText(),self.exceptText(3))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>common测试固件下，ownUnit.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;../basepage&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;../page&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> homePage <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> loginpage <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyunitTests</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment">### 广金所登录页地址有更新 self.url = &#x27;https://www.gjfax.com/toLogin&#x27;</span></span><br><span class="line">		<span class="comment">### https://qhfles.gjfax.com/toLogin</span></span><br><span class="line">		self.url = <span class="string">&#x27;https://qhfles.gjfax.com/toLogin&#x27;</span></span><br><span class="line">		self.dr = webdriver.Chrome()</span><br><span class="line">		self.dr.implicitly_wait(<span class="number">30</span>)</span><br><span class="line">		<span class="comment">#实例化一个loginpage对象</span></span><br><span class="line">		self.loginpage = LoginPage(self.url,self.dr)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.dr.quit()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>helper.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding=utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Le.shen&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> logging,os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">readExcles</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">		rowx是行数</span></span><br><span class="line"><span class="string">		:param rowx:</span></span><br><span class="line"><span class="string">		:return: 返回的每一个行的行数</span></span><br><span class="line"><span class="string">		&#x27;&#x27;&#x27;</span></span><br><span class="line">		book = xlrd.open_workbook(<span class="string">r&#x27;/Users/shenle/PycharmProjects/pythontest100/test_po_jenkins/data/info.xlsx&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">		table = book.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> table.row_values(rowx)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">readusername</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">		rowx返回的是第几行的用户名</span></span><br><span class="line"><span class="string">		:param rowx:</span></span><br><span class="line"><span class="string">		:return:</span></span><br><span class="line"><span class="string">		&#x27;&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">str</span>(self.readExcles(rowx)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">readpassword</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">		rowx返回的是第几行的密码</span></span><br><span class="line"><span class="string">		:param rowx:</span></span><br><span class="line"><span class="string">		:return:</span></span><br><span class="line"><span class="string">		&#x27;&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">return</span> self.readExcles(rowx)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">exceptText</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">		rowx返回的第几行的预期结果</span></span><br><span class="line"><span class="string">		:param rowx:</span></span><br><span class="line"><span class="string">		:return:</span></span><br><span class="line"><span class="string">		&#x27;&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">return</span> self.readExcles(rowx)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span>  <span class="title">dirname</span>(<span class="params">self,filename,filepath=<span class="string">&#x27;data&#x27;</span></span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">		:param filename:文件名字</span></span><br><span class="line"><span class="string">		:param filepath: 文件路径</span></span><br><span class="line"><span class="string">		:return:</span></span><br><span class="line"><span class="string">		&#x27;&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">return</span> os.path.join(os.path.dirname(os.path.dirname(__file__)),filepath,filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self,log_content</span>):</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;定义log日志级别&#x27;&#x27;&#x27;</span></span><br><span class="line">		<span class="comment"># 定义文件</span></span><br><span class="line">		logFile = logging.FileHandler(self.dirname(<span class="string">&#x27;logData.txt&#x27;</span>), <span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">		<span class="comment"># log格式</span></span><br><span class="line">		fmt = logging.Formatter(fmt=<span class="string">&#x27;%(asctime)s-%(name)s-%(levelname)s-%(module)s:%(message)s&#x27;</span>)</span><br><span class="line">		logFile.setFormatter(fmt)</span><br><span class="line">		<span class="comment"># 定义日志</span></span><br><span class="line">		logger1 = logging.Logger(<span class="string">&#x27;logTest&#x27;</span>,level=logging.DEBUG)</span><br><span class="line">		logger1.addHandler(logFile)</span><br><span class="line">		logger1.info(log_content)</span><br><span class="line">		logFile.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>info.xlsx单独放在data目录下。</p>
<p>用户名    密码    预期结果<br>xxxxxxxxxx    a123456            安全退出<br>xxxxxxxxxx                    请输入密码<br>            a123456            请输入用户名/手机号<br>                            请输入用户名/手机号</p>
<p>获取截图getImage.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">SaveImage</span>(<span class="params">driver,errorImage</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;用例失败截图功能&#x27;&#x27;&#x27;</span></span><br><span class="line">    Rawpath =  os.path.join(os.path.dirname(os.path.dirname(__file__)),<span class="string">&#x27;Image&#x27;</span>)</span><br><span class="line">    <span class="comment"># start_dir=os.path.join(os.path.dirname(__file__),&#x27;TestCases&#x27;)</span></span><br><span class="line">    <span class="comment">#Rawpath = os.path.join(os.path.dirname(__file__),&#x27;Image&#x27;)</span></span><br><span class="line">    NewPicture  =  Rawpath + <span class="string">&#x27;/&#x27;</span> + time.strftime(<span class="string">&#x27;%Y_%y_%d_%H_%M_%S&#x27;</span>) + <span class="string">&#x27;_&#x27;</span> + errorImage</span><br><span class="line">    driver.get_screenshot_as_file(NewPicture)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>HTMLTestRunner.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">A TestRunner for use with the Python unit testing framework. It</span></span><br><span class="line"><span class="string">generates a HTML report to show the result at a glance.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The simplest way to use this is to invoke its main method. E.g.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    import unittest</span></span><br><span class="line"><span class="string">    import HTMLTestRunner</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ... define your tests ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">        HTMLTestRunner.main()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For more customization options, instantiates a HTMLTestRunner object.</span></span><br><span class="line"><span class="string">HTMLTestRunner is a counterpart to unittest&#x27;s TextTestRunner. E.g.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # output to a file</span></span><br><span class="line"><span class="string">    fp = file(&#x27;my_report.html&#x27;, &#x27;wb&#x27;)</span></span><br><span class="line"><span class="string">    runner = HTMLTestRunner.HTMLTestRunner(</span></span><br><span class="line"><span class="string">                stream=fp,</span></span><br><span class="line"><span class="string">                title=&#x27;My unit test&#x27;,</span></span><br><span class="line"><span class="string">                description=&#x27;This demonstrates the report output by HTMLTestRunner.&#x27;</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Use an external stylesheet.</span></span><br><span class="line"><span class="string">    # See the Template_mixin class for more customizable options</span></span><br><span class="line"><span class="string">    runner.STYLESHEET_TMPL = &#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;my_stylesheet.css&quot; type=&quot;text/css&quot;&gt;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # run the test</span></span><br><span class="line"><span class="string">    runner.run(my_test_suite)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">Copyright (c) 2004-2007, Wai Yip Tung</span></span><br><span class="line"><span class="string">All rights reserved.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Redistribution and use in source and binary forms, with or without</span></span><br><span class="line"><span class="string">modification, are permitted provided that the following conditions are</span></span><br><span class="line"><span class="string">met:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* Redistributions of source code must retain the above copyright notice,</span></span><br><span class="line"><span class="string">  this list of conditions and the following disclaimer.</span></span><br><span class="line"><span class="string">* Redistributions in binary form must reproduce the above copyright</span></span><br><span class="line"><span class="string">  notice, this list of conditions and the following disclaimer in the</span></span><br><span class="line"><span class="string">  documentation and/or other materials provided with the distribution.</span></span><br><span class="line"><span class="string">* Neither the name Wai Yip Tung nor the names of its contributors may be</span></span><br><span class="line"><span class="string">  used to endorse or promote products derived from this software without</span></span><br><span class="line"><span class="string">  specific prior written permission.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS</span></span><br><span class="line"><span class="string">IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED</span></span><br><span class="line"><span class="string">TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A</span></span><br><span class="line"><span class="string">PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER</span></span><br><span class="line"><span class="string">OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></span><br><span class="line"><span class="string">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></span><br><span class="line"><span class="string">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></span><br><span class="line"><span class="string">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</span></span><br><span class="line"><span class="string">LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING</span></span><br><span class="line"><span class="string">NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span></span><br><span class="line"><span class="string">SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL: http://tungwaiyip.info/software/HTMLTestRunner.html</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&quot;Wai Yip Tung&quot;</span></span><br><span class="line">__version__ = <span class="string">&quot;0.8.2&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Change History</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version 0.8.2</span></span><br><span class="line"><span class="string">* Show output inline instead of popup window (Viorel Lupu).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version in 0.8.1</span></span><br><span class="line"><span class="string">* Validated XHTML (Wolfgang Borgert).</span></span><br><span class="line"><span class="string">* Added description of test classes and test cases.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version in 0.8.0</span></span><br><span class="line"><span class="string">* Define Template_mixin class for customization.</span></span><br><span class="line"><span class="string">* Workaround a IE 6 bug that it does not treat &lt;script&gt; block as CDATA.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version in 0.7.1</span></span><br><span class="line"><span class="string">* Back port to Python 2.3 (Frank Horowitz).</span></span><br><span class="line"><span class="string">* Fix missing scroll bars in detail log (Podi).</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> color stderr</span></span><br><span class="line"><span class="comment"># <span class="doctag">TODO:</span> simplify javascript using ,ore than 1 class in the class attribute?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> xml.sax <span class="keyword">import</span> saxutils</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># The redirectors below are used to capture output during testing. Output</span></span><br><span class="line"><span class="comment"># sent to sys.stdout and sys.stderr are automatically captured. However</span></span><br><span class="line"><span class="comment"># in some cases sys.stdout is already cached before HTMLTestRunner is</span></span><br><span class="line"><span class="comment"># invoked (e.g. calling logging.basicConfig). In order to capture those</span></span><br><span class="line"><span class="comment"># output, use the redirectors for the cached stream.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line"><span class="comment">#   &gt;&gt;&gt; logging.basicConfig(stream=HTMLTestRunner.stdout_redirector)</span></span><br><span class="line"><span class="comment">#   &gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputRedirector</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Wrapper to redirect stdout or stderr &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, fp</span>):</span></span><br><span class="line">        self.fp = fp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        self.fp.write(s)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writelines</span>(<span class="params">self, lines</span>):</span></span><br><span class="line">        self.fp.writelines(lines)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flush</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp.flush()</span><br><span class="line"></span><br><span class="line">stdout_redirector = OutputRedirector(sys.stdout)</span><br><span class="line">stderr_redirector = OutputRedirector(sys.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Template</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template_mixin</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Define a HTML template for report customerization and generation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Overall structure of an HTML report</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    HTML</span></span><br><span class="line"><span class="string">    +------------------------+</span></span><br><span class="line"><span class="string">    |&lt;html&gt;                  |</span></span><br><span class="line"><span class="string">    |  &lt;head&gt;                |</span></span><br><span class="line"><span class="string">    |                        |</span></span><br><span class="line"><span class="string">    |   STYLESHEET           |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |   |                |   |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |                        |</span></span><br><span class="line"><span class="string">    |  &lt;/head&gt;               |</span></span><br><span class="line"><span class="string">    |                        |</span></span><br><span class="line"><span class="string">    |  &lt;body&gt;                |</span></span><br><span class="line"><span class="string">    |                        |</span></span><br><span class="line"><span class="string">    |   HEADING              |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |   |                |   |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |                        |</span></span><br><span class="line"><span class="string">    |   REPORT               |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |   |                |   |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |                        |</span></span><br><span class="line"><span class="string">    |   ENDING               |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |   |                |   |</span></span><br><span class="line"><span class="string">    |   +----------------+   |</span></span><br><span class="line"><span class="string">    |                        |</span></span><br><span class="line"><span class="string">    |  &lt;/body&gt;               |</span></span><br><span class="line"><span class="string">    |&lt;/html&gt;                 |</span></span><br><span class="line"><span class="string">    +------------------------+</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    STATUS = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&#x27;pass&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DEFAULT_TITLE = <span class="string">&#x27;Unit Test Report&#x27;</span></span><br><span class="line">    DEFAULT_DESCRIPTION = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># HTML Template</span></span><br><span class="line"></span><br><span class="line">    HTML_TMPL = <span class="string">r&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;%(title)s&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;generator&quot; content=&quot;%(generator)s&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;</span></span><br><span class="line"><span class="string">    %(stylesheet)s</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;&lt;!--</span></span><br><span class="line"><span class="string">output_list = Array();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* level - 0:Summary; 1:Failed; 2:All */</span></span><br><span class="line"><span class="string">function showCase(level) &#123;</span></span><br><span class="line"><span class="string">    trs = document.getElementsByTagName(&quot;tr&quot;);</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; trs.length; i++) &#123;</span></span><br><span class="line"><span class="string">        tr = trs[i];</span></span><br><span class="line"><span class="string">        id = tr.id;</span></span><br><span class="line"><span class="string">        if (id.substr(0,2) == &#x27;ft&#x27;) &#123;</span></span><br><span class="line"><span class="string">            if (level &lt; 1) &#123;</span></span><br><span class="line"><span class="string">                tr.className = &#x27;hiddenRow&#x27;;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else &#123;</span></span><br><span class="line"><span class="string">                tr.className = &#x27;&#x27;;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if (id.substr(0,2) == &#x27;pt&#x27;) &#123;</span></span><br><span class="line"><span class="string">            if (level &gt; 1) &#123;</span></span><br><span class="line"><span class="string">                tr.className = &#x27;&#x27;;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            else &#123;</span></span><br><span class="line"><span class="string">                tr.className = &#x27;hiddenRow&#x27;;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function showClassDetail(cid, count) &#123;</span></span><br><span class="line"><span class="string">    var id_list = Array(count);</span></span><br><span class="line"><span class="string">    var toHide = 1;</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; count; i++) &#123;</span></span><br><span class="line"><span class="string">        tid0 = &#x27;t&#x27; + cid.substr(1) + &#x27;.&#x27; + (i+1);</span></span><br><span class="line"><span class="string">        tid = &#x27;f&#x27; + tid0;</span></span><br><span class="line"><span class="string">        tr = document.getElementById(tid);</span></span><br><span class="line"><span class="string">        if (!tr) &#123;</span></span><br><span class="line"><span class="string">            tid = &#x27;p&#x27; + tid0;</span></span><br><span class="line"><span class="string">            tr = document.getElementById(tid);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        id_list[i] = tid;</span></span><br><span class="line"><span class="string">        if (tr.className) &#123;</span></span><br><span class="line"><span class="string">            toHide = 0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    for (var i = 0; i &lt; count; i++) &#123;</span></span><br><span class="line"><span class="string">        tid = id_list[i];</span></span><br><span class="line"><span class="string">        if (toHide) &#123;</span></span><br><span class="line"><span class="string">            document.getElementById(&#x27;div_&#x27;+tid).style.display = &#x27;none&#x27;</span></span><br><span class="line"><span class="string">            document.getElementById(tid).className = &#x27;hiddenRow&#x27;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        else &#123;</span></span><br><span class="line"><span class="string">            document.getElementById(tid).className = &#x27;&#x27;;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function showTestDetail(div_id)&#123;</span></span><br><span class="line"><span class="string">    var details_div = document.getElementById(div_id)</span></span><br><span class="line"><span class="string">    var displayState = details_div.style.display</span></span><br><span class="line"><span class="string">    // alert(displayState)</span></span><br><span class="line"><span class="string">    if (displayState != &#x27;block&#x27; ) &#123;</span></span><br><span class="line"><span class="string">        displayState = &#x27;block&#x27;</span></span><br><span class="line"><span class="string">        details_div.style.display = &#x27;block&#x27;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    else &#123;</span></span><br><span class="line"><span class="string">        details_div.style.display = &#x27;none&#x27;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function html_escape(s) &#123;</span></span><br><span class="line"><span class="string">    s = s.replace(/&amp;/g,&#x27;&amp;amp;&#x27;);</span></span><br><span class="line"><span class="string">    s = s.replace(/&lt;/g,&#x27;&amp;lt;&#x27;);</span></span><br><span class="line"><span class="string">    s = s.replace(/&gt;/g,&#x27;&amp;gt;&#x27;);</span></span><br><span class="line"><span class="string">    return s;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* obsoleted by detail in &lt;div&gt;</span></span><br><span class="line"><span class="string">function showOutput(id, name) &#123;</span></span><br><span class="line"><span class="string">    var w = window.open(&quot;&quot;, //url</span></span><br><span class="line"><span class="string">                    name,</span></span><br><span class="line"><span class="string">                    &quot;resizable,scrollbars,status,width=800,height=450&quot;);</span></span><br><span class="line"><span class="string">    d = w.document;</span></span><br><span class="line"><span class="string">    d.write(&quot;&lt;pre&gt;&quot;);</span></span><br><span class="line"><span class="string">    d.write(html_escape(output_list[id]));</span></span><br><span class="line"><span class="string">    d.write(&quot;\n&quot;);</span></span><br><span class="line"><span class="string">    d.write(&quot;&lt;a href=&#x27;javascript:window.close()&#x27;&gt;close&lt;/a&gt;\n&quot;);</span></span><br><span class="line"><span class="string">    d.write(&quot;&lt;/pre&gt;\n&quot;);</span></span><br><span class="line"><span class="string">    d.close();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">--&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">%(heading)s</span></span><br><span class="line"><span class="string">%(report)s</span></span><br><span class="line"><span class="string">%(ending)s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># variables: (title, generator, stylesheet, heading, report, ending)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Stylesheet</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># alternatively use a &lt;link&gt; for external style sheet, e.g.</span></span><br><span class="line">    <span class="comment">#   &lt;link rel=&quot;stylesheet&quot; href=&quot;$url&quot; type=&quot;text/css&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">    STYLESHEET_TMPL = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;</span></span><br><span class="line"><span class="string">body        &#123; font-family: verdana, arial, helvetica, sans-serif; font-size: 80%; &#125;</span></span><br><span class="line"><span class="string">table       &#123; font-size: 100%; &#125;</span></span><br><span class="line"><span class="string">pre         &#123; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* -- heading ---------------------------------------------------------------------- */</span></span><br><span class="line"><span class="string">h1 &#123;</span></span><br><span class="line"><span class="string">	font-size: 16pt;</span></span><br><span class="line"><span class="string">	color: gray;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.heading &#123;</span></span><br><span class="line"><span class="string">    margin-top: 0ex;</span></span><br><span class="line"><span class="string">    margin-bottom: 1ex;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.heading .attribute &#123;</span></span><br><span class="line"><span class="string">    margin-top: 1ex;</span></span><br><span class="line"><span class="string">    margin-bottom: 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.heading .description &#123;</span></span><br><span class="line"><span class="string">    margin-top: 4ex;</span></span><br><span class="line"><span class="string">    margin-bottom: 6ex;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* -- css div popup ------------------------------------------------------------------------ */</span></span><br><span class="line"><span class="string">a.popup_link &#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a.popup_link:hover &#123;</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.popup_window &#123;</span></span><br><span class="line"><span class="string">    display: none;</span></span><br><span class="line"><span class="string">    position: relative;</span></span><br><span class="line"><span class="string">    left: 0px;</span></span><br><span class="line"><span class="string">    top: 0px;</span></span><br><span class="line"><span class="string">    /*border: solid #627173 1px; */</span></span><br><span class="line"><span class="string">    padding: 10px;</span></span><br><span class="line"><span class="string">    background-color: #E6E6D6;</span></span><br><span class="line"><span class="string">    font-family: &quot;Lucida Console&quot;, &quot;Courier New&quot;, Courier, monospace;</span></span><br><span class="line"><span class="string">    text-align: left;</span></span><br><span class="line"><span class="string">    font-size: 8pt;</span></span><br><span class="line"><span class="string">    width: 500px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">/* -- report ------------------------------------------------------------------------ */</span></span><br><span class="line"><span class="string">#show_detail_line &#123;</span></span><br><span class="line"><span class="string">    margin-top: 3ex;</span></span><br><span class="line"><span class="string">    margin-bottom: 1ex;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#result_table &#123;</span></span><br><span class="line"><span class="string">    width: 80%;</span></span><br><span class="line"><span class="string">    border-collapse: collapse;</span></span><br><span class="line"><span class="string">    border: 1px solid #777;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#header_row &#123;</span></span><br><span class="line"><span class="string">    font-weight: bold;</span></span><br><span class="line"><span class="string">    color: white;</span></span><br><span class="line"><span class="string">    background-color: #777;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#result_table td &#123;</span></span><br><span class="line"><span class="string">    border: 1px solid #777;</span></span><br><span class="line"><span class="string">    padding: 2px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#total_row  &#123; font-weight: bold; &#125;</span></span><br><span class="line"><span class="string">.passClass  &#123; background-color: #6c6; &#125;</span></span><br><span class="line"><span class="string">.failClass  &#123; background-color: #c60; &#125;</span></span><br><span class="line"><span class="string">.errorClass &#123; background-color: #c00; &#125;</span></span><br><span class="line"><span class="string">.passCase   &#123; color: #6c6; &#125;</span></span><br><span class="line"><span class="string">.failCase   &#123; color: #c60; font-weight: bold; &#125;</span></span><br><span class="line"><span class="string">.errorCase  &#123; color: #c00; font-weight: bold; &#125;</span></span><br><span class="line"><span class="string">.hiddenRow  &#123; display: none; &#125;</span></span><br><span class="line"><span class="string">.testcase   &#123; margin-left: 2em; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* -- ending ---------------------------------------------------------------------- */</span></span><br><span class="line"><span class="string">#ending &#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Heading</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    HEADING_TMPL = <span class="string">&quot;&quot;&quot;&lt;div class=&#x27;heading&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;%(title)s&lt;/h1&gt;</span></span><br><span class="line"><span class="string">%(parameters)s</span></span><br><span class="line"><span class="string">&lt;p class=&#x27;description&#x27;&gt;%(description)s&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment"># variables: (title, parameters, description)</span></span><br><span class="line"></span><br><span class="line">    HEADING_ATTRIBUTE_TMPL = <span class="string">&quot;&quot;&quot;&lt;p class=&#x27;attribute&#x27;&gt;&lt;strong&gt;%(name)s:&lt;/strong&gt; %(value)s&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment"># variables: (name, value)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Report</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    REPORT_TMPL = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;p id=&#x27;show_detail_line&#x27;&gt;Show</span></span><br><span class="line"><span class="string">&lt;a href=&#x27;javascript:showCase(0)&#x27;&gt;Summary&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&#x27;javascript:showCase(1)&#x27;&gt;Failed&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&#x27;javascript:showCase(2)&#x27;&gt;All&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;table id=&#x27;result_table&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;colgroup&gt;</span></span><br><span class="line"><span class="string">&lt;col align=&#x27;left&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;col align=&#x27;right&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;col align=&#x27;right&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;col align=&#x27;right&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;col align=&#x27;right&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;col align=&#x27;right&#x27; /&gt;</span></span><br><span class="line"><span class="string">&lt;/colgroup&gt;</span></span><br><span class="line"><span class="string">&lt;tr id=&#x27;header_row&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;Test Group/Test case&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;Count&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;Pass&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;Fail&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;Error&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;View&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">%(test_list)s</span></span><br><span class="line"><span class="string">&lt;tr id=&#x27;total_row&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;Total&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(count)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(Pass)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(fail)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(error)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment"># variables: (test_list, count, Pass, fail, error)</span></span><br><span class="line"></span><br><span class="line">    REPORT_CLASS_TMPL = <span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;tr class=&#x27;%(style)s&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(desc)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(count)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(Pass)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(fail)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;%(error)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;&lt;a href=&quot;javascript:showClassDetail(&#x27;%(cid)s&#x27;,%(count)s)&quot;&gt;Detail&lt;/a&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment"># variables: (style, desc, count, Pass, fail, error, cid)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    REPORT_TEST_WITH_OUTPUT_TMPL = <span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;tr id=&#x27;%(tid)s&#x27; class=&#x27;%(Class)s&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;td class=&#x27;%(style)s&#x27;&gt;&lt;div class=&#x27;testcase&#x27;&gt;%(desc)s&lt;/div&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td colspan=&#x27;5&#x27; align=&#x27;center&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!--css div popup start--&gt;</span></span><br><span class="line"><span class="string">    &lt;a class=&quot;popup_link&quot; onfocus=&#x27;this.blur();&#x27; href=&quot;javascript:showTestDetail(&#x27;div_%(tid)s&#x27;)&quot; &gt;</span></span><br><span class="line"><span class="string">        %(status)s&lt;/a&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;div id=&#x27;div_%(tid)s&#x27; class=&quot;popup_window&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div style=&#x27;text-align: right; color:red;cursor:pointer&#x27;&gt;</span></span><br><span class="line"><span class="string">        &lt;a onfocus=&#x27;this.blur();&#x27; onclick=&quot;document.getElementById(&#x27;div_%(tid)s&#x27;).style.display = &#x27;none&#x27; &quot; &gt;</span></span><br><span class="line"><span class="string">           [x]&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;pre&gt;</span></span><br><span class="line"><span class="string">        %(script)s</span></span><br><span class="line"><span class="string">        &lt;/pre&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;!--css div popup end--&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment"># variables: (tid, Class, style, desc, status)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    REPORT_TEST_NO_OUTPUT_TMPL = <span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;tr id=&#x27;%(tid)s&#x27; class=&#x27;%(Class)s&#x27;&gt;</span></span><br><span class="line"><span class="string">    &lt;td class=&#x27;%(style)s&#x27;&gt;&lt;div class=&#x27;testcase&#x27;&gt;%(desc)s&lt;/div&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td colspan=&#x27;5&#x27; align=&#x27;center&#x27;&gt;%(status)s&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment"># variables: (tid, Class, style, desc, status)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    REPORT_TEST_OUTPUT_TMPL = <span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">%(id)s: %(output)s</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> <span class="comment"># variables: (id, output)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># ENDING</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    ENDING_TMPL = <span class="string">&quot;&quot;&quot;&lt;div id=&#x27;ending&#x27;&gt;&amp;nbsp;&lt;/div&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------- The end of the Template class -------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TestResult = unittest.TestResult</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestResult</span>(<span class="params">TestResult</span>):</span></span><br><span class="line">    <span class="comment"># note: _TestResult is a pure representation of results.</span></span><br><span class="line">    <span class="comment"># It lacks the output and reporting ability compares to unittest._TextTestResult.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, verbosity=<span class="number">1</span></span>):</span></span><br><span class="line">        TestResult.__init__(self)</span><br><span class="line">        self.stdout0 = <span class="literal">None</span></span><br><span class="line">        self.stderr0 = <span class="literal">None</span></span><br><span class="line">        self.success_count = <span class="number">0</span></span><br><span class="line">        self.failure_count = <span class="number">0</span></span><br><span class="line">        self.error_count = <span class="number">0</span></span><br><span class="line">        self.verbosity = verbosity</span><br><span class="line"></span><br><span class="line">        <span class="comment"># result is a list of result in 4 tuple</span></span><br><span class="line">        <span class="comment"># (</span></span><br><span class="line">        <span class="comment">#   result code (0: success; 1: fail; 2: error),</span></span><br><span class="line">        <span class="comment">#   TestCase object,</span></span><br><span class="line">        <span class="comment">#   Test output (byte string),</span></span><br><span class="line">        <span class="comment">#   stack trace,</span></span><br><span class="line">        <span class="comment"># )</span></span><br><span class="line">        self.result = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startTest</span>(<span class="params">self, test</span>):</span></span><br><span class="line">        TestResult.startTest(self, test)</span><br><span class="line">        <span class="comment"># just one buffer for both stdout and stderr</span></span><br><span class="line">        self.outputBuffer = io.StringIO()</span><br><span class="line">        stdout_redirector.fp = self.outputBuffer</span><br><span class="line">        stderr_redirector.fp = self.outputBuffer</span><br><span class="line">        self.stdout0 = sys.stdout</span><br><span class="line">        self.stderr0 = sys.stderr</span><br><span class="line">        sys.stdout = stdout_redirector</span><br><span class="line">        sys.stderr = stderr_redirector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">complete_output</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Disconnect output redirection and return buffer.</span></span><br><span class="line"><span class="string">        Safe to call multiple times.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.stdout0:</span><br><span class="line">            sys.stdout = self.stdout0</span><br><span class="line">            sys.stderr = self.stderr0</span><br><span class="line">            self.stdout0 = <span class="literal">None</span></span><br><span class="line">            self.stderr0 = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.outputBuffer.getvalue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopTest</span>(<span class="params">self, test</span>):</span></span><br><span class="line">        <span class="comment"># Usually one of addSuccess, addError or addFailure would have been called.</span></span><br><span class="line">        <span class="comment"># But there are some path in unittest that would bypass this.</span></span><br><span class="line">        <span class="comment"># We must disconnect stdout in stopTest(), which is guaranteed to be called.</span></span><br><span class="line">        self.complete_output()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addSuccess</span>(<span class="params">self, test</span>):</span></span><br><span class="line">        self.success_count += <span class="number">1</span></span><br><span class="line">        TestResult.addSuccess(self, test)</span><br><span class="line">        output = self.complete_output()</span><br><span class="line">        self.result.append((<span class="number">0</span>, test, output, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> self.verbosity &gt; <span class="number">1</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;ok &#x27;</span>)</span><br><span class="line">            sys.stderr.write(<span class="built_in">str</span>(test))</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addError</span>(<span class="params">self, test, err</span>):</span></span><br><span class="line">        self.error_count += <span class="number">1</span></span><br><span class="line">        TestResult.addError(self, test, err)</span><br><span class="line">        _, _exc_str = self.errors[-<span class="number">1</span>]</span><br><span class="line">        output = self.complete_output()</span><br><span class="line">        self.result.append((<span class="number">2</span>, test, output, _exc_str))</span><br><span class="line">        <span class="keyword">if</span> self.verbosity &gt; <span class="number">1</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;E  &#x27;</span>)</span><br><span class="line">            sys.stderr.write(<span class="built_in">str</span>(test))</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addFailure</span>(<span class="params">self, test, err</span>):</span></span><br><span class="line">        self.failure_count += <span class="number">1</span></span><br><span class="line">        TestResult.addFailure(self, test, err)</span><br><span class="line">        _, _exc_str = self.failures[-<span class="number">1</span>]</span><br><span class="line">        output = self.complete_output()</span><br><span class="line">        self.result.append((<span class="number">1</span>, test, output, _exc_str))</span><br><span class="line">        <span class="keyword">if</span> self.verbosity &gt; <span class="number">1</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;F  &#x27;</span>)</span><br><span class="line">            sys.stderr.write(<span class="built_in">str</span>(test))</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLTestRunner</span>(<span class="params">Template_mixin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, stream=sys.stdout, verbosity=<span class="number">1</span>, title=<span class="literal">None</span>, description=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.stream = stream</span><br><span class="line">        self.verbosity = verbosity</span><br><span class="line">        <span class="keyword">if</span> title <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.title = self.DEFAULT_TITLE</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.title = title</span><br><span class="line">        <span class="keyword">if</span> description <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.description = self.DEFAULT_DESCRIPTION</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.description = description</span><br><span class="line"></span><br><span class="line">        self.startTime = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, test</span>):</span></span><br><span class="line">        <span class="string">&quot;Run the given test case or test suite.&quot;</span></span><br><span class="line">        result = _TestResult(self.verbosity)</span><br><span class="line">        test(result)</span><br><span class="line">        self.stopTime = datetime.datetime.now()</span><br><span class="line">        self.generateReport(test, result)</span><br><span class="line">        <span class="comment"># print &gt;&gt; sys.stderr, &#x27;\nTime Elapsed: %s&#x27; % (self.stopTime-self.startTime)</span></span><br><span class="line">        <span class="built_in">print</span>(sys.stderr, <span class="string">&#x27;\nTime Elapsed: %s&#x27;</span> % (self.stopTime-self.startTime))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortResult</span>(<span class="params">self, result_list</span>):</span></span><br><span class="line">        <span class="comment"># unittest does not seems to run in any particular order.</span></span><br><span class="line">        <span class="comment"># Here at least we want to group them together by class.</span></span><br><span class="line">        rmap = &#123;&#125;</span><br><span class="line">        classes = []</span><br><span class="line">        <span class="keyword">for</span> n,t,o,e <span class="keyword">in</span> result_list:</span><br><span class="line">            cls = t.__class__</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cls <span class="keyword">in</span> rmap:</span><br><span class="line">                rmap[cls] = []</span><br><span class="line">                classes.append(cls)</span><br><span class="line">            rmap[cls].append((n,t,o,e))</span><br><span class="line">        r = [(cls, rmap[cls]) <span class="keyword">for</span> cls <span class="keyword">in</span> classes]</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getReportAttributes</span>(<span class="params">self, result</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return report attributes as a list of (name, value).</span></span><br><span class="line"><span class="string">        Override this to add custom attributes.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        startTime = <span class="built_in">str</span>(self.startTime)[:<span class="number">19</span>]</span><br><span class="line">        duration = <span class="built_in">str</span>(self.stopTime - self.startTime)</span><br><span class="line">        status = []</span><br><span class="line">        <span class="keyword">if</span> result.success_count: status.append(<span class="string">&#x27;Pass %s&#x27;</span>    % result.success_count)</span><br><span class="line">        <span class="keyword">if</span> result.failure_count: status.append(<span class="string">&#x27;Failure %s&#x27;</span> % result.failure_count)</span><br><span class="line">        <span class="keyword">if</span> result.error_count:   status.append(<span class="string">&#x27;Error %s&#x27;</span>   % result.error_count  )</span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            status = <span class="string">&#x27; &#x27;</span>.join(status)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            status = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            (<span class="string">&#x27;Start Time&#x27;</span>, startTime),</span><br><span class="line">            (<span class="string">&#x27;Duration&#x27;</span>, duration),</span><br><span class="line">            (<span class="string">&#x27;Status&#x27;</span>, status),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateReport</span>(<span class="params">self, test, result</span>):</span></span><br><span class="line">        report_attrs = self.getReportAttributes(result)</span><br><span class="line">        generator = <span class="string">&#x27;HTMLTestRunner %s&#x27;</span> % __version__</span><br><span class="line">        stylesheet = self._generate_stylesheet()</span><br><span class="line">        heading = self._generate_heading(report_attrs)</span><br><span class="line">        report = self._generate_report(result)</span><br><span class="line">        ending = self._generate_ending()</span><br><span class="line">        output = self.HTML_TMPL % <span class="built_in">dict</span>(</span><br><span class="line">            title = saxutils.escape(self.title),</span><br><span class="line">            generator = generator,</span><br><span class="line">            stylesheet = stylesheet,</span><br><span class="line">            heading = heading,</span><br><span class="line">            report = report,</span><br><span class="line">            ending = ending,</span><br><span class="line">        )</span><br><span class="line">        self.stream.write(output.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_stylesheet</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.STYLESHEET_TMPL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_heading</span>(<span class="params">self, report_attrs</span>):</span></span><br><span class="line">        a_lines = []</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> report_attrs:</span><br><span class="line">            line = self.HEADING_ATTRIBUTE_TMPL % <span class="built_in">dict</span>(</span><br><span class="line">                    name = saxutils.escape(name),</span><br><span class="line">                    value = saxutils.escape(value),</span><br><span class="line">                )</span><br><span class="line">            a_lines.append(line)</span><br><span class="line">        heading = self.HEADING_TMPL % <span class="built_in">dict</span>(</span><br><span class="line">            title = saxutils.escape(self.title),</span><br><span class="line">            parameters = <span class="string">&#x27;&#x27;</span>.join(a_lines),</span><br><span class="line">            description = saxutils.escape(self.description),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> heading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_report</span>(<span class="params">self, result</span>):</span></span><br><span class="line">        rows = []</span><br><span class="line">        sortedResult = self.sortResult(result.result)</span><br><span class="line">        <span class="keyword">for</span> cid, (cls, cls_results) <span class="keyword">in</span> <span class="built_in">enumerate</span>(sortedResult):</span><br><span class="line">            <span class="comment"># subtotal for a class</span></span><br><span class="line">            np = nf = ne = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> n,t,o,e <span class="keyword">in</span> cls_results:</span><br><span class="line">                <span class="keyword">if</span> n == <span class="number">0</span>: np += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> n == <span class="number">1</span>: nf += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: ne += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># format class description</span></span><br><span class="line">            <span class="keyword">if</span> cls.__module__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">                name = cls.__name__</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                name = <span class="string">&quot;%s.%s&quot;</span> % (cls.__module__, cls.__name__)</span><br><span class="line">            doc = cls.__doc__ <span class="keyword">and</span> cls.__doc__.split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>] <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            desc = doc <span class="keyword">and</span> <span class="string">&#x27;%s: %s&#x27;</span> % (name, doc) <span class="keyword">or</span> name</span><br><span class="line"></span><br><span class="line">            row = self.REPORT_CLASS_TMPL % <span class="built_in">dict</span>(</span><br><span class="line">                style = ne &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="string">&#x27;errorClass&#x27;</span> <span class="keyword">or</span> nf &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="string">&#x27;failClass&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;passClass&#x27;</span>,</span><br><span class="line">                desc = desc,</span><br><span class="line">                count = np+nf+ne,</span><br><span class="line">                Pass = np,</span><br><span class="line">                fail = nf,</span><br><span class="line">                error = ne,</span><br><span class="line">                cid = <span class="string">&#x27;c%s&#x27;</span> % (cid+<span class="number">1</span>),</span><br><span class="line">            )</span><br><span class="line">            rows.append(row)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> tid, (n,t,o,e) <span class="keyword">in</span> <span class="built_in">enumerate</span>(cls_results):</span><br><span class="line">                self._generate_report_test(rows, cid, tid, n, t, o, e)</span><br><span class="line"></span><br><span class="line">        report = self.REPORT_TMPL % <span class="built_in">dict</span>(</span><br><span class="line">            test_list = <span class="string">&#x27;&#x27;</span>.join(rows),</span><br><span class="line">            count = <span class="built_in">str</span>(result.success_count+result.failure_count+result.error_count),</span><br><span class="line">            Pass = <span class="built_in">str</span>(result.success_count),</span><br><span class="line">            fail = <span class="built_in">str</span>(result.failure_count),</span><br><span class="line">            error = <span class="built_in">str</span>(result.error_count),</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> report</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_report_test</span>(<span class="params">self, rows, cid, tid, n, t, o, e</span>):</span></span><br><span class="line">        <span class="comment"># e.g. &#x27;pt1.1&#x27;, &#x27;ft1.1&#x27;, etc</span></span><br><span class="line">        has_output = <span class="built_in">bool</span>(o <span class="keyword">or</span> e)</span><br><span class="line">        tid = (n == <span class="number">0</span> <span class="keyword">and</span> <span class="string">&#x27;p&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;f&#x27;</span>) + <span class="string">&#x27;t%s.%s&#x27;</span> % (cid+<span class="number">1</span>,tid+<span class="number">1</span>)</span><br><span class="line">        name = t.<span class="built_in">id</span>().split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        doc = t.shortDescription() <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        desc = doc <span class="keyword">and</span> (<span class="string">&#x27;%s: %s&#x27;</span> % (name, doc)) <span class="keyword">or</span> name</span><br><span class="line">        tmpl = has_output <span class="keyword">and</span> self.REPORT_TEST_WITH_OUTPUT_TMPL <span class="keyword">or</span> self.REPORT_TEST_NO_OUTPUT_TMPL</span><br><span class="line"></span><br><span class="line">        <span class="comment"># o and e should be byte string because they are collected from stdout and stderr?</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o,<span class="built_in">str</span>):</span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> some problem with &#x27;string_escape&#x27;: it escape \n and mess up formating</span></span><br><span class="line">            <span class="comment"># uo = unicode(o.encode(&#x27;string_escape&#x27;))</span></span><br><span class="line">            <span class="comment"># uo = o.decode(&#x27;latin-1&#x27;)</span></span><br><span class="line">            uo = e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            uo = o</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(e,<span class="built_in">str</span>):</span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> some problem with &#x27;string_escape&#x27;: it escape \n and mess up formating</span></span><br><span class="line">            <span class="comment"># ue = unicode(e.encode(&#x27;string_escape&#x27;))</span></span><br><span class="line">            <span class="comment"># ue = e.decode(&#x27;latin-1&#x27;)</span></span><br><span class="line">            ue = e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ue = e</span><br><span class="line"></span><br><span class="line">        script = self.REPORT_TEST_OUTPUT_TMPL % <span class="built_in">dict</span>(</span><br><span class="line">            <span class="built_in">id</span> = tid,</span><br><span class="line">            output = saxutils.escape(<span class="built_in">str</span>(uo)+ue),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        row = tmpl % <span class="built_in">dict</span>(</span><br><span class="line">            tid = tid,</span><br><span class="line">            Class = (n == <span class="number">0</span> <span class="keyword">and</span> <span class="string">&#x27;hiddenRow&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;none&#x27;</span>),</span><br><span class="line">            style = n == <span class="number">2</span> <span class="keyword">and</span> <span class="string">&#x27;errorCase&#x27;</span> <span class="keyword">or</span> (n == <span class="number">1</span> <span class="keyword">and</span> <span class="string">&#x27;failCase&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;none&#x27;</span>),</span><br><span class="line">            desc = desc,</span><br><span class="line">            script = script,</span><br><span class="line">            status = self.STATUS[n],</span><br><span class="line">        )</span><br><span class="line">        rows.append(row)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> has_output:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate_ending</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.ENDING_TMPL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># Facilities for running tests from the command line</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: Reuse unittest.TestProgram to launch test. In the future we may</span></span><br><span class="line"><span class="comment"># build our own launcher to support more specific command line</span></span><br><span class="line"><span class="comment"># parameters like test title, CSS, etc.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestProgram</span>(<span class="params">unittest.TestProgram</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A variation of the unittest.TestProgram. Please refer to the base</span></span><br><span class="line"><span class="string">    class for command line parameters.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runTests</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># Pick HTMLTestRunner as the default test runner.</span></span><br><span class="line">        <span class="comment"># base class&#x27;s testRunner parameter is not useful because it means</span></span><br><span class="line">        <span class="comment"># we have to instantiate HTMLTestRunner before we know self.verbosity.</span></span><br><span class="line">        <span class="keyword">if</span> self.testRunner <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.testRunner = HTMLTestRunner(verbosity=self.verbosity)</span><br><span class="line">        unittest.TestProgram.runTests(self)</span><br><span class="line"></span><br><span class="line">main = TestProgram</span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># Executing this module from the command line</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(module=<span class="literal">None</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>集合全量测试用例，alltest.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding=utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Le.shen&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time,os,unittest,sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;./common&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;./basepage&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;./page&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner  <span class="comment">#导入生成邮件测试模版</span></span><br><span class="line"><span class="keyword">from</span> homePage <span class="keyword">import</span> *     <span class="comment">#导入基础类</span></span><br><span class="line"><span class="keyword">from</span> loginpage <span class="keyword">import</span> *    <span class="comment">#导入页面类</span></span><br><span class="line"><span class="keyword">import</span> smtplib  <span class="comment">#邮箱服务器</span></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText  <span class="comment">#邮件模版类</span></span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart <span class="comment">#邮件附件类</span></span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header  <span class="comment">#邮件头部模版</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#发送带邮件的函数 动作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span>(<span class="params">file_new</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_new,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    mail_body = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#基本信息</span></span><br><span class="line">    smtpserver = <span class="string">&#x27;smtp.126.com&#x27;</span></span><br><span class="line">    <span class="comment">## pwd = &quot;MDTFMYZKLYOCDGFR&quot; #126邮箱授权码</span></span><br><span class="line">    pwd = <span class="string">&quot;JFOVESRKWSRPEGIU&quot;</span>  <span class="comment"># 126邮箱授权码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义邮件主题</span></span><br><span class="line">    msg=MIMEMultipart()</span><br><span class="line">    msg[<span class="string">&#x27;subject&#x27;</span>] = Header(<span class="string">u&#x27;Page Object自动化测试报告&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;from&#x27;</span>] = <span class="string">&quot;emptymiss@126.com&quot;</span>    <span class="comment">#必须加 不加报错  发送者的邮箱</span></span><br><span class="line">    msg[<span class="string">&#x27;to&#x27;</span>] =  <span class="string">&quot;305030951@qq.com&quot;</span>     <span class="comment">#必须加 不加报错  接收者的邮箱</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#不加msg[&#x27;to&#x27;] msg[&#x27;from&#x27;]报错原因，是因为“发件人和收件人参数没有进行定义</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#HTML邮件正文 直接发送附件的代码片段</span></span><br><span class="line">    body=MIMEText(mail_body,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    msg.attach(body)</span><br><span class="line">    att = MIMEText(mail_body,<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    att[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">    att[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&#x27;attachment; filename=&quot;test_report.html&quot;&#x27;</span></span><br><span class="line">    msg.attach(att)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#链接邮箱服务器发送邮件</span></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line">    smtp.connect(smtpserver)</span><br><span class="line">    smtp.login(msg[<span class="string">&#x27;from&#x27;</span>],pwd)</span><br><span class="line">    smtp.sendmail(msg[<span class="string">&#x27;from&#x27;</span>],msg[<span class="string">&#x27;to&#x27;</span>],msg.as_string())</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找最新邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_file</span>(<span class="params">test_dir</span>):</span></span><br><span class="line">    result_dir = test_dir</span><br><span class="line">    lists = os.listdir(result_dir)  <span class="comment">#print(lists)  #列出测试报告目录下面所有的文件</span></span><br><span class="line">    lists.sort()   <span class="comment">#从小到大排序 文件</span></span><br><span class="line">    file = [x <span class="keyword">for</span> x <span class="keyword">in</span> lists <span class="keyword">if</span> x.endswith(<span class="string">&#x27;.html&#x27;</span>)]  <span class="comment">#for循环遍历以.html格式的测试报告</span></span><br><span class="line">    file_path = os.path.join(result_dir,file[-<span class="number">1</span>])     <span class="comment">#找到测试报告目录下面最新的测试报告</span></span><br><span class="line">    <span class="keyword">return</span> file_path  <span class="comment">#返回最新的测试报告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    base_dir = os.path.dirname(os.path.realpath(__file__))  <span class="comment">#获取文件所在路径</span></span><br><span class="line">    test_dir = os.path.join(base_dir,<span class="string">&#x27;TestCases&#x27;</span>)  <span class="comment">#测试用例所在目录</span></span><br><span class="line">    test_report = os.path.join(base_dir,<span class="string">&#x27;report&#x27;</span>)  <span class="comment">#测试报告所在目录</span></span><br><span class="line">    testlist = unittest.defaultTestLoader.discover(test_dir,pattern = <span class="string">&#x27;test*.py&#x27;</span>)</span><br><span class="line">    now = time.strftime(<span class="string">&quot;%Y-%m-%d %H_%M_%S&quot;</span>)</span><br><span class="line">    filename = test_report + <span class="string">&quot;/&quot;</span> + now + <span class="string">&#x27;result.html&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    runner = HTMLTestRunner(stream = fp,</span><br><span class="line">                            title = <span class="string">u&#x27;PageObject自动化测试报告&#x27;</span>,</span><br><span class="line">                            description = <span class="string">u&#x27;系统环境:mac m1 浏览器:Chrome 用例执行情况:&#x27;</span>)</span><br><span class="line">    runner.run(testlist)</span><br><span class="line">    fp.close()</span><br><span class="line"></span><br><span class="line">    new_report = new_file(test_report)   <span class="comment">#获取最新报告文件</span></span><br><span class="line">    send_mail(new_report)                <span class="comment">#发送最新的测试报告</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现的逻辑</span></span><br><span class="line"><span class="comment">#1.先生成测试报告</span></span><br><span class="line"><span class="comment">#2.查找最新的测试报告 通过new_file函数 找到最新的测试报告 作为一个结果返回 file_path</span></span><br><span class="line"><span class="comment">#3.把new_file函数 找到最新的测试报告 file_path (最新的测试报告) 以邮件附件的形式加载到邮件模版中 设置参数  连接邮箱服务器发送最新的测试报告</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>生成html的测试报告：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding=utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;Le.shen&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys,os,time,unittest</span><br><span class="line">sys.path.append(<span class="string">&#x27;./common&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;./basepage&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;./page&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllCases</span>():</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;获取tesTcase下面的所有测试模块&#x27;&#x27;&#x27;</span></span><br><span class="line">	Testsuite = unittest.defaultTestLoader.discover(</span><br><span class="line">		start_dir=os.path.join(os.path.dirname(__file__),<span class="string">&#x27;TestCases&#x27;</span>),</span><br><span class="line">		pattern=<span class="string">&#x27;test*.py&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> Testsuite</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RunMain</span>():</span></span><br><span class="line">	<span class="string">&#x27;&#x27;&#x27;生成测试报告写入指定Reports目录&#x27;&#x27;&#x27;</span></span><br><span class="line">	fp=<span class="built_in">open</span>(os.path.join(os.path.dirname(__file__),<span class="string">&#x27;report&#x27;</span>,time.strftime(<span class="string">&quot;%Y_%m_%d_%H_%M_%S&quot;</span>)+ <span class="string">&#x27;report.html&#x27;</span>),<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">	HTMLTestRunner(stream=fp,title=<span class="string">&#x27;Python+Selenium自动化测试实战&#x27;</span>,</span><br><span class="line">				   description=<span class="string">&#x27;基于python语言PO自动化测试&#x27;</span>).run(getAllCases())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   RunMain()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># import  unittest,os,time</span></span><br><span class="line"><span class="comment"># from PO.common.HTMLTestRunner import HTMLTestRunner</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def  allTest():</span></span><br><span class="line"><span class="comment"># 	&#x27;&#x27;&#x27;获取testCases下面的所有测试用例&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 	case = os.path.join(os.path.dirname(__file__),&#x27;TestCases&#x27;)</span></span><br><span class="line"><span class="comment"># 	suite = unittest.defaultTestLoader.discover(case,pattern=&#x27;test*.py&#x27;)</span></span><br><span class="line"><span class="comment"># 	return suite</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def getTime():</span></span><br><span class="line"><span class="comment"># 	&#x27;&#x27;&#x27;获取当前系统时间&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 	return time.strftime(&quot;%Y_%m_%d_%H_%M_%S&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def run():</span></span><br><span class="line"><span class="comment"># 	&#x27;&#x27;&#x27;主函数入口&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 	report = os.path.join(os.path.dirname(__file__),&#x27;report&#x27;,getTime())  +  &#x27;_report.html&#x27;</span></span><br><span class="line"><span class="comment"># 	HTMLTestRunner(stream=open(report,&#x27;wb&#x27;),title=&#x27;po自动化测试设计模式&#x27;,description=&#x27;window10 chrome67&#x27;).run(allTest())</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     run()</span></span><br></pre></td></tr></table></figure>

<p>基本骨架如下：</p>
<p>test_po_jenkins:</p>
<p>目录：<br>basepage(homePage.py etc)<br>common(getImage.py,helper.py,HTMLTestRunner.py,ownUnit.py)<br>data(info.xlsx etc)<br>Image(截图保存)<br>page（loginpage.py）<br>report<br>testCases(test_Login.py etc)<br>主函数，py脚本：<br>allTests.py<br>runALLCases.py</p>
<ul>
<li>多线程的调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##2.16.3  多线程调用浏览器运行实战</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> threading    <span class="comment">#导入多线程模块</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options  </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">test_baidu_search</span>(<span class="params">browser,url</span>):</span></span><br><span class="line">    <span class="keyword">if</span>   browser == <span class="string">&quot;FireFox&quot;</span>:</span><br><span class="line">        <span class="comment"># 创建的新实例驱动</span></span><br><span class="line">        options = webdriver.FirefoxOptions()</span><br><span class="line">        <span class="comment"># 火狐无头模式</span></span><br><span class="line">        options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">        options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">        executable_path = <span class="string">r&#x27;C:\Python36\geckodriver.exe&#x27;</span></span><br><span class="line">        driver = webdriver.Firefox(firefox_options=options, executable_path=executable_path)</span><br><span class="line">        <span class="comment"># driver = webdriver.Firefox()</span></span><br><span class="line">    <span class="keyword">elif</span> browser == <span class="string">&quot;Chrome&quot;</span>:</span><br><span class="line">        <span class="comment"># 创建的新实例驱动</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        <span class="comment"># 谷歌无头模式</span></span><br><span class="line">        chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">        chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">        driver = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">        <span class="comment"># driver = webdriver.Chrome()</span></span><br><span class="line">    <span class="keyword">elif</span> browser == <span class="string">&#x27;Ie&#x27;</span>:</span><br><span class="line">        driver = webdriver.Ie()</span><br><span class="line">    <span class="comment">#搜索脚本</span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">u&quot;多线程启动不同浏览器&quot;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = &#123;<span class="string">&quot;FireFox&quot;</span>: <span class="string">&quot;http://www.baidu.com&quot;</span>,<span class="string">&quot;Chrome&quot;</span>: <span class="string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Ie&quot;</span>:<span class="string">&quot;http://www.baidu.com&quot;</span>&#125;</span><br><span class="line">    <span class="comment">#构建线程</span></span><br><span class="line">    threads = [ ]</span><br><span class="line">    <span class="keyword">for</span> browser, url <span class="keyword">in</span> data.items():</span><br><span class="line">        t = threading.Thread(target=test_baidu_search, args=(browser, url))</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="comment">#启动所有线程</span></span><br><span class="line">    <span class="keyword">for</span> thr <span class="keyword">in</span> threads:</span><br><span class="line">        thr.start()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试开发</tag>
      </tags>
  </entry>
  <entry>
    <title>nexo-Next中添加网易云音乐+切换页面自动播放</title>
    <url>/2021/11/29/nexo-Next%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90-%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%8A%A8%E6%92%AD%E6%94%BE/</url>
    <content><![CDATA[<h3 id="网易云音乐歌单生成外链播放器"><a href="#网易云音乐歌单生成外链播放器" class="headerlink" title="网易云音乐歌单生成外链播放器"></a>网易云音乐歌单生成外链播放器</h3><p>参考<br><a href="https://www.cnblogs.com/yuan2333/p/7244380.html">https://www.cnblogs.com/yuan2333/p/7244380.html</a></p>
<ul>
<li>注意网页版网易云看的比较清楚</li>
<li>创建歌单</li>
<li>点击分享</li>
<li>查看【朋友】-【我的动态】</li>
<li>点进歌单-【生成外链播放器】</li>
</ul>
<h3 id="在网页中添加网易云音乐歌单"><a href="#在网页中添加网易云音乐歌单" class="headerlink" title="在网页中添加网易云音乐歌单"></a>在网页中添加网易云音乐歌单</h3><p>参考：<br><a href="https://otakurice.github.io/2018/07/20/hexo%20%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95/">https://otakurice.github.io/2018/07/20/hexo%20%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%AD%8C%E5%8D%95/</a></p>
<ul>
<li>基本操作，如果只需要加一首歌或者主页面加歌单列表，手动播放，则只需要<br>修改主题文件夹下layout_macro\sidebar.swig文件(这是侧边栏路径)，将上述代码贴入到想放的位置。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;music163player&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">280</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=28885472&amp;auto=1&amp;height=66&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;music163player&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">280</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=28885472&amp;auto=1&amp;height=66&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="想全局播放-切网页自动播放"><a href="#想全局播放-切网页自动播放" class="headerlink" title="想全局播放+切网页自动播放"></a>想全局播放+切网页自动播放</h3><p>参考：<br><a href="https://blog.csdn.net/qq_39720594/article/details/105401774https://blog.csdn.net/qq_39720594/article/details/105401774">https://blog.csdn.net/qq_39720594/article/details/105401774https://blog.csdn.net/qq_39720594/article/details/105401774</a></p>
<p>git cmd 安装：<br>npm install aplayer –save</p>
<p>使用Aplayer + MetingJS插件<br>打开我们主题文件：themes\next\layout_macro\sidebar.swig找到sidebar-inner，复制下面代码粘贴到此<div>标签后即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- require APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- require MetingJS--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--网易云--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag"><span class="attr">server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;7091778006&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">&quot;playlist&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">mini</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">fixed</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">list-folded</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">volume</span>=<span class="string">&quot;0.5&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">theme</span>=<span class="string">&quot;#FADFA3&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">order</span>=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">loop</span>=<span class="string">&quot;all&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">mutex</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里面注意修改id为自己的歌单id即可。</p>
<p>其他配置项参考：<br><a href="https://github.com/metowolf/MetingJS">MetingJS配置</a></p>
<p>全局播放背景音乐（使用 Pajx 实现）<br>即实现页面跳转刷新后音乐不间断播放</p>
<p>打开themes\next\layout文件夹找到_layout.swig</p>
<p>在&lt;\head&gt;标签前添加下面代码，并保存。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>   //粘贴到这里</span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--pjax：防止跳转页面音乐暂停--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>在主题的配置文件中找到pajx，将它设置为true，并保存。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure>
<p>在博客文件夹打开GitBash执行hexo clean、hexo g、hexo s，跳转页面时即可看到效果。</p>
]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
        <tag>next</tag>
        <tag>网易云</tag>
      </tags>
  </entry>
  <entry>
    <title>python读写文件</title>
    <url>/2021/12/20/python%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="OS模块的常用方法"><a href="#OS模块的常用方法" class="headerlink" title="OS模块的常用方法"></a>OS模块的常用方法</h4><ul>
<li><p>os.path.join()</p>
<p>不同操作系统路径之间的分隔符不统一，就用此函数来做这件事。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.path.join(<span class="string">&#x27;usr&#x27;</span>,<span class="string">&#x27;bin&#x27;</span>,<span class="string">&#x27;spam&#x27;</span>))</span><br><span class="line"><span class="comment"># print(os.path.join(&#x27;usr&#x27;,filename))常用</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取当前目录</p>
<p>os.getcwd()获取当前目录</p>
<p>os.chdir()修改为其他目录，这里注意，如果没有要转过去的目录，会有报错。</p>
</li>
<li><p>用os.makedirs()创建新的文件夹目录</p>
</li>
<li><p>处理绝对路径和相对路径</p>
<p>获取绝对路径 os.path.abspath(path)</p>
<p>获得布尔值 os.path.isabs(path)</p>
<p>获取相对路径 os.path.relpath(path,start)</p>
<p>获取目录名称 os.path.dirname(path)</p>
<p>获取基本名称 os.path.basename(path)</p>
<p>同时获取以上两个内容 os.path.split(path)</p>
<p>path.split(os.path.sep)，这里os.path.sep变量会根据操作系统自动匹配分隔符，如\\或者/等。</p>
</li>
<li><p>查看文件大小 os.path.getsize(path)</p>
</li>
<li><p>查看文件名列表 os.listdir(path)</p>
</li>
<li><p>检查路径有效性</p>
<p>os.path.exists(path)检查path是否存在</p>
<p>os.path.isfile(path)检查path正确且是一个文件</p>
<p>os.path.isdir(path)检查path正确且是一个目录</p>
</li>
</ul>
<h4 id="文件读写过程"><a href="#文件读写过程" class="headerlink" title="文件读写过程"></a>文件读写过程</h4><ul>
<li><p>用open函数打开文件</p>
</li>
<li><p>读取文件内容，如read()</p>
</li>
<li><p>写入文件</p>
<p>testfile = open(filepath,’w’)</p>
<p>testfile.write(‘hello word!\n’)</p>
</li>
</ul>
<h4 id="用shelve模块保存变量"><a href="#用shelve模块保存变量" class="headerlink" title="用shelve模块保存变量"></a>用shelve模块保存变量</h4><ul>
<li><p>需要再搜索，使用如字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line">shelfFile = shelve.<span class="built_in">open</span>(<span class="string">&#x27;mydata&#x27;</span>)</span><br><span class="line">cats = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">shelfFile[<span class="string">&#x27;cats&#x27;</span>] = cats</span><br><span class="line">shelfFile.close()</span><br></pre></td></tr></table></figure>

<p>为变量保存到文件的最佳方式。</p>
</li>
</ul>
<h4 id="用pprint-pformat-函数保存变量"><a href="#用pprint-pformat-函数保存变量" class="headerlink" title="用pprint.pformat()函数保存变量"></a>用pprint.pformat()函数保存变量</h4><ul>
<li>理解：如列表变量中的内容，可以使用pprint.pformat()来存储其变量中的字符串内容，写到py文件中去</li>
<li>后续可使用import上面存储的py文件，来应用后面的值。</li>
</ul>
<h4 id="实战项目：生成随机的测试试卷文件"><a href="#实战项目：生成随机的测试试卷文件" class="headerlink" title="实战项目：生成随机的测试试卷文件"></a>实战项目：生成随机的测试试卷文件</h4><p>假如你是一位地理老师，班上有 35 名学生，你希望进行美国各州首府的一个小测验。不妙的是，班里有几个坏蛋，你无法确信学生不会作弊。你希望随机调整问题的次序，这样每份试卷都是独一无二的，这让任何人都不能从其他人那里抄袭答案。当然，手工完成这件事又费时又无聊。好在，你懂一些 Python。<br>下面是程序所做的事：<br>• 创建 35 份不同的测验试卷。<br>• 为每份试卷创建 9 个多重选择题，次序随机。<br>• 为每个问题提供一个正确答案和 3 个随机的错误答案，次序随机。<br>• 将测验试卷写到 35 个文本文件中。<br>• 将答案写到 35 个文本文件中。<br>  这意味着代码需要做下面的事：<br>• 将州和它们的首府保存在一个字典中。<br>• 针对测验文本文件和答案文本文件，调用 open()、write()和 close()。<br>• 利用 random.shuffle()随机调整问题和多重选项的次序。</p>
<p>实际写成脚本内容，实际生成9个问题来测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将美国各州首府数据存储在一个字典中</span></span><br><span class="line">capitals = &#123;<span class="string">&#x27;Alabama&#x27;</span>: <span class="string">&#x27;Montgomery&#x27;</span>, <span class="string">&#x27;Alaska&#x27;</span>: <span class="string">&#x27;Juneau&#x27;</span>, <span class="string">&#x27;Arizona&#x27;</span>: <span class="string">&#x27;Phoenix&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Arkansas&#x27;</span>: <span class="string">&#x27;Little Rock&#x27;</span>, <span class="string">&#x27;California&#x27;</span>: <span class="string">&#x27;Sacramento&#x27;</span>, <span class="string">&#x27;Colorado&#x27;</span>: <span class="string">&#x27;Denver&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connecticut&#x27;</span>: <span class="string">&#x27;Hartford&#x27;</span>, <span class="string">&#x27;Delaware&#x27;</span>: <span class="string">&#x27;Dover&#x27;</span>, <span class="string">&#x27;Florida&#x27;</span>: <span class="string">&#x27;Tallahassee&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> quizNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">35</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建试卷和答案文件</span></span><br><span class="line">    quizFile = <span class="built_in">open</span>(<span class="string">&#x27;capitalsquiz%s.txt&#x27;</span> % (quizNum + <span class="number">1</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    answerKeyFile = <span class="built_in">open</span>(<span class="string">&#x27;capitalsquiz_answers%s.txt&#x27;</span> % (quizNum + <span class="number">1</span>), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写标题和开头</span></span><br><span class="line">    quizFile.write(<span class="string">&#x27;Name:\n\nDate:\n\nPeriod:\n\n&#x27;</span>)</span><br><span class="line">    quizFile.write((<span class="string">&#x27; &#x27;</span> * <span class="number">20</span>) + <span class="string">&#x27;State Capitals Quiz (Form %s)&#x27;</span> % (quizNum + <span class="number">1</span>))</span><br><span class="line">    quizFile.write(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打乱capital字典</span></span><br><span class="line">    states = <span class="built_in">list</span>(capitals.keys())</span><br><span class="line">    random.shuffle(states)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环states，制造9个问题</span></span><br><span class="line">    <span class="keyword">for</span> questionNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        correctAnswer = capitals[states[questionNum]]</span><br><span class="line">        wrongAnswers = <span class="built_in">list</span>(capitals.values())</span><br><span class="line">        <span class="keyword">del</span> wrongAnswers[wrongAnswers.index(correctAnswer)]  <span class="comment"># 删除列表中的正确答案</span></span><br><span class="line">        <span class="comment"># random.sample()函数使得这种选择很容易，它的第一个参数是你希望选择的列表，第二个参数是你希望选择的值的个数。</span></span><br><span class="line">        wrongAnswers = random.sample(wrongAnswers, <span class="number">3</span>)</span><br><span class="line">        answerOptions = wrongAnswers + [correctAnswer]</span><br><span class="line">        random.shuffle(answerOptions)</span><br><span class="line"></span><br><span class="line">        quizFile.write(<span class="string">&#x27;%s. What is the caption of %s\n&#x27;</span> % (questionNum + <span class="number">1</span>, states[questionNum]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            quizFile.write(<span class="string">&#x27; %s. %s\n&#x27;</span> % (<span class="string">&#x27;ABCD&#x27;</span>[i], answerOptions[i]))</span><br><span class="line">        quizFile.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        answerKeyFile.write(<span class="string">&#x27;%s. %s\n&#x27;</span> % (questionNum + <span class="number">1</span>, <span class="string">&#x27;ABCD&#x27;</span>[answerOptions.index(correctAnswer)]))</span><br><span class="line">    quizFile.close()</span><br><span class="line">    answerKeyFile.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果类似如下，试卷文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Name:</span><br><span class="line"></span><br><span class="line">Date:</span><br><span class="line"></span><br><span class="line">Period:</span><br><span class="line"></span><br><span class="line">                    State Capitals Quiz (Form <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> What <span class="keyword">is</span> the caption of California</span><br><span class="line"> A. Tallahassee</span><br><span class="line"> B. Montgomery</span><br><span class="line"> C. Hartford</span><br><span class="line"> D. Sacramento</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> What <span class="keyword">is</span> the caption of Arizona</span><br><span class="line"> A. Montgomery</span><br><span class="line"> B. Little Rock</span><br><span class="line"> C. Dover</span><br><span class="line"> D. Phoenix</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> What <span class="keyword">is</span> the caption of Colorado</span><br><span class="line"> A. Phoenix</span><br><span class="line"> B. Dover</span><br><span class="line"> C. Denver</span><br><span class="line"> D. Little Rock</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> What <span class="keyword">is</span> the caption of Florida</span><br><span class="line"> A. Tallahassee</span><br><span class="line"> B. Denver</span><br><span class="line"> C. Phoenix</span><br><span class="line"> D. Little Rock</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> What <span class="keyword">is</span> the caption of Connecticut</span><br><span class="line"> A. Sacramento</span><br><span class="line"> B. Juneau</span><br><span class="line"> C. Hartford</span><br><span class="line"> D. Denver</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> What <span class="keyword">is</span> the caption of Alabama</span><br><span class="line"> A. Montgomery</span><br><span class="line"> B. Denver</span><br><span class="line"> C. Juneau</span><br><span class="line"> D. Little Rock</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> What <span class="keyword">is</span> the caption of Delaware</span><br><span class="line"> A. Juneau</span><br><span class="line"> B. Little Rock</span><br><span class="line"> C. Dover</span><br><span class="line"> D. Tallahassee</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> What <span class="keyword">is</span> the caption of Arkansas</span><br><span class="line"> A. Sacramento</span><br><span class="line"> B. Little Rock</span><br><span class="line"> C. Denver</span><br><span class="line"> D. Montgomery</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> What <span class="keyword">is</span> the caption of Alaska</span><br><span class="line"> A. Juneau</span><br><span class="line"> B. Tallahassee</span><br><span class="line"> C. Sacramento</span><br><span class="line"> D. Denver</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>答案文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> D</span><br><span class="line"><span class="number">2.</span> D</span><br><span class="line"><span class="number">3.</span> C</span><br><span class="line"><span class="number">4.</span> A</span><br><span class="line"><span class="number">5.</span> C</span><br><span class="line"><span class="number">6.</span> A</span><br><span class="line"><span class="number">7.</span> C</span><br><span class="line"><span class="number">8.</span> B</span><br><span class="line"><span class="number">9.</span> A</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>《控方证人》影评-usopp</title>
    <url>/2021/11/24/%E3%80%8A%E6%8E%A7%E6%96%B9%E8%AF%81%E4%BA%BA%E3%80%8B%E5%BD%B1%E8%AF%84-usopp/</url>
    <content><![CDATA[<h3 id="控方证人"><a href="#控方证人" class="headerlink" title="控方证人"></a>控方证人</h3><p>电影的名称，英文名得记一下，《The Witness for the Prosecution》，以示尊重。</p>
<h3 id="故事讲的是什么？"><a href="#故事讲的是什么？" class="headerlink" title="故事讲的是什么？"></a>故事讲的是什么？</h3><p>在回答这个问题之前，我特意搜了一下，写影评能不能剧透？多数答案是，最好是不要。<br>确实会毁体验。<br>但是不剧透怎么写影评？那就做到尽量不剧透吧。</p>
<p>刚好【控方证人】结尾说最好不要剧透。所以引用百度百科的剧情介绍：</p>
<blockquote>
<p>伦敦著名刑案辩护律师威尔弗里德爵士（查尔斯·劳顿<strong>饰）接受了心脏病治疗，但是身体依旧虚弱，第一天回家休养，护士一直严厉监督他服药，并杜绝烟酒。管家为了便于上楼，还专门为他修了电梯。但是，种种关心照顾，对于这位桀骜不驯、牙尖嘴利的大律师根本不起作用，反倒是一纸诉状令他倍感兴奋。律师梅休和当事人沃尔（泰隆·鲍华</strong>饰）登门拜访，请他出山打官司。原来，沃尔结识了富婆，两人相见甚欢，虽然仆人对他发明的打蛋器充满鄙夷，但是富婆却对他充满爱意，甚至为他修改了遗嘱，把8万英镑留给了他。然而，富婆却惨遭毒手。于是，沃尔成为警方的头号嫌疑犯。他的唯一证人是妻子克里斯汀（玛琳·黛德丽**饰），然而后者登门时的冷漠与淡定，令韦菲爵士怀疑这其中另有隐情。在扑朔迷离的案件背后，隐藏着一个个环环相扣、不可告人的秘密…</p>
</blockquote>
<p>看来百度百科对这类悬疑电影的介绍，也不会剧透…</p>
<p>再看庭审部分：</p>
<blockquote>
<p>二十世纪的某个秋天，伦敦街头正在经历十年未遇的大雨，<br>眼看悠闲的下午茶时间在雷声中泡汤，在崇尚优雅的英国人眼中，这自然不是一个好兆头，<br>仿佛预示着有什么大事就要发生了。<br>此时此刻在英国中央法院里，正在上演着一场精彩的法庭对决，<br>一位极其睿智又受人尊敬的辩护律师在被告人非常不利的情境下进行着难以置信陈词。<br>这名爵士凭借异于常人的大脑和坚强的心脏向在场的所有人展示了如何面对着证据确凿的事实还能够气定神闲，巧舌如簧。<br>这显然建立在其本人对英美法系的熟谙之上，无论这一场好戏结局如何，<br>它都终将作为人权和法制的典型象征载入史册。</p>
</blockquote>
<h3 id="电影精彩在什么地方？"><a href="#电影精彩在什么地方？" class="headerlink" title="电影精彩在什么地方？"></a>电影精彩在什么地方？</h3><ul>
<li><p>剧本<br>剧本很流畅，本身是侦探小说家阿加莎·克里斯蒂的原著改编，质量有保障。<br>之前看过阿婆的《东方快车谋杀案》，很感兴趣，后续补一下阿婆的《尼罗河谋杀案》《无人生还》等。<br>剧情紧凑，每个环节都不能错过。<br>开场时，让观众和律师一起有个先入为主的感觉，实际上律师很主观，而证人证词证据链很客观。<br>但是电影和小说都是在结尾峰回路转。<br>补充：实际电影的结尾部分，为了过审，多杀一人，其实大可不必。</p>
</li>
<li><p>台词<br>很多角色的台词都设计的很到位，需要细品。</p>
<ul>
<li>感谢你的恭维，我已经很久没有演戏了，而且我从没演过这样性命攸关的角色。</li>
<li>Thank you for the compliment. It’s been a long time since I acted and I never played such a vital role.</li>
<li></li>
<li>老狐狸威尔弗莱德，我们就这么叫他，真是恰如其分。</li>
<li>Wilfrid the fox! That’s what we call him and that’s what he is.</li>
<li></li>
<li>我还从来没被逮捕过，我奉公守法，从没带不拴绳子的狗出门，也没有在营业时间之后去喝过啤酒。</li>
<li>I’ve never been arrested before not even for walking a dog off a lead or having a beer after hours.</li>
<li></li>
<li>正义的天平，也许偶有偏差，但终将回归正义，你会付出代价的。</li>
<li>The scales of justice may tip one way or another but ultimately they balance out. You’ll pay for this.</li>
</ul>
</li>
<li><p>表演<br>看第一遍的时候我的注意力集中在律师和护士身上，人物性格特点都很鲜明。一个机智，一个话痨。<br>但是当我知道了真相后，再看第二遍，会把注意力集中在沃尔和克里斯汀身上，领悟到什么是【演员】，什么是【精妙绝伦的表演】。<br>看第三遍的时候，我才把我的注意力集中到大律师身上，这个时候才感受到什么叫【拍案叫绝】。</p>
</li>
</ul>
<h3 id="假如自己来讲这个故事，能不能讲的更好？"><a href="#假如自己来讲这个故事，能不能讲的更好？" class="headerlink" title="假如自己来讲这个故事，能不能讲的更好？"></a>假如自己来讲这个故事，能不能讲的更好？</h3><p>说一个视角问题，从另一个主角，沃尔视角出发？可以参考【隐秘的角落】张朝阳的视角、 【窥探】小白的视角等。<br>方法是，隐去自己犯罪的部分，只讲部分事实。通过各方的人证物证，人证物证来让观众反推出谁才是真正的凶手。<br>故事同样可以通过找律师开场，然后回忆三段爱情故事，最后再来法庭辩论场景。<br>如果是很长的剧集，很多集，用这个视角未尝不可。<br>让观众误以为主角有很多善良温情的细节，然后同情主角，心理层面排斥真正的真相。<br>问题是，电影两三个小时的短时间内，凸显不了律师这个角色的【睿智】【受人尊敬】【逻辑缜密】【气定神闲】【巧舌如簧】，<br>也不能感受最后阴沟翻船导致的心理落差，所以电影实际是让观众通过律师视角，<br>才能与剧情的情感部分产生共振，感受【过山车式的情感体验】和【扑朔迷离的跌宕剧情】。</p>
<h3 id="其他细节补充"><a href="#其他细节补充" class="headerlink" title="其他细节补充"></a>其他细节补充</h3><ul>
<li>转景虽然不多，但是每个转景都很流畅，要知道这是1957年的电影，60年前别人已经能做到这个水准，反观现在很多恰烂钱的电影，真是水。<br>后续关注下这个导演 比利·怀尔德。</li>
<li>饰演克里斯汀的女演员，玛琳·黛德丽，演的时候已经56岁了，看起来像30来岁。<br>片中再演一个火车站送信的女人，我觉得大律师说的【大受震撼】是真情流露 。</li>
<li>沃尔的演员泰隆·鲍华，感觉演军人，演风流潇洒落魄公子哥都很自然，让人自然认为他就是这样的人。<br>可惜1958年他就真的去世了。</li>
<li>公爵和护士也是生活中的夫妻，嘿嘿，看得出来吗？特别影片最后结尾，护士知道公爵杯子里的是酒，实际是让人很感动的。</li>
<li>影片中的一个亮点，律师摆弄反光的镜片，故意反光到刀子上面，让观众注意到那里。真是妙啊！</li>
</ul>
]]></content>
      <categories>
        <category>影评</category>
      </categories>
      <tags>
        <tag>控方证人</tag>
      </tags>
  </entry>
  <entry>
    <title>Python组织文件</title>
    <url>/2021/12/27/Python%E7%BB%84%E7%BB%87%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="Python组织文件"><a href="#Python组织文件" class="headerlink" title="Python组织文件"></a>Python组织文件</h3><h4 id="shutil模块"><a href="#shutil模块" class="headerlink" title="shutil模块"></a>shutil模块</h4><ul>
<li><p>复制文件和文件夹</p>
<p>shutil.copy(source,destination)，这里source处是文件名</p>
<ul>
<li>如果destination是文件夹，则在文件夹下复制粘贴过去</li>
<li>如果destination是文件名，则以最新文件名将内容复制过去</li>
</ul>
<p>shutil.coptytree(source,destination),这里source处为文件夹，会将整个目录copy一份过去</p>
</li>
<li><p>文件和文件夹的移动和改名</p>
<p>shutil.move(source,destination)，将</p>
<ul>
<li><p>source处的文件夹移动到目的地，并返回新位置的绝对路径</p>
</li>
<li><p>如果destination是文件夹，source是文件名，则将文件直接剪切过去，文件名不变。</p>
</li>
<li><p>如果destination本来想作为目录但没有识别到，但是最后一层目录前的路径可以识别，source是文件名，则将文件重新命名为destination的文件名。</p>
</li>
<li><p>如果destination中最后一层目录前的目录没有识别到，则文件夹不存在，会有报错，需要捕获异常。</p>
</li>
</ul>
</li>
<li><p>永久删除文件和文件夹</p>
<ul>
<li>os.unlink(path)将删除path处的文件</li>
<li>调用os.rmdir(path)将删除path处的文件夹，文件夹必须为空，才能删除</li>
<li>调用shutil.rmtree(path)将删除path处的文件夹，不需要文件夹为空。</li>
</ul>
</li>
<li><p>使用send2trash模块安全地删除</p>
<ul>
<li>send2trash.send2trash()函数可以删除至回收站，可恢复。需要安装send2trash模块。</li>
</ul>
</li>
</ul>
<h4 id="遍历目录树"><a href="#遍历目录树" class="headerlink" title="遍历目录树"></a>遍历目录树</h4><ul>
<li><p>os.walk()函数</p>
<p>常用方法， for folderName,subfolders,filenames in os.walk(path)：</p>
<p>os.walk()在循环的每次迭代中，返回3个值。</p>
<ul>
<li>当前文件夹名称的字符串</li>
<li>当前文件夹中子文件夹的字符串列表</li>
<li>当前文件夹中文件的字符串列表</li>
</ul>
</li>
</ul>
<h4 id="用zipfile模块压缩文件"><a href="#用zipfile模块压缩文件" class="headerlink" title="用zipfile模块压缩文件"></a>用zipfile模块压缩文件</h4><ul>
<li><p>读取zipfile，</p>
<p>exampleZip = zipfile.Zipfile(‘example.zip’)</p>
<p>可以用exampleZip.namelist()函数</p>
<p>另外还有getinfo,file_size,compress_size等内容。</p>
</li>
<li><p>解压缩</p>
<p>exampleZip.extractall()</p>
<p>可以使用extract(文件名)解压缩单个文件</p>
</li>
<li><p>创建和添加到zip文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line">newZip = zipfile.Zipfile(<span class="string">&#x27;new.zip&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">newZip.write(<span class="string">&#x27;spam.txt&#x27;</span>,compress_type=zipfile.ZIP_DEFLATED)</span><br><span class="line">newZip.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="将一个文件夹备份到一个-ZIP-文件"><a href="#将一个文件夹备份到一个-ZIP-文件" class="headerlink" title="将一个文件夹备份到一个 ZIP 文件"></a>将一个文件夹备份到一个 ZIP 文件</h4><p>假定你正在做一个项目，它的文件保存在C:\AlsPythonBook 文件夹中。你担心工作会丢失，所以希望为整个文件夹创建一个ZIP 文件，作为“快照”。你希望保存不同的版本，希望 ZIP 文件的文件名每次创建时都有所变化。例如 AlsPythonBook_1.zip、AlsPythonBook_2.zip、AlsPythonBook_3.zip，等等。你可以手工完成，但这有点烦人，而且可能不小心弄错ZIP 文件的编号。运行一个程序来完成这个烦人的任务会简单得多。针对这个项目，打开一个新的文件编辑器窗口，将它保存为 backupToZip.py。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># backupToZip.py - Copies an entire folder and its contents into</span></span><br><span class="line"><span class="comment"># a ZIP file whose filename increments.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zipfile, os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backupToZip</span>(<span class="params">folder</span>):</span></span><br><span class="line">    <span class="comment"># Backup the entire contents of &quot;folder&quot; into a ZIP file.</span></span><br><span class="line"></span><br><span class="line">    folder = os.path.abspath(folder)  <span class="comment"># make sure folder is absolute</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Figure out the filename this code should use based on</span></span><br><span class="line">    <span class="comment"># what files already exist.</span></span><br><span class="line">    number = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        zipFilename = os.path.basename(folder) + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">str</span>(number) + <span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(zipFilename):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        number = number + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create the ZIP file.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Creating %s...&#x27;</span> % (zipFilename))</span><br><span class="line">    backupZip = zipfile.ZipFile(zipFilename, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Walk the entire folder tree and compress the files in each folder.</span></span><br><span class="line">    <span class="keyword">for</span> foldername, subfolders, filenames <span class="keyword">in</span> os.walk(folder):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Adding files in %s...&#x27;</span> % (foldername))</span><br><span class="line">        <span class="comment"># Add the current folder to the ZIP file.</span></span><br><span class="line">        backupZip.write(foldername)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add all the files in this folder to the ZIP file.这里注意缩进为for循环中的循环</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">            <span class="keyword">if</span> filename.startswith(os.path.basename(folder) + <span class="string">&#x27;_&#x27;</span>) <span class="keyword">and</span> filename.endswith(<span class="string">&#x27;.zip&#x27;</span>):</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># don&#x27;t backup the backup ZIP files</span></span><br><span class="line">            backupZip.write(os.path.join(foldername, filename))</span><br><span class="line">    backupZip.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Done.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">backupToZip(<span class="string">&#x27;D:\\testfiles\\测试文档合集1.0&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>调试结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\pythontest\autowork\venv\Scripts\python.exe D:/pythontest/autowork/venv/backuptoZip.py</span><br><span class="line">Creating 测试文档合集<span class="number">1.0_2</span>.<span class="built_in">zip</span>...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">1.</span>面试资料整理...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">2.</span>功能测试...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">3.</span>性能测试...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">4.</span>自动化测试...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">5.</span>测试相关...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">5.</span>测试相关\Docker容器管理与Jenkins持续集成...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">6.</span>编程语言...</span><br><span class="line">Adding files <span class="keyword">in</span> D:\testfiles\测试文档合集<span class="number">1.0</span>\<span class="number">6.</span>编程语言\python书籍...</span><br><span class="line">Done.</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>生成的文件名为：</p>
<p>测试文档合集1.0_1.zip</p>
<p>测试文档合集1.0_2.zip</p>
<p>…</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>《认知觉醒》读书心得+笔记整理</title>
    <url>/2021/12/18/%E3%80%8A%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92%E3%80%8B%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97-%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="个人成长记录："><a href="#个人成长记录：" class="headerlink" title="个人成长记录："></a>个人成长记录：</h3><p>今年最幸运的事情之一，就是读到了周岭老师的《认知觉醒》。<br>从八月份知道这本书，到现在将近四个月，陆陆续续读了也有四五遍了。<br>然后改变量也确实有一点，虽然进步不大，但也可以记录一下。</p>
<ul>
<li><p>开始写个人博客网站<br><a href="https://shenle2019.github.io/">https://shenle2019.github.io/</a><br>这个博客将会持续记录我的个人总结内容，我的想法是写任何内容都行，每周1-2篇输出。</p>
</li>
<li><p>Java-web的学习笔记，终于整理一版出来了。<br>对java的基础知识、博客网站的搭建流程、操作系统相关知识、Spring框架的基本应用等有一定的理解。<br>github地址：<a href="https://github.com/shenle2019/javaonline">https://github.com/shenle2019/javaonline</a></p>
</li>
</ul>
<p>后续无论是Java，还是Python，C等，都可以按照这个思路，先把基础语法过一遍，然后做成一个项目，<br>将中间的一些关键步骤、思考内容记录下来，记录自己成长的同时，增强自信心。</p>
<ul>
<li><p>开始搭建个人知识体系，目前用有道云笔记来持续更新自己的全量知识体系。</p>
</li>
<li><p>开始实行【早冥读写跑】这人生五件套。<br>  其中阅读和跑步以前就一直很喜欢，现在更加强了这两个习惯。<br>  做的不好的是早起、冥想和写作。<br>  后续计划：早起，每天早上7点起床，对我来说是合适的。<br>  冥想：中午午睡时，30min+的冥想练习。<br>  写作：坚持以目标为导向来写博客。</p>
</li>
</ul>
<h3 id="关键触动点记录："><a href="#关键触动点记录：" class="headerlink" title="关键触动点记录："></a>关键触动点记录：</h3><ul>
<li><p>自己需要养成这些基础习惯，然后驱动自己做一些真实的改变，不是为了表面上的上进或者心理安慰，<br>而是内心的真实渴望：<br>比如想以后能写任何东西，那么就需要用写作来梳理自己的思路，锻炼笔力；<br>要想身体回到健康状态，要身材变好看，就得保持运动的习惯；<br>要做成想做的事，就要运用冥想来锻炼专注力等等。<br>早冥读写跑，可以为我搭建一个进阶的框架，后续有新的认知好的习惯，可以继续往里面添加即可。</p>
</li>
<li><p>另一个最关键的成长，就是耐心的增强。<br>焦虑的根源是自己想做的事情太多，而又立即想看到效果。<br>特别是眼里看见别人的成就，有对比就有焦虑。<br>而忽视了自己当前的能力，这就属于是盲目的焦虑了，实属没有必要。<br>可行的方法，第一条就是时刻提醒自己保持足够的耐心。<br>先找出目前来说最想做的、最重要的事情，只做一件事，<br>然后着眼于当下的事情，一点一滴地去解决它，感受进一寸的欢喜。<br>再有急躁时，运用元认知来温和提醒自己即可保持内心的平静。</p>
</li>
</ul>
<p>以上两点，就已经让我醍醐灌顶，解决了很多问题，后续会一直坚持：<br>专注当下，保持平静和耐心，一点一滴地进步，学到新知识新习惯可以往已有的框架中添加。</p>
<h3 id="读书笔记："><a href="#读书笔记：" class="headerlink" title="读书笔记："></a>读书笔记：</h3><p>这本书里还有很多其他的触动点，按自己的理解来记录如下</p>
<ul>
<li>要养成运动习惯，锻炼身体作为生活的一种状态，因为这是赋予无数个0的意义前面的1。</li>
<li>有清晰的目标和执行的方法，消除实现路径的模糊。<br>  在拉伸区练习，且每项内容让自己讲出来，消除知识逻辑的模糊。<br>  这个过程，要求自己不要浮于表面或者只做表面工作，而要直面核心问题。</li>
<li>执行过程中，践行所有高手都拥有的优点，可能也是惟一的优点，那就是专注。<br>  保持专注，追求心流、禅定 状态。这是毕生追求。<br>  比如编程写作，都需要练习练习再练习，最后达到真正的闭环状态。</li>
<li>日常冥想可以锻炼自己的专注力。</li>
<li>心态平和。解决困难问题时，要有打游戏闯关升级心态。<br>  有自信，相信自己一定能学会，做得到。</li>
<li>每日反省。用 元认知来审视自己，从更全局的眼光来发现问题。<br>  然后用内心触动磨合、扩大自己的认知系统。<br>  如此反复刻意练习，来提高能力。</li>
<li>最后，勤阅读，来聆听与各个领域 的大神的教诲。勤思考勤输出，来缩小差距。<br>  独立思考与输出，来慢慢变强。</li>
</ul>
<h3 id="其他感想："><a href="#其他感想：" class="headerlink" title="其他感想："></a>其他感想：</h3><ul>
<li>这是一本关于【个人成长】的书（当然还可以解释、解决生活中的一些其它问题）。<br>  讨论的主要是我们作为普通人，想要变得【优秀】或者【厉害】一点，中间会有哪些问题？这些问题背后的原理是什么？<br>  知道这些原理后，我们应该怎么做？<br>  所以我们得先有让自己变好的心，否则这本书确实没啥意思，推荐再多次也没有意义。<br>  这是【前提】，毕竟我们不希望五年后、十年后的自己，跟现在一样没啥变化。<br>  只有我们的能力足够强的时候，才能解决生活中的很多问题。</li>
<li>这本书讲的内容，我是这样理解的，主要分为两块。<br>  一个是我们身上出现各种各样问题的原因，即【原理】部分。<br>  另一个就是作者通过这些原因，来找到一些解决的办法，俗称【方法论】。<br>  各种问题比如焦虑、不够耐心、情感冲动、缺乏自控力、不够专注、学习不得法、行动力不强等等。<br>  作者把这些问题都一一罗列出来，说明问题背后的原因，想搞懂的话，可看对应章节的内容。<br>  方法论就是解决实际的问题了，知道原因后对症下药，参考上述读书笔记内容。</li>
<li>一本书也不会教会所有成长相关的内容，只是这本书给我的触动很大，解决了我以前的很多困惑，所以希望大家也有所收获。<br>  当然也没有刻意来制造焦虑，或者执意要给你喝鸡汤打鸡血。<br>  这本书的原理是有科学依据的，而不是心灵鸡汤。  绝大部分人应该都可以从中学到一些东西，所以我觉得还是有必要读一读。<br>  比如你现在要教你的娃一些学习的方法，就可以作为参考。如果自己也能做到，那就更好了，毕竟【父母是孩子最好的老师】。    比如你现在想跟别人谈恋爱，也可以学习变得优秀的方法。因为【爱一个人最好的方式，是经营好自己，给对方一个优质的爱人】。<br>  至于我的话，没有那么多想法，只是单纯地感觉我要践行下去会变强而已。</li>
</ul>
<pre><code>—— 乌索普大将，2021.12.18，杭州。
</code></pre>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>《认知觉醒》</tag>
      </tags>
  </entry>
  <entry>
    <title>从WEB抓取信息</title>
    <url>/2022/01/03/%E4%BB%8EWEB%E6%8A%93%E5%8F%96%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h4 id="利用webbrowser模块的mapIt-py"><a href="#利用webbrowser模块的mapIt-py" class="headerlink" title="利用webbrowser模块的mapIt.py"></a>利用webbrowser模块的mapIt.py</h4><ul>
<li>交互环境输入</li>
</ul>
<p>import webbrowser</p>
<p>webbrowser.open(‘<a href="http://inventwithpython.com&/#39;">http://inventwithpython.com&#39;</a>)</p>
<ul>
<li>写一个脚本，利用剪贴板的内容或者输入参数，在浏览器打开对应的地图</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！python 3</span></span><br><span class="line"><span class="comment">#！mapIt.py - Launches a map in the browser using an address  from the command line or clipboard.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> webbrowser, sys, pyperclip</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    address = <span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">1</span>:])  <span class="comment"># Get address from command line.</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    address = pyperclip.paste()       <span class="comment"># Get address from clipboard.</span></span><br><span class="line"></span><br><span class="line">webbrowser.<span class="built_in">open</span>(<span class="string">&#x27;https://www.google.com/map/place/&#x27;</span>+ address)</span><br></pre></td></tr></table></figure>



<h4 id="用requests模块，从web下载文件"><a href="#用requests模块，从web下载文件" class="headerlink" title="用requests模块，从web下载文件"></a>用requests模块，从web下载文件</h4><p>下载并保存到文件的步骤：</p>
<p>①调用requests.get()下载该文件</p>
<p>②用’wb’调用open()，以写二进制的方式打开一个新文件</p>
<p>③利用Respose对象的iter_content()方法循环</p>
<p>④在每次迭代中调用write()，将内容写入该文件</p>
<p>⑤调用close()关闭该文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = requests.get(<span class="string">&#x27;http://www.gutenberg.org/cache/epub/1112/pg1112.txt&#x27;</span>)</span><br><span class="line">res.raise_for_status()     <span class="comment"># 确保程序在下载失败时停止</span></span><br><span class="line">playFile = <span class="built_in">open</span>(<span class="string">&#x27;RomeoAndJuliet.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> res.iter_content(<span class="number">100000</span>):</span><br><span class="line">    playFile.write(chunk)</span><br><span class="line"></span><br><span class="line"><span class="number">100000</span></span><br><span class="line"><span class="number">78981</span></span><br><span class="line"></span><br><span class="line">playFile.close()</span><br></pre></td></tr></table></figure>



<h4 id="Beautiful-Soup——解析HTML"><a href="#Beautiful-Soup——解析HTML" class="headerlink" title="Beautiful Soup——解析HTML"></a>Beautiful Soup——解析HTML</h4><ol>
<li><p>bs4.BeautufulSoup() 返回一个BeautifulSoup对象</p>
</li>
<li><p>soup.select() 方法返回一个Tag对象的列表，是BeautifulSoup表示一个HTML元素的方式</p>
</li>
</ol>
<p>​            CSS选择器（网络上有各个示例）</p>
<ol start="3">
<li><p>getText() 方法返回该元素文本，或内部HTML</p>
</li>
<li><p>get() 方法返回属性值</p>
</li>
</ol>
<ul>
<li><p>从sys.argv中读取命令行参数</p>
</li>
<li><p>用requests模块取得查询结果页面</p>
</li>
<li><p>找到每个查询结果的链接</p>
</li>
<li><p>调用 webbrowser.open()函数打开web浏览器</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># lucky.py - Open several Google search results.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, sys, webbrowser, bs4</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Googling... &#x27;</span>)   <span class="comment"># display text while downloading the Google page</span></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://google.com/search?q=&#x27;</span> + <span class="string">&#x27; &#x27;</span>.join(sys.argv[<span class="number">1</span>: ]))</span><br><span class="line">res.raise_for_status()</span><br><span class="line"></span><br><span class="line">soup = bs4.BeautifulSoup(res.text)  <span class="comment"># Retrieve top search result links.</span></span><br><span class="line">linkElems = soup.select(<span class="string">&#x27;.r a&#x27;</span>)     <span class="comment"># Open a browser tab for each result.</span></span><br><span class="line">numOpen = <span class="built_in">min</span>(<span class="number">5</span>, <span class="built_in">len</span>(linkElems))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numOpen):</span><br><span class="line">    webbrowser.<span class="built_in">open</span>(<span class="string">&#x27;http://google.com&#x27;</span> + linkElems[i].get(<span class="string">&#x27;href&#x27;</span>))</span><br></pre></td></tr></table></figure>





<h4 id="用selenium模块控制浏览器"><a href="#用selenium模块控制浏览器" class="headerlink" title="用selenium模块控制浏览器"></a>用selenium模块控制浏览器</h4><ul>
<li>操作浏览器</li>
</ul>
<p>打开浏览器并加载网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line">webbrowser.<span class="built_in">open</span>(<span class="string">&#x27;https://github.com/ChelseaMah&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>用selenium模块控制浏览器</li>
</ul>
<p>导入有点特殊，需要用<br> from selenium import webdriver<br> 来使用selenium的webdriver，而不是Python自带的。</p>
<ul>
<li>启动浏览器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser.get(<span class="string">&#x27;https://github.com/ChelseaMah&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>在页面中寻找元素</li>
</ul>
<p>WebDriver对象有很多方法在页面中寻找元素，分为findelement和findelements方法。<br> findelemen 返回一个WebElement对象，是匹配查询的第一个元素。<br> findelements 返回一个列表，包含所有匹配元素。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>return</th>
</tr>
</thead>
<tbody><tr>
<td>browser.find_element_by_class_name(name) browser.find_elements_by_class_name(name)</td>
<td>使用CSS类name的元素</td>
</tr>
<tr>
<td>browser.find_element_by_css_selector(selector) browser.find_elements_by_css_selector(selector)</td>
<td>匹配CSSselector的元素</td>
</tr>
<tr>
<td>browser.find_element_by_id(id) browser.find_elements_by_id(id)</td>
<td>匹配id属性值的元素</td>
</tr>
<tr>
<td>browser.find_element_by_link_text(text) browser.find_elements_by_link_text(text)</td>
<td>完全匹配提供的text的<a>元素</td>
</tr>
<tr>
<td>browser.find_element_by_partial_link_text(text) browser.find_elements_by_partial_link_text(text)</td>
<td>包含提供的text的<a>元素</td>
</tr>
<tr>
<td>browser.find_element_by_name(name) browser.find_elements_by_name(name)</td>
<td>匹配name属性值的元素</td>
</tr>
<tr>
<td>browser.find_element_by_tag_name(name) browser.find_elements_by_tag_name(name)</td>
<td>匹配标签name的元素(大小写无关，<a>元素匹配’a’和’A’)</td>
</tr>
</tbody></table>
<ul>
<li>WebElement的属性和方法：</li>
</ul>
<table>
<thead>
<tr>
<th>属性或方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>tag_name</td>
<td>标签名，例如’a’表示<a>元素</td>
</tr>
<tr>
<td>get_attribute(name)</td>
<td>该元素name属性的值</td>
</tr>
<tr>
<td>text</td>
<td>该元素内的文本，例如<span>hello</span>中的’hello’</td>
</tr>
<tr>
<td>clear()</td>
<td>对于文本字段或文本区域元素，清除其中输入的文本</td>
</tr>
<tr>
<td>is_displayed()</td>
<td>如果该元素可见，返回True，否则返回False</td>
</tr>
<tr>
<td>is_enabled()</td>
<td>对于输入元素，如果该元素启用，返回True，否则返回False</td>
</tr>
<tr>
<td>is_selected()</td>
<td>对于复选框或单选框元素，如果该元素被选中，选择True，否则返回False</td>
</tr>
<tr>
<td>location</td>
<td>一个字典，包含键’x’和’y’，表示该元素在页面上的位置</td>
</tr>
</tbody></table>
<ul>
<li>页面点击</li>
</ul>
<p>findelement或findelements方法找到该WebElement对象</p>
<p>调用该元素的click()方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser.get(<span class="string">&#x27;https://github.com/ChelseaMah&#x27;</span>)</span><br><span class="line">publicElement = browser.find_element_by_link_text(<span class="string">&#x27;Public&#x27;</span>)</span><br><span class="line">publicElement.click()</span><br></pre></td></tr></table></figure>

<ul>
<li>填写并提交表单</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser = webdriver.Safari()</span><br><span class="line">browser.get(<span class="string">&#x27;http://gmail.com&#x27;</span>) </span><br><span class="line">emailElem = browser.find_element_by_id(<span class="string">&#x27;Email&#x27;</span>)</span><br><span class="line">emailElem.send_keys(<span class="string">&#x27;not_my_real_email@gmail.com&#x27;</span>)</span><br><span class="line">passwordElem = browser.find_element_by_id(<span class="string">&#x27;Passwd&#x27;</span>)</span><br><span class="line">passwordElem.send_keys(<span class="string">&#x27;12345&#x27;</span>)</span><br><span class="line">passwordElem.submit()</span><br></pre></td></tr></table></figure>

<p>在任何元素上调用submit()，都等同于该元素所在表单的submit。</p>
<p>发送特殊键</p>
<p>针对不能用字符串值输入的键盘击键，如Shift、F1、Home等，使用send_keys()方法时，传入selenium.webdriver.common.keys模块的常量：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Keys.DOWN,Keys.UP,Keys.LEFT,Keys.RIGHT</td>
<td>键盘箭头键</td>
</tr>
<tr>
<td>Keys.ENTER,Keys.RETURN</td>
<td>回车和换行键</td>
</tr>
<tr>
<td>Keys.HOME,Keys.END,Keys.PAGE_DOWN,Keys.PAGE_UP</td>
<td>Home键、End键、PageUp键和PageDown键</td>
</tr>
<tr>
<td>Keys.ESCAPE,Keys.BACK_SPACE,Keys.DELETE</td>
<td>Esc、Backspace和字母键</td>
</tr>
<tr>
<td>Keys.F1,Keys.F2,…,Keys.F12</td>
<td>键盘顶部的F1到F12键Keys.TABTab键</td>
</tr>
</tbody></table>
<p>点击浏览器按钮</p>
<ul>
<li>browe.back()     点击”返回”</li>
<li>browe.forword()  点击”前进”</li>
<li>browe.refresh()  点击”刷新”</li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>保持时间、计划任务和启动程序</title>
    <url>/2022/02/14/%E4%BF%9D%E6%8C%81%E6%97%B6%E9%97%B4%E3%80%81%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="保持时间、、计划任务和启动程序"><a href="#保持时间、、计划任务和启动程序" class="headerlink" title="保持时间、、计划任务和启动程序"></a>保持时间、、计划任务和启动程序</h3><h4 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h4><ul>
<li><p>time.time()函数</p>
<p>Unix 纪元是编程中经常参考的时间：1970 年 1 月 1 日 0 点，即协调世界时（UTC）。time.time()函数返回自那一刻以来的秒数，是一个浮点值（回想一下，浮点值只是一个带小数点的数）。这个数字称为 UNIX 纪元时间戳。例如，在交互式环境中输入以下代码</p>
<p>&gt;&gt;&gt; <strong>import time</strong></p>
<p>&gt;&gt;&gt; <strong>time.time()</strong></p>
<p>1425063955.068649</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcProd</span>():</span></span><br><span class="line">	<span class="comment"># Calculate the product of the first 100,000 numbers.</span></span><br><span class="line">	product = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000</span>):</span><br><span class="line">	product = product * i</span><br><span class="line">	<span class="keyword">return</span> product</span><br><span class="line">startTime = time.time()</span><br><span class="line">prod = calcProd()</span><br><span class="line">endTime = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The result is %s digits long.&#x27;</span> % (<span class="built_in">len</span>(<span class="built_in">str</span>(prod))))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Took %s seconds to calculate.&#x27;</span> % (endTime - startTime))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>D:\pythontest\autowork\venv\Scripts\python.exe D:/pythontest/autowork/venv/timetest.py<br>The result is 456569 digits long.<br>Took 2.9553983211517334 seconds to calculate.</p>
</li>
<li><p>time.sleep()函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\&gt;&gt;&gt; **<span class="keyword">import</span> time**</span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; **<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):**</span><br><span class="line"></span><br><span class="line"> **<span class="built_in">print</span>(<span class="string">&#x27;Tick&#x27;</span>)**</span><br><span class="line"></span><br><span class="line"> **time.sleep(<span class="number">1</span>)**</span><br><span class="line"></span><br><span class="line"> **<span class="built_in">print</span>(<span class="string">&#x27;Tock&#x27;</span>)**</span><br><span class="line"></span><br><span class="line"> **time.sleep(<span class="number">1</span>)**</span><br><span class="line"></span><br><span class="line">Tick</span><br><span class="line"></span><br><span class="line">Tock</span><br><span class="line"></span><br><span class="line">Tick</span><br><span class="line"></span><br><span class="line">Tock</span><br><span class="line"></span><br><span class="line">Tick</span><br><span class="line"></span><br><span class="line">Tock</span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt; **time.sleep(<span class="number">5</span>)**</span><br></pre></td></tr></table></figure></li>
<li><p>数字四舍五入</p>
<p>在处理时间时，你会经常遇到小数点后有许多数字的浮点值。为了让这些值更易于处理，可以用 Python 内置的 round()函数将它们缩短，该函数按照指定的精度四舍五入到一个浮点数。只要传入要舍入的数字，再加上可选的第二个参数，指明需要传入到小数点后多少位。如果省略第二个参数，round()将数字四舍五入到最接近的整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\&gt;&gt;&gt; **<span class="keyword">import</span> time**</span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; **now = time.time()**</span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; **now**</span><br><span class="line"></span><br><span class="line"><span class="number">1425064108.017826</span></span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; **<span class="built_in">round</span>(now, <span class="number">2</span>)**</span><br><span class="line"></span><br><span class="line"><span class="number">1425064108.02</span></span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; **<span class="built_in">round</span>(now, <span class="number">4</span>)**</span><br><span class="line"></span><br><span class="line"><span class="number">1425064108.0178</span></span><br><span class="line"></span><br><span class="line">\&gt;&gt;&gt; **<span class="built_in">round</span>(now)**</span><br><span class="line"></span><br><span class="line"><span class="number">1425064108</span></span><br></pre></td></tr></table></figure>



<h4 id="项目：超级秒表"><a href="#项目：超级秒表" class="headerlink" title="项目：超级秒表"></a>项目：超级秒表</h4><p>假设要记录在没有自动化的枯燥任务上花了多少时间。你没有物理秒表，要为笔记本或智能手机找到一个免费的秒表应用，没有广告，且不会将你的浏览历史发送给市场营销人员，又出乎意料地困难（在你同意的许可协议中，它说它可以这样做。你确实阅读了许可协议，不是吗？）。你可以自己用 Python 写一个简单的秒表程序。总的来说，你的程序需要完成：</p>
<p> 记录从按下回车键开始，每次按键的时间，每次按键都是一个新的“单圈”。</p>
<p> 打印圈数、总时间和单圈时间。</p>
<p>这意味着代码将需要完成以下任务：</p>
<p> 在程序开始时，通过调用 time.time()得到当前时间，将它保存为一个时间戳。</p>
<p>在每个单圈开始时也一样。</p>
<p> 记录圈数，每次用户按下回车键时加 1。 </p>
<p> 用时间戳相减，得到计算流逝的时间。</p>
<p> 处理 KeyboardInterrupt 异常，这样用户可以按 Ctrl-C 退出。</p>
<p>打开一个新的文件编辑器窗口，并保存为 stopwatch.py。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># stopwatch.py - A simple stopwatch program.</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="comment"># Display the program&#x27;s instructions.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Press ENTER to begin. Afterwards, press ENTER to &quot;click&quot; the stopwatch.Press Ctrl-C to quit.&#x27;</span>)</span><br><span class="line"><span class="built_in">input</span>() <span class="comment"># press Enter to begin</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Started.&#x27;</span>)</span><br><span class="line">startTime = time.time() <span class="comment"># get the first lap&#x27;s start time</span></span><br><span class="line">lastTime = startTime</span><br><span class="line">lapNum = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start tracking the lap times.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">        lapTime = <span class="built_in">round</span>(time.time() - lastTime, <span class="number">2</span>)</span><br><span class="line">        totalTime = <span class="built_in">round</span>(time.time() - startTime, <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Lap #%s: %s (%s)&#x27;</span> % (lapNum, totalTime, lapTime), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        lapNum += <span class="number">1</span></span><br><span class="line">        lastTime = time.time() <span class="comment"># reset the last lap time</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e, KeyboardInterrupt):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nDone.&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">###这里注意，如果直接抛错KeyboardInterrupt，则有其他异常，用基类异常包一下比较好。</span></span><br></pre></td></tr></table></figure>

<h4 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"> &gt;&gt;&gt; datetime.datetime.now()</span><br><span class="line"> datetime.datetime(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">27</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">49</span>, <span class="number">55</span>, <span class="number">53</span>)</span><br><span class="line"> &gt;&gt;&gt; dt = datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">29</span>, <span class="number">0</span>)</span><br><span class="line"> &gt;&gt;&gt; dt.year, dt.month, dt.day</span><br><span class="line">(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">21</span>)</span><br><span class="line"> &gt;&gt;&gt; dt.hour, dt.minute, dt.second</span><br><span class="line">(<span class="number">16</span>, <span class="number">29</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.fromtimestamp(<span class="number">1000000</span>)</span><br><span class="line">datetime.datetime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">46</span>, <span class="number">40</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.fromtimestamp(time.time())</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">27</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">604980</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>halloween2015 = datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"> &gt;&gt;&gt; newyears2016 = datetime.datetime(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct31_2015 = datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"> &gt;&gt;&gt; halloween2015 == oct31_2015</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> &gt;&gt;&gt; halloween2015 &gt; newyears2016</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"> &gt;&gt;&gt; newyears2016 &gt; halloween2015</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newyears2016 != oct31_2015</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###datetime 模块还提供了 timedelta 数据类型，它表示一段时间，而不是一个时刻</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>delta = datetime.timedelta(days=<span class="number">11</span>, hours=<span class="number">10</span>, minutes=<span class="number">9</span>, seconds=<span class="number">8</span>)</span><br><span class="line"> &gt;&gt;&gt; delta.days, delta.seconds, delta.microseconds</span><br><span class="line">(<span class="number">11</span>, <span class="number">36548</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>delta.total_seconds()</span><br><span class="line"><span class="number">986948.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(delta)</span><br><span class="line"><span class="string">&#x27;11 days, 10:09:08&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt = datetime.datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">38</span>, <span class="number">50</span>, <span class="number">636181</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thousandDays = datetime.timedelta(days=<span class="number">1000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt + thousandDays</span><br><span class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">18</span>, <span class="number">38</span>, <span class="number">50</span>, <span class="number">636181</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st = datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">29</span>, <span class="number">0</span>)</span><br><span class="line"> &gt;&gt;&gt; aboutThirtyYears = datetime.timedelta(days=<span class="number">365</span> * <span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">29</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st - aboutThirtyYears</span><br><span class="line">datetime.datetime(<span class="number">1985</span>, <span class="number">10</span>, <span class="number">28</span>, <span class="number">16</span>, <span class="number">29</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st - (<span class="number">2</span> * aboutThirtyYears)</span><br><span class="line">datetime.datetime(<span class="number">1955</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">29</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###暂停直至特定日期</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">halloween2016 = datetime.datetime(<span class="number">2016</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> datetime.datetime.now() &lt; halloween2016:</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### strftime()方法将 datetime 对象转换为字符串</span></span><br><span class="line"></span><br><span class="line">strftime 指令 含义</span><br><span class="line">%Y 带世纪的年份，例如<span class="string">&#x27;2014&#x27;</span></span><br><span class="line">%y 不带世纪的年份，<span class="string">&#x27;00&#x27;</span>至<span class="string">&#x27;99&#x27;</span>（<span class="number">1970</span> 至 <span class="number">2069</span>）</span><br><span class="line">%m 数字表示的月份, <span class="string">&#x27;01&#x27;</span>至<span class="string">&#x27;12&#x27;</span></span><br><span class="line">%B 完整的月份，例如<span class="string">&#x27;November&#x27;</span></span><br><span class="line">%b 简写的月份，例如<span class="string">&#x27;Nov&#x27;</span></span><br><span class="line">%d 一月中的第几天，<span class="string">&#x27;01&#x27;</span>至<span class="string">&#x27;31&#x27;</span></span><br><span class="line">%j 一年中的第几天，<span class="string">&#x27;001&#x27;</span>至<span class="string">&#x27;366&#x27;</span></span><br><span class="line">%w 一周中的第几天，<span class="string">&#x27;0&#x27;</span>（周日）至<span class="string">&#x27;6&#x27;</span>（周六）</span><br><span class="line">%A 完整的周几，例如<span class="string">&#x27;Monday&#x27;</span></span><br><span class="line">%a 简写的周几，例如<span class="string">&#x27;Mon&#x27;</span></span><br><span class="line">%H 小时（<span class="number">24</span> 小时时钟），<span class="string">&#x27;00&#x27;</span>至<span class="string">&#x27;23&#x27;</span></span><br><span class="line">%I 小时（<span class="number">12</span> 小时时钟），<span class="string">&#x27;01&#x27;</span>至<span class="string">&#x27;12&#x27;</span></span><br><span class="line">%M 分，<span class="string">&#x27;00&#x27;</span>至<span class="string">&#x27;59&#x27;</span></span><br><span class="line">%S 秒，<span class="string">&#x27;00&#x27;</span>至<span class="string">&#x27;59&#x27;</span></span><br><span class="line">%p <span class="string">&#x27;AM&#x27;</span>或<span class="string">&#x27;PM&#x27;</span></span><br><span class="line">%% 就是<span class="string">&#x27;%&#x27;</span>字符</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st = datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">29</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st.strftime(<span class="string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2015/10/21 16:29:00&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st.strftime(<span class="string">&#x27;%I:%M %p&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;04:29 PM&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct21st.strftime(<span class="string">&quot;%B of &#x27;%y&quot;</span>)</span><br><span class="line"><span class="string">&quot;October of &#x27;15&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.strptime(<span class="string">&#x27;October 21, 2015&#x27;</span>, <span class="string">&#x27;%B %d, %Y&#x27;</span>)</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.strptime(<span class="string">&#x27;2015/10/21 16:29:00&#x27;</span>, <span class="string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">16</span>, <span class="number">29</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.strptime(<span class="string">&quot;October of &#x27;15&quot;</span>, <span class="string">&quot;%B of &#x27;%y&quot;</span>)</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.datetime.strptime(<span class="string">&quot;November of &#x27;63&quot;</span>, <span class="string">&quot;%B of &#x27;%y&quot;</span>)</span><br><span class="line">datetime.datetime(<span class="number">2063</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>​    在 Python 中，日期和时间可能涉及好几种不同的数据类型和函数。下面回顾了</p>
<p>表示时间的 3 种不同类型的值：</p>
<p> Unix 纪元时间戳（time 模块中使用）是一个浮点值或整型值，表示自 1970 年 1 月 1 日午夜 0 点（UTC）以来的秒数。</p>
<p> datetime 对象（属于 datetime 模块）包含一些整型值，保存在 year、month、day、hour、minute 和 second 等属性中。</p>
<p> timedelta 对象（属于 datetime 模块）表示的一段时间，而不是一个特定的时刻。</p>
<p>下面回顾了时间函数及其参数和返回值：</p>
<p> time.time()函数返回一个浮点值，表示当前时刻的 Unix 纪元时间戳。</p>
<p> time.sleep(seconds)函数让程序暂停 seconds 参数指定的秒数。</p>
<p> datetime.datetime(year, month, day, hour, minute, second)函数返回参数指定的时刻的 datetime 对象。如果没有提供 hour、minute 或 second 参数，它们默认为 0。 </p>
<p> datetime.datetime.now()函数返回当前时刻的 datetime 对象。</p>
<p> datetime.datetime.fromtimestamp(epoch)函数返回 epoch 时间戳参数表示的时刻的 datetime 对象。</p>
<p> datetime.timedelta(weeks, days, hours, minutes, seconds, milliseconds, microseconds)函数返回一个表示一段时间的 timedelta 对象。该函数的关键字参数都是可选的，不包括 month 或 year。 </p>
<p> total_seconds()方法用于 timedelta 对象，返回 timedelta 对象表示的秒数。</p>
<p> strftime(format)方法返回一个字符串，用 format 字符串中的定制格式来表示datetime 对象表示的时间。详细格式参见表 15-1。 </p>
<p> datetime.datetime.strptime(time_string, format)函数返回一个 datetime 对象，它的时刻由 time_string 指定，利用 format 字符串参数来解析。</p>
<h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, datetime</span><br><span class="line">startTime = datetime.datetime(<span class="number">2029</span>, <span class="number">10</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> datetime.datetime.now() &lt; startTime:</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Program now starting on Halloween 2029&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Start of program.&#x27;</span>)</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">takeANap</span>():</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Wake up!&#x27;</span>)</span><br><span class="line"> threadObj = threading.Thread(target=takeANap)</span><br><span class="line"> threadObj.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;End of program.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###向线程的目标函数传递参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;Cats&#x27;</span>, <span class="string">&#x27;Dogs&#x27;</span>, <span class="string">&#x27;Frogs&#x27;</span>, sep=<span class="string">&#x27; &amp; &#x27;</span>)</span><br><span class="line">Cats &amp; Dogs &amp; Frogs</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> threading</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>threadObj = threading.Thread(target=<span class="built_in">print</span>, args=[<span class="string">&#x27;Cats&#x27;</span>, <span class="string">&#x27;Dogs&#x27;</span>, <span class="string">&#x27;Frogs&#x27;</span>],</span><br><span class="line">kwargs=&#123;<span class="string">&#x27;sep&#x27;</span>: <span class="string">&#x27; &amp; &#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>threadObj.start()</span><br><span class="line">Cats &amp; Dogs &amp; Frogs</span><br><span class="line"></span><br><span class="line">threadObj = threading.Thread(target=<span class="built_in">print</span>(<span class="string">&#x27;Cats&#x27;</span>, <span class="string">&#x27;Dogs&#x27;</span>, <span class="string">&#x27;Frogs&#x27;</span>, sep=<span class="string">&#x27; &amp; &#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>项目：多线程 XKCD 下载程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># multidownloadXkcd.py - Downloads XKCD comics using multiple threads.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, os, bs4, threading</span><br><span class="line">os.makedirs(<span class="string">&#x27;xkcd&#x27;</span>, exist_ok=<span class="literal">True</span>) <span class="comment"># store comics in ./xkcd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadXkcd</span>(<span class="params">startComic, endComic</span>):</span></span><br><span class="line">    <span class="keyword">for</span> urlNumber <span class="keyword">in</span> <span class="built_in">range</span>(startComic, endComic):</span><br><span class="line">        <span class="comment"># Download the page.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Downloading page http://xkcd.com/%s...&#x27;</span> % (urlNumber))</span><br><span class="line">        res = requests.get(<span class="string">&#x27;http://xkcd.com/%s&#x27;</span> % (urlNumber))</span><br><span class="line">        res.raise_for_status()</span><br><span class="line"></span><br><span class="line">        soup = bs4.BeautifulSoup(res.text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Find the URL of the comic image.</span></span><br><span class="line">        comicElem = soup.select(<span class="string">&#x27;#comic img&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> comicElem == []:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Could not find comic image.&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            comicUrl = comicElem[<span class="number">0</span>].get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">            <span class="comment"># Download the image.</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Downloading image %s...&#x27;</span> % (comicUrl))</span><br><span class="line">            res = requests.get(comicUrl)</span><br><span class="line">            res.raise_for_status()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Save the image to ./xkcd</span></span><br><span class="line">            imageFile = <span class="built_in">open</span>(os.path.join(<span class="string">&#x27;xkcd&#x27;</span>, os.path.basename(comicUrl)), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> res.iter_content(<span class="number">100000</span>):</span><br><span class="line">                imageFile.write(chunk)</span><br><span class="line">            imageFile.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create and start the Thread objects.</span></span><br><span class="line">downloadThreads = [] <span class="comment"># a list of all the Thread objects</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1400</span>, <span class="number">100</span>): <span class="comment"># loops 14 times, creates 14 threads</span></span><br><span class="line">    downloadThread = threading.Thread(target=downloadXkcd, args=(i, i + <span class="number">99</span>))</span><br><span class="line">    downloadThreads.append(downloadThread)</span><br><span class="line">    downloadThread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for all threads to end.</span></span><br><span class="line"><span class="keyword">for</span> downloadThread <span class="keyword">in</span> downloadThreads:</span><br><span class="line">    downloadThread.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done.&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h4 id="从-Python-启动其他程序"><a href="#从-Python-启动其他程序" class="headerlink" title="从 Python 启动其他程序"></a>从 Python 启动其他程序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.Popen(<span class="string">&#x27;C:\\Windows\\System32\\calc.exe&#x27;</span>)</span><br><span class="line">&lt;subprocess.Popen <span class="built_in">object</span> at <span class="number">0x0000000003055A58</span>&gt;&gt;&gt;&gt; <span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.Popen(<span class="string">&#x27;C:\\Windows\\System32\\calc.exe&#x27;</span>)</span><br><span class="line">&lt;subprocess.Popen <span class="built_in">object</span> at <span class="number">0x0000000003055A58</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.Popen(<span class="string">&#x27;/usr/bin/gnome-calculator&#x27;</span>)</span><br><span class="line">&lt;subprocess.Popen <span class="built_in">object</span> at <span class="number">0x7f2bcf93b20</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calcProc = subprocess.Popen(<span class="string">&#x27;c:\\Windows\\System32\\calc.exe&#x27;</span>)</span><br><span class="line"> &gt;&gt;&gt; calcProc.poll() == <span class="literal">None</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> &gt;&gt;&gt; calcProc.wait()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calcProc.poll()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.Popen([<span class="string">&#x27;C:\\Windows\\notepad.exe&#x27;</span>, <span class="string">&#x27;C:\\hello.txt&#x27;</span>])</span><br><span class="line">&lt;subprocess.Popen <span class="built_in">object</span> at <span class="number">0x00000000032DCEB8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">###运行其他 Python 脚本</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.Popen([<span class="string">&#x27;C:\\python34\\python.exe&#x27;</span>, <span class="string">&#x27;hello.py&#x27;</span>])</span><br><span class="line">&lt;subprocess.Popen <span class="built_in">object</span> at <span class="number">0x000000000331CF28</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">###用默认的应用程序打开文件用默认的应用程序打开文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fileObj = <span class="built_in">open</span>(<span class="string">&#x27;hello.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fileObj.write(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fileObj.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>subprocess.Popen([<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;hello.txt&#x27;</span>], shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>如果你精通计算机，可能知道 Windows 上的 Task Scheduler，OS X 上的launchd，或 Linux 上的 cron 调度程序。这些工具文档齐全，而且可靠，它们都允许</p>
<p>你安排应用程序在特定的时间启动。如果想更多地了解它们，可以在 <a href="http://nostarch.com/automatestuff/%E6%89%BE%E5%88%B0%E6%95%99%E7%A8%8B%E7%9A%84%E9%93%BE%E6%8E%A5%E3%80%82">http://nostarch.com/automatestuff/找到教程的链接。</a></p>
<h4 id="项目：简单的倒计时程序"><a href="#项目：简单的倒计时程序" class="headerlink" title="项目：简单的倒计时程序"></a>项目：简单的倒计时程序</h4><p>就像很难找到一个简单的秒表应用程序一样，也很难找到一个简单的倒计时程</p>
<p>序。让我们来写一个倒计时程序，在倒计时结束时报警。</p>
<p>总的来说，程序要做到：</p>
<p> 从 60 倒数。</p>
<p> 倒数至 0 时播放声音文件（alarm.wav）。</p>
<p>这意味着代码将需要做到以下几点：</p>
<p> 在显示倒计时的每个数字之间，调用 time.sleep()暂停一秒。</p>
<p> 调用 subprocess.Popen()，用默认的应用程序播放声音文件。</p>
<p>打开一个新的文件编辑器窗口，并保存为 countdown.py。就像很难找到一个简单的秒表应用程序一样，也很难找到一个简单的倒计时程</p>
<p>序。让我们来写一个倒计时程序，在倒计时结束时报警。</p>
<p>总的来说，程序要做到：</p>
<p> 从 60 倒数。</p>
<p> 倒数至 0 时播放声音文件（alarm.wav）。</p>
<p>这意味着代码将需要做到以下几点：</p>
<p> 在显示倒计时的每个数字之间，调用 time.sleep()暂停一秒。</p>
<p> 调用 subprocess.Popen()，用默认的应用程序播放声音文件。</p>
<p>打开一个新的文件编辑器窗口，并保存为 countdown.py。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># countdown.py - A simple countdown script.</span></span><br><span class="line"><span class="keyword">import</span> time, subprocess</span><br><span class="line">timeLeft = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> timeLeft &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(timeLeft, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    timeLeft = timeLeft - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># At the end of the countdown, play a sound file.</span></span><br><span class="line">subprocess.Popen([<span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;alarm.wav&#x27;</span>], shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>写个人博客的主体思路-usopp</title>
    <url>/2021/11/24/%E5%86%99%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%BB%E4%BD%93%E6%80%9D%E8%B7%AF-usopp/</url>
    <content><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>使用github page作为自己的博客网站，写任意内容都行，关键在持续输出。</li>
</ul>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>搭建、整理自己的个人知识体系。</li>
<li>养成习惯，克服惰性，记录此时此刻的想法，锻炼自己的笔力。培养自己持续做一件事情的能力。</li>
<li>写作输出倒逼输入。</li>
</ul>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>项目类的，则尽量自己实际从头到尾做一遍，记录过程即可。<br>编程知识类的，如果自己不懂，则不要瞎写误人子弟。<br>哲学、文学、历史、小说、影视、剧集、音乐等等感兴趣的，看心情，随便写。<br>其他想法，也可以记录。</p>
<p>参考选题：</p>
<ul>
<li>自我感悟或思考；</li>
<li>图文故事；</li>
<li>知识分享；</li>
<li>好文章总结；</li>
<li>歌曲、书籍和电影推荐，注明推荐理由；</li>
<li>写作技巧积累；</li>
<li>知乎搜一下有意思的话题；</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>不要流水账。</li>
<li>追求质量，务实。</li>
<li>无需吹嘘自己，也没必要讨好别人。</li>
<li>分享自己的所思所想，经验总结。</li>
</ul>
]]></content>
      <categories>
        <category>思路</category>
      </categories>
      <tags>
        <tag>usopp</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>发送和接收电子邮件</title>
    <url>/2022/02/21/%E5%8F%91%E9%80%81%E5%92%8C%E6%8E%A5%E6%94%B6%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="发送和接收电子邮件"><a href="#发送和接收电子邮件" class="headerlink" title="发送和接收电子邮件"></a>发送和接收电子邮件</h3><h4 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h4><p>正如 HTTP 是计算机用来通过因特网发送网页的协议，简单邮件传输协议（SMTP）是用于发送电子邮件的协议。SMTP 规定电子邮件应该如何格式化、加密、在邮件服务器之间传递，以及在你点击发送后，计算机要处理的所有其他细节。但是，你并不需要知道这些技术细节，因为 Python 的 smtplib 模块将它们简化成几个函数。</p>
<p>SMTP 只负责向别人发送电子邮件。另一个协议，名为 IMAP，负责取回发送给你的电子邮件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line">smtpObj = smtplib.SMTP()</span><br><span class="line">smtpObj.connect(<span class="string">&quot;smtp.126.com&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;得到 SMTP 对象后，调用它的名字古怪的 EHLO()方法，向 SMTP 电子邮件服</span></span><br><span class="line"><span class="string">务器“打招呼”。这种问候是 SMTP 中的第一步，对于建立到服务器的连接是很重</span></span><br><span class="line"><span class="string">要的。你不需要知道这些协议的细节。只要确保得到 SMTP 对象后，第一件事就是</span></span><br><span class="line"><span class="string">调用 ehlo()方法，否则以后的方法调用会导致错误&#x27;&#x27;&#x27;</span></span><br><span class="line">smtpObj.ehlo()</span><br><span class="line"></span><br><span class="line">smtpObj.login(<span class="string">&#x27;emptymiss@126.com&#x27;</span>, <span class="string">&#x27;MDTFMYZKLYOCDGFR&#x27;</span>)</span><br><span class="line"></span><br><span class="line">msg = MIMEText(<span class="string">&#x27;Subject: Solong.\nDear Alice, so long and thanks for all the fish. Sincerely, Bob&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&quot;python+selenium 自动化测试报告&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">msg[<span class="string">&#x27;from&#x27;</span>] = <span class="string">&#x27;emptymiss@126.com&#x27;</span></span><br><span class="line">msg[<span class="string">&#x27;to&#x27;</span>] = <span class="string">&#x27;305030951@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line">smtpObj.sendmail(<span class="string">&#x27;emptymiss@126.com&#x27;</span>, <span class="string">&#x27;305030951@qq.com&#x27;</span>, msg.as_string())</span><br><span class="line"></span><br><span class="line">smtpObj.quit()</span><br></pre></td></tr></table></figure>



<h4 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h4><p>正如 SMTP 是用于发送电子邮件的协议，因特网消息访问协议（IMAP）规定了如何与电子邮件服务提供商的服务器通信，取回发送到你的电子邮件地址的电子邮件。Python 带有一个 imaplib 模块，但实际上第三方的 imapclient 模块更易用。本章介绍了如何使用 IMAPClient，完整的文档在 <a href="http://imapclient.readthedocs.org/%E3%80%82">http://imapclient.readthedocs.org/。</a></p>
<p>imapclient 模块从 IMAP 服务器下载电子邮件，格式相当复杂。你很可能希望将它们从这种格式转换成简单的字符串。pyzmail 模块替你完成解析这些邮件的辛</p>
<p>苦工作。在 <a href="http://www.magiksys.net/pyzmail/%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0">http://www.magiksys.net/pyzmail/可以找到</a> PyzMail 的完整文档。</p>
<p>从终端窗口安装 imapclient 和 pyzmail。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imaplib</span><br><span class="line"><span class="keyword">import</span> imapclient</span><br><span class="line">imaplib._MAXLINE = <span class="number">10000000000000</span></span><br><span class="line">imapObj = imapclient.IMAPClient(<span class="string">&#x27;imap.126.com&#x27;</span>, ssl=<span class="literal">True</span>)</span><br><span class="line">imapObj.login(<span class="string">&#x27;emptymiss@126.com&#x27;</span>, <span class="string">&#x27;MDTFMYZKLYOCDGFR&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加缺失的命令</span></span><br><span class="line">imaplib.Commands[<span class="string">&#x27;ID&#x27;</span>] = (<span class="string">&#x27;AUTH&#x27;</span>)</span><br><span class="line">imapObj.id_(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;IMAPClient&quot;</span>, <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.1.0&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line">pprint.pprint(imapObj.list_folders())</span><br><span class="line">imapObj.select_folder(<span class="string">&#x27;已发送&#x27;</span>)</span><br><span class="line"></span><br><span class="line">UIDs = imapObj.search(<span class="string">&#x27;ALL&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">UIDs</span><br><span class="line"><span class="comment">###[1636892061, 1636892062]</span></span><br><span class="line">rawMessages = imapObj.fetch([<span class="number">1636892061</span>], [<span class="string">&#x27;BODY[]&#x27;</span>, <span class="string">&#x27;FLAGS&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">###pyzmail模块导入失败，此部分未验证</span></span><br><span class="line"><span class="comment"># import pyzmail</span></span><br><span class="line"><span class="comment"># message = pyzmail.PyzMessage.factory(rawMessages[1636892061][&#x27;BODY[]&#x27;])</span></span><br><span class="line"><span class="comment"># message.get_subject()</span></span><br><span class="line"><span class="comment"># message.get_addresses(&#x27;from&#x27;)</span></span><br><span class="line"><span class="comment"># message.get_addresses(&#x27;to&#x27;)</span></span><br><span class="line"><span class="comment"># message.get_addresses(&#x27;cc&#x27;)</span></span><br><span class="line"><span class="comment"># message.get_addresses(&#x27;bcc&#x27;)</span></span><br><span class="line"><span class="comment"># message.text_part != None</span></span><br><span class="line"><span class="comment"># message.text_part.get_payload().decode(message.text_part.charset)</span></span><br><span class="line"><span class="comment"># message.html_part != None</span></span><br><span class="line"><span class="comment"># message.html_part.get_payload().decode(message.html_part.charset)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###删除对应的已发送邮件</span></span><br><span class="line">imapObj.delete_messages([<span class="number">1636892061</span>])</span><br><span class="line">imapObj.expunge()</span><br><span class="line"></span><br><span class="line">imapObj.logout()</span><br></pre></td></tr></table></figure>

<h4 id="项目：向会员发送会费提醒电子邮件"><a href="#项目：向会员发送会费提醒电子邮件" class="headerlink" title="项目：向会员发送会费提醒电子邮件"></a>项目：向会员发送会费提醒电子邮件</h4><p>假定你一直“自愿”为“强制自愿俱乐部”记录会员会费。这确实是一项枯燥的工作，包括维护一个电子表格，记录每个月谁交了会费，并用电子邮件提醒那些</p>
<p>没交的会员。不必你自己查看电子表格，而是向会费超期的会员复制和粘贴相同的电子邮件。你猜对了，让我们编写一个脚本，帮你完成任务。</p>
<p>在较高的层面上，下面是程序要做的事：</p>
<p> 从 Excel 电子表格中读取数据。</p>
<p> 找出上个月没有交费的所有会员。</p>
<p> 找到他们的电子邮件地址，向他们发送针对个人的提醒。</p>
<p>这意味着代码需要做到以下几点：</p>
<p> 用 openpyxl 模块打开并读取 Excel 文档的单元格（处理 Excel 文件参见第 12 章）。</p>
<p> 创建一个字典，包含会费超期的会员。</p>
<p> 调用 smtplib.SMTP()、ehlo()、starttls()和 login()，登录 SMTP 服务器。</p>
<p> 针对会费超期的所有会员，调用 sendmail()方法，发送针对个人的电子邮件提醒。</p>
<p>打开一个新的文件编辑器窗口，并保存为 sendDuesReminders.py。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># sendDuesReminders.py - Sends emails based on their status in spreadsheet.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl, smtplib, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open the spreadsheet and get the latest dues status.</span></span><br><span class="line">wb = openpyxl.load_workbook(<span class="string">&#x27;duesRecords.xlsx&#x27;</span>)</span><br><span class="line">sheet = wb.get_sheet_by_name(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">lastCol = sheet.get_highest_column()</span><br><span class="line">latestMonth = sheet.cell(row=<span class="number">1</span>, column=lastCol).value</span><br><span class="line"></span><br><span class="line">unpaidMembers = &#123;&#125;</span><br><span class="line"><span class="comment"># Check each member&#x27;s payment status</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, sheet.get_highest_row() + <span class="number">1</span>):</span><br><span class="line">    payment = sheet.cell(row=r, column=lastCol).value</span><br><span class="line">    <span class="keyword">if</span> payment != <span class="string">&#x27;paid&#x27;</span>:</span><br><span class="line">        name = sheet.cell(row=r, column=<span class="number">1</span>).value</span><br><span class="line">        email = sheet.cell(row=r, column=<span class="number">2</span>).value</span><br><span class="line">        unpaidMembers[name] = email</span><br><span class="line"></span><br><span class="line"><span class="comment"># Log in to email account.</span></span><br><span class="line">smtpObj = smtplib.SMTP(<span class="string">&#x27;smtp.gmail.com&#x27;</span>, <span class="number">587</span>)</span><br><span class="line">smtpObj.ehlo()</span><br><span class="line">smtpObj.starttls()</span><br><span class="line">smtpObj.login(<span class="string">&#x27;my_email_address@gmail.com&#x27;</span>, sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send out reminder emails.</span></span><br><span class="line"><span class="keyword">for</span> name, email <span class="keyword">in</span> unpaidMembers.items():</span><br><span class="line">    body = <span class="string">&#x27;Subject: %s dues unpaid.\nDear %s,\nRecords show that you have not paid dues for %s. Please make this payment as soon as possible. Thank you!&#x27;</span> % (latestMonth, name, latestMonth)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Sending email to %s...&#x27;</span> % email)</span><br><span class="line">    sendmailStatus = smtpObj.sendmail(<span class="string">&#x27;my_email_address@gmail.com&#x27;</span>, email, body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sendmailStatus != &#123;&#125;:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;There was a problem sending email to %s: %s&#x27;</span> % (email, sendmailStatus))</span><br><span class="line">smtpObj.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>处理CSV文件和JSON数据</title>
    <url>/2022/02/21/%E5%A4%84%E7%90%86CSV%E6%96%87%E4%BB%B6%E5%92%8CJSON%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h3 id="处理CSV文件和JSON数据"><a href="#处理CSV文件和JSON数据" class="headerlink" title="处理CSV文件和JSON数据"></a>处理CSV文件和JSON数据</h3><h4 id="CSV模块"><a href="#CSV模块" class="headerlink" title="CSV模块"></a>CSV模块</h4><p>csv文件中：</p>
<p>• 值没有类型，所有东西都是字符串；</p>
<p>• 没有字体大小或颜色的设置；</p>
<p>• 没有多个工作表；</p>
<p>• 不能指定单元格的宽度和高度；</p>
<p>• 不能合并单元格；</p>
<p>• 不能嵌入图像或图表</p>
<h4 id="Reader对象"><a href="#Reader对象" class="headerlink" title="Reader对象"></a>Reader对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> &gt;&gt;&gt; <span class="keyword">import</span> csv</span><br><span class="line"> &gt;&gt;&gt; exampleFile = <span class="built_in">open</span>(<span class="string">&#x27;example.csv&#x27;</span>)</span><br><span class="line"> &gt;&gt;&gt; exampleReader = csv.reader(exampleFile)</span><br><span class="line"> &gt;&gt;&gt; exampleData = <span class="built_in">list</span>(exampleReader)</span><br><span class="line"> &gt;&gt;&gt; exampleData</span><br><span class="line">[[<span class="string">&#x27;4/5/2015 13:34&#x27;</span>, <span class="string">&#x27;Apples&#x27;</span>, <span class="string">&#x27;73&#x27;</span>], [<span class="string">&#x27;4/5/2015 3:41&#x27;</span>, <span class="string">&#x27;Cherries&#x27;</span>, <span class="string">&#x27;85&#x27;</span>],</span><br><span class="line">[<span class="string">&#x27;4/6/2015 12:46&#x27;</span>, <span class="string">&#x27;Pears&#x27;</span>, <span class="string">&#x27;14&#x27;</span>], [<span class="string">&#x27;4/8/2015 8:59&#x27;</span>, <span class="string">&#x27;Oranges&#x27;</span>, <span class="string">&#x27;52&#x27;</span>],</span><br><span class="line">[<span class="string">&#x27;4/10/2015 2:07&#x27;</span>, <span class="string">&#x27;Apples&#x27;</span>, <span class="string">&#x27;152&#x27;</span>], [<span class="string">&#x27;4/10/2015 18:10&#x27;</span>, <span class="string">&#x27;Bananas&#x27;</span>, <span class="string">&#x27;23&#x27;</span>],</span><br><span class="line">[<span class="string">&#x27;4/10/2015 2:40&#x27;</span>, <span class="string">&#x27;Strawberries&#x27;</span>, <span class="string">&#x27;98&#x27;</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleData[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="string">&#x27;4/5/2015 13:34&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleData[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;Apples&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleData[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line"><span class="string">&#x27;73&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleData[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;Cherries&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleData[<span class="number">6</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;Strawberries&#x27;</span></span><br></pre></td></tr></table></figure>



<h4 id="在-for-循环中，从-Reader-对象读取数据"><a href="#在-for-循环中，从-Reader-对象读取数据" class="headerlink" title="在 for 循环中，从 Reader 对象读取数据"></a>在 for 循环中，从 Reader 对象读取数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleFile = <span class="built_in">open</span>(<span class="string">&#x27;example.csv&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exampleReader = csv.reader(exampleFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> exampleReader:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Row #&#x27;</span> + <span class="built_in">str</span>(exampleReader.line_num) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(row))</span><br><span class="line">Row <span class="comment">#1 [&#x27;4/5/2015 13:34&#x27;, &#x27;Apples&#x27;, &#x27;73&#x27;]</span></span><br><span class="line">Row <span class="comment">#2 [&#x27;4/5/2015 3:41&#x27;, &#x27;Cherries&#x27;, &#x27;85&#x27;]</span></span><br><span class="line">Row <span class="comment">#3 [&#x27;4/6/2015 12:46&#x27;, &#x27;Pears&#x27;, &#x27;14&#x27;]</span></span><br><span class="line">Row <span class="comment">#4 [&#x27;4/8/2015 8:59&#x27;, &#x27;Oranges&#x27;, &#x27;52&#x27;]</span></span><br><span class="line">Row <span class="comment">#5 [&#x27;4/10/2015 2:07&#x27;, &#x27;Apples&#x27;, &#x27;152&#x27;]</span></span><br><span class="line">Row <span class="comment">#6 [&#x27;4/10/2015 18:10&#x27;, &#x27;Bananas&#x27;, &#x27;23&#x27;]</span></span><br><span class="line">Row <span class="comment">#7 [&#x27;4/10/2015 2:40&#x27;, &#x27;Strawberries&#x27;, &#x27;98&#x27;]</span></span><br></pre></td></tr></table></figure>



<h4 id="Writer-对象"><a href="#Writer-对象" class="headerlink" title="Writer 对象"></a>Writer 对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv</span><br><span class="line"> &gt;&gt;&gt; outputFile = <span class="built_in">open</span>(<span class="string">&#x27;output.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> &gt;&gt;&gt; outputWriter = csv.writer(outputFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outputWriter.writerow([<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outputWriter.writerow([<span class="string">&#x27;Hello, world!&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outputWriter.writerow([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.141592</span>, <span class="number">4</span>])</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outputFile.close()</span><br><span class="line"></span><br><span class="line">spam,eggs,bacon,ham</span><br><span class="line"><span class="string">&quot;Hello, world!&quot;</span>,eggs,bacon,ham</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3.141592</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure>



<h4 id="delimiter-和-lineterminator-关键字参数"><a href="#delimiter-和-lineterminator-关键字参数" class="headerlink" title="delimiter 和 lineterminator 关键字参数"></a>delimiter 和 lineterminator 关键字参数</h4><p>分别设置行分隔符和换行符。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>csvFile = <span class="built_in">open</span>(<span class="string">&#x27;example.tsv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> &gt;&gt;&gt; csvWriter = csv.writer(csvFile, delimiter=<span class="string">&#x27;\t&#x27;</span>, lineterminator=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>csvWriter.writerow([<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>, <span class="string">&#x27;grapes&#x27;</span>])</span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>csvWriter.writerow([<span class="string">&#x27;eggs&#x27;</span>, <span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;ham&#x27;</span>])</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>csvWriter.writerow([<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;spam&#x27;</span>])</span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>csvFile.close()</span><br><span class="line"></span><br><span class="line">apples oranges grapes</span><br><span class="line">eggs bacon ham</span><br><span class="line">spam spam spam spam spam spam</span><br></pre></td></tr></table></figure>



<h4 id="项目：从-CSV-文件中删除表头"><a href="#项目：从-CSV-文件中删除表头" class="headerlink" title="项目：从 CSV 文件中删除表头"></a>项目：从 CSV 文件中删除表头</h4><p>假设你有一个枯燥的任务，要删除几百CSV 文件的第一行。也许你会将它们送入一</p>
<p>个自动化的过程，只需要数据，不需要每列顶部的表头。可以在Excel 中打开每个文件，</p>
<p>删除第一行，并重新保存该文件，但这需要几个小时。让我们写一个程序来做这件事。</p>
<p>该程序需要打开当前工作目录中所有扩展名为.csv 的文件，读取 CSV 文件的内</p>
<p>容，并除掉第一行的内容重新写入同名的文件。这将用新的、无表头的内容替换</p>
<p>CSV 文件的旧内容。</p>
<p>总的来说，该程序必须做到以下几点：</p>
<p>• 找出当前工作目录中的所有 CSV 文件。</p>
<p>• 读取每个文件的全部内容。</p>
<p>• 跳过第一行，将内容写入一个新的 CSV 文件。</p>
<p>在代码层面上，这意味着该程序需要做到以下几点：</p>
<p>• 循环遍历从 os.listdir()得到的文件列表，跳过非 CSV 文件。</p>
<p>• 创建一个 CSV Reader 对象，读取该文件的内容，利用 line_num 属性确定要跳</p>
<p>过哪一行。</p>
<p>• 创建一个 CSV Writer 对象，将读入的数据写入新文件。</p>
<p>针对这个项目，打开一个新的文件编辑器窗口，并保存为 removeCsvHeader.py。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv, os</span><br><span class="line"></span><br><span class="line"><span class="comment">###os.makedirs() 方法用于递归创建目录。</span></span><br><span class="line"><span class="comment">###如果子目录创建失败或者已经存在，会抛出一个 OSError 的异常，Windows上Error 183 即为目录已经存在的异常错误。</span></span><br><span class="line"><span class="comment">###如果第一个参数 path 只有一级，则 mkdir() 函数相同。</span></span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">&#x27;HeaderRemoved&#x27;</span>,<span class="number">0o777</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###循环当前目录，查找csv文件，如果是，则进入</span></span><br><span class="line"><span class="comment">###os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</span></span><br><span class="line"><span class="keyword">for</span> csvFilename <span class="keyword">in</span> os.listdir(<span class="string">r&#x27;.\\removeCsvHeader&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> csvFilename.endswith(<span class="string">&#x27;.csv&#x27;</span>):</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment">#skip non-csv file</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Removing header from &#x27;</span> + csvFilename + <span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">    <span class="comment">### 开始读取文件，删除第一行的内容</span></span><br><span class="line">    csvcontent = []</span><br><span class="line">    csvFileObj = <span class="built_in">open</span>(<span class="string">r&#x27;.\\removeCsvHeader\\&#x27;</span> + csvFilename)</span><br><span class="line">    readerObj = csv.reader(csvFileObj)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> readerObj:</span><br><span class="line">        <span class="keyword">if</span> readerObj.line_num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        csvcontent.append(row)</span><br><span class="line">    csvFileObj.close()</span><br><span class="line">    <span class="comment">###开始写入文件</span></span><br><span class="line">    csvFileObj2 = <span class="built_in">open</span>(os.path.join(<span class="string">r&#x27;HeaderRemoved&#x27;</span>,csvFilename), <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    csvWriter = csv.writer(csvFileObj2)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csvcontent:</span><br><span class="line">        csvWriter.writerow(row)</span><br><span class="line">    csvFileObj2.close()</span><br></pre></td></tr></table></figure>



<h4 id="JSON-和-API"><a href="#JSON-和-API" class="headerlink" title="JSON 和 API"></a>JSON 和 API</h4><p>下面是 JSON 格式数据的一个例子：</p>
<p>{“name”: “Zophie”, “isCat”: true,</p>
<p>“miceCaught”: 0, “napsTaken”: 37.5,</p>
<p>“felineIQ”: null}</p>
<h4 id="用-loads-函数读取-JSON"><a href="#用-loads-函数读取-JSON" class="headerlink" title="用 loads()函数读取 JSON"></a>用 loads()函数读取 JSON</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stringOfJsonData = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Zophie&quot;, &quot;isCat&quot;: true, &quot;miceCaught&quot;: 0,</span></span><br><span class="line"><span class="string">&quot;felineIQ&quot;: null&#125;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jsonDataAsPythonValue = json.loads(stringOfJsonData)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jsonDataAsPythonValue</span><br><span class="line">&#123;<span class="string">&#x27;isCat&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;miceCaught&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Zophie&#x27;</span>, <span class="string">&#x27;felineIQ&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用-dumps-函数写出-JSON"><a href="#用-dumps-函数写出-JSON" class="headerlink" title="用 dumps 函数写出 JSON"></a>用 dumps 函数写出 JSON</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythonValue = &#123;<span class="string">&#x27;isCat&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;miceCaught&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Zophie&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;felineIQ&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stringOfJsonData = json.dumps(pythonValue)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stringOfJsonData</span><br><span class="line"><span class="string">&#x27;&#123;&quot;isCat&quot;: true, &quot;felineIQ&quot;: null, &quot;miceCaught&quot;: 0, &quot;name&quot;: &quot;Zophie&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="项目：取得当前的天气数据"><a href="#项目：取得当前的天气数据" class="headerlink" title="项目：取得当前的天气数据"></a>项目：取得当前的天气数据</h4><p>检查天气似乎相当简单：打开 Web 浏览器，点击地址栏，输入天气网站的 URL</p>
<p>（或搜索一个，然后点击链接），等待页面加载，跳过所有的广告等。</p>
<p>其实，如果有一个程序，下载今后几天的天气预报，并以纯文本打印出来，就可</p>
<p>以跳过很多无聊的步骤。该程序利用第 11 章介绍的 requests 模块，从网站下载数据。</p>
<p>总的来说，该程序将执行以下操作：</p>
<p>• 从命令行读取请求的位置。</p>
<p>• 从 OpenWeatherMap.org 下载 JSON 天气数据。</p>
<p>• 将 JSON 数据字符串转换成 Python 的数据结构。</p>
<p>• 打印今天和未来两天的天气。</p>
<p>因此，代码需要完成以下任务：</p>
<p>• 连接 sys.argv 中的字符串，得到位置。</p>
<p>• 调用 requests.get()，下载天气数据。</p>
<p>• 调用 json.loads()，将 JSON 数据转换为 Python 数据结构。</p>
<p>• 打印天气预报。</p>
<p>针对这个项目，打开一个新的文件编辑器窗口，并保存为 quickWeather.py。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests, sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Usage:quickWeather.py location&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">location = <span class="string">&#x27;&#x27;</span>.join(sys.argv[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">### download weather info</span></span><br><span class="line"><span class="comment">### http://api.openweathermap.org/data/2.5/forecast/daily?q=San Francisco, CA&amp;cnt=3</span></span><br><span class="line"><span class="comment">### api.openweathermap.org/data/2.5/weather?q=&#123;city name&#125;&amp;appid=&#123;API key&#125;</span></span><br><span class="line">url =<span class="string">&#x27;http://api.openweathermap.org/data/2.5/forecast/daily?q=%s&amp;cnt=3&#x27;</span> % (location)</span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.raise_for_status()</span><br><span class="line"></span><br><span class="line"><span class="comment">### load json data into python variable</span></span><br><span class="line"><span class="comment">### 这里打印一下响应的内容是啥</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line">weatherDate = json.loads(response.text)</span><br><span class="line">w = weatherDate[<span class="string">&#x27;list&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;current weather info in %s:&#x27;</span>%(location))</span><br><span class="line"><span class="built_in">print</span>(w[<span class="number">0</span>][<span class="string">&#x27;weather&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;main&#x27;</span>], <span class="string">&#x27;-&#x27;</span>, w[<span class="number">0</span>][<span class="string">&#x27;weather&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;description&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Tomorrow:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(w[<span class="number">1</span>][<span class="string">&#x27;weather&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;main&#x27;</span>], <span class="string">&#x27;-&#x27;</span>, w[<span class="number">1</span>][<span class="string">&#x27;weather&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;description&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Day after Tomorrow:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(w[<span class="number">2</span>][<span class="string">&#x27;weather&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;main&#x27;</span>], <span class="string">&#x27;-&#x27;</span>, w[<span class="number">2</span>][<span class="string">&#x27;weather&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;description&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="国内数据参考"><a href="#国内数据参考" class="headerlink" title="国内数据参考"></a>国内数据参考</h4><p><a href="https://www.sdk.cn/details/5Oo4L8VEexlEbVMrWv?s=api">https://www.sdk.cn/details/5Oo4L8VEexlEbVMrWv?s=api</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> request</span><br><span class="line"><span class="keyword">import</span> urllib.error <span class="keyword">as</span> error</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 天气预报查询示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    api_url = <span class="string">&#x27;http://apis.juhe.cn/simpleWeather/query&#x27;</span></span><br><span class="line">    params_dict = &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: <span class="string">&quot;北京&quot;</span>,  <span class="comment"># 查询天气的城市名称，如：北京、苏州、上海</span></span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;xxxxxxxx&quot;</span>,  <span class="comment"># 您申请的接口API接口请求Key</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">### Python urllib 库用于操作网页 URL，并对网页的内容进行抓取处理。</span></span><br><span class="line">    <span class="comment">### urllib 包 包含以下几个模块：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### urllib.request - 打开和读取 URL。</span></span><br><span class="line">	<span class="comment">### urllib.error - 包含 urllib.request 抛出的异常。</span></span><br><span class="line">	<span class="comment">### urllib.parse - 解析 URL。</span></span><br><span class="line">	<span class="comment">### urllib.robotparser - 解析 robots.txt 文件。</span></span><br><span class="line">    params = urllib.parse.urlencode(params_dict)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">###通过url + params 获取需要查看的城市天气，同时有加密处理。</span></span><br><span class="line">        req = request.Request(api_url, params.encode())</span><br><span class="line">        response = request.urlopen(req)</span><br><span class="line">        content = response.read()</span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                result = json.loads(content)</span><br><span class="line">                error_code = result[<span class="string">&#x27;error_code&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> (error_code == <span class="number">0</span>):</span><br><span class="line">                    temperature = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;realtime&#x27;</span>][<span class="string">&#x27;temperature&#x27;</span>]</span><br><span class="line">                    humidity = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;realtime&#x27;</span>][<span class="string">&#x27;humidity&#x27;</span>]</span><br><span class="line">                    info = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;realtime&#x27;</span>][<span class="string">&#x27;info&#x27;</span>]</span><br><span class="line">                    wid = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;realtime&#x27;</span>][<span class="string">&#x27;wid&#x27;</span>]</span><br><span class="line">                    direct = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;realtime&#x27;</span>][<span class="string">&#x27;direct&#x27;</span>]</span><br><span class="line">                    power = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;realtime&#x27;</span>][<span class="string">&#x27;power&#x27;</span>]</span><br><span class="line">                    aqi = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;realtime&#x27;</span>][<span class="string">&#x27;aqi&#x27;</span>]</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;温度：%s\n湿度：%s\n天气：%s\n天气标识：%s\n风向：%s\n风力：%s\n空气质量：%s&quot;</span> % (</span><br><span class="line">                        temperature, humidity, info, wid, direct, power, aqi))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;请求失败:%s %s&quot;</span> % (result[<span class="string">&#x27;error_code&#x27;</span>], result[<span class="string">&#x27;reason&#x27;</span>]))</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;解析结果异常：%s&quot;</span> % e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 可能网络异常等问题，无法获取返回内容，请求异常</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请求异常&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">    <span class="keyword">except</span> error.URLError <span class="keyword">as</span> err:</span><br><span class="line">        <span class="comment"># 其他异常</span></span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>处理PDF和Word文档</title>
    <url>/2022/01/18/%E5%A4%84%E7%90%86PDF%E5%92%8CWord%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="处理PDF和Word文档"><a href="#处理PDF和Word文档" class="headerlink" title="处理PDF和Word文档"></a>处理PDF和Word文档</h3><p>安装模块pip install PyPDF2</p>
<h4 id="PDF文档的相关操作"><a href="#PDF文档的相关操作" class="headerlink" title="PDF文档的相关操作"></a>PDF文档的相关操作</h4><ul>
<li><p>从 PDF 提取文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfFileObj = <span class="built_in">open</span>(<span class="string">&#x27;meetingminutes.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;meetingminutes.pdf&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfFileObj = <span class="built_in">open</span>(<span class="string">&#x27;meetingminutes.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> pdfReader = PyPDF2.PdfFileReader(pdfFileObj)</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)</span><br><span class="line">IndentationError: unexpected indent</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfReader = PyPDF2.PdfFileReader(pdfFileObj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfReader.numPages</span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pageObj = pdfReader.getPage(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pageObj.extractText()</span><br><span class="line"><span class="string">&#x27;OOFFFFIICCIIAALL  BBOOAARRDD  MMIINNUUTTEESS   Meeting of \nMarch 7\n, 2014\n        \n     The Board of Elementary and Secondary Education shall provide leadership and \ncreate policies for education that expand opportunities for chi</span></span><br><span class="line"><span class="string">ldren, empower \nfamilies and communities, and advance Louisiana in an increasingly \ncompetitive glob\nal market.\n BOARD \n of ELEMENTARY\n and \n SECONDARY\n EDUCATION\n  &#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>解密PDF,比如已经用口令rosebud加密了，则使用对应口令解密即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfReader = PyPDF2.PdfFileReader(<span class="built_in">open</span>(<span class="string">&#x27;encrypted.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line"> &gt;&gt;&gt; pdfReader.isEncrypted</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfReader.getPage(<span class="number">0</span>)</span><br><span class="line"> Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;pyshell#173&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">pdfReader.getPage()</span><br><span class="line">--snip--</span><br><span class="line">File <span class="string">&quot;C:\Python34\lib\site-packages\PyPDF2\pdf.py&quot;</span>, line <span class="number">1173</span>, <span class="keyword">in</span> getObject</span><br><span class="line"><span class="keyword">raise</span> utils.PdfReadError(<span class="string">&quot;file has not been decrypted&quot;</span>)</span><br><span class="line">PyPDF2.utils.PdfReadError: file has <span class="keyword">not</span> been decrypted</span><br><span class="line"> &gt;&gt;&gt; pdfReader.decrypt(<span class="string">&#x27;rosebud&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pageObj = pdfReader.getPage(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>创建PDF</p>
<p>1．打开一个或多个已有的 PDF（源 PDF），得到 PdfFileReader 对象。</p>
<p>2．创建一个新的 PdfFileWriter 对象。</p>
<p>3．将页面从 PdfFileReader 对象拷贝到 PdfFileWriter 对象中。</p>
<p>4．最后，利用 PdfFileWriter 对象写入输出的 PDF。</p>
</li>
<li><p>拷贝页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdf1File = <span class="built_in">open</span>(<span class="string">&#x27;meetingminutes.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdf2File = <span class="built_in">open</span>(<span class="string">&#x27;meetingminutes2.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdf1Reader = PyPDF2.PdfFileReader(pdf1File)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdf2Reader = PyPDF2.PdfFileReader(pdf2File)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter = PyPDF2.PdfFileWriter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(pdf1Reader.numPages):</span><br><span class="line">		pageObj = pdf1Reader.getPage(pageNum)</span><br><span class="line">		pdfWriter.addPage(pageObj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(pdf2Reader.numPages):</span><br><span class="line">		pageObj = pdf2Reader.getPage(pageNum)</span><br><span class="line">		pdfWriter.addPage(pageObj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfOutputFile = <span class="built_in">open</span>(<span class="string">&#x27;combinedminutes.pdf&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter.write(pdfOutputFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfOutputFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdf1File.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdf2File.close()</span><br></pre></td></tr></table></figure></li>
<li><p>旋转页面</p>
<p>利用 rotateClockwise()和 rotateCounterClockwise()方法，PDF 文档的页面也可以</p>
<p>旋转 90 度的整数倍。向这些方法传入整数 90、180 或 270 就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>minutesFile = <span class="built_in">open</span>(<span class="string">&#x27;meetingminutes.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfReader = PyPDF2.PdfFileReader(minutesFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page = pdfReader.getPage(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page.rotateClockwise(<span class="number">90</span>)</span><br><span class="line">&#123;<span class="string">&#x27;/Contents&#x27;</span>: [IndirectObject(<span class="number">961</span>, <span class="number">0</span>), IndirectObject(<span class="number">962</span>, <span class="number">0</span>),</span><br><span class="line">--snip--</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter = PyPDF2.PdfFileWriter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter.addPage(page)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resultPdfFile = <span class="built_in">open</span>(<span class="string">&#x27;rotatedPage.pdf&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter.write(resultPdfFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resultPdfFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>minutesFile.close()</span><br></pre></td></tr></table></figure></li>
<li><p>叠加页面，使用mergePage()方法添加水印。使用addPage方法往后添加PDF页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>minutesFile = <span class="built_in">open</span>(<span class="string">&#x27;meetingminutes.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfReader = PyPDF2.PdfFileReader(minutesFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>minutesFirstPage = pdfReader.getPage(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWatermarkReader = PyPDF2.PdfFileReader(<span class="built_in">open</span>(<span class="string">&#x27;watermark.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>minutesFirstPage.mergePage(pdfWatermarkReader.getPage(<span class="number">0</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter = PyPDF2.PdfFileWriter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter.addPage(minutesFirstPage)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pdfReader.numPages):</span><br><span class="line">		pageObj = pdfReader.getPage(pageNum)</span><br><span class="line">		pdfWriter.addPage(pageObj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resultPdfFile = <span class="built_in">open</span>(<span class="string">&#x27;watermarkedCover.pdf&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter.write(resultPdfFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>minutesFile.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resultPdfFile.close()</span><br></pre></td></tr></table></figure></li>
<li><p>加密PDF文件,加密时同样使用加密口令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> PyPDF2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfFile = <span class="built_in">open</span>(<span class="string">&#x27;meetingminutes.pdf&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfReader = PyPDF2.PdfFileReader(pdfFile)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter = PyPDF2.PdfFileWriter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(pdfReader.numPages):</span><br><span class="line">		pdfWriter.addPage(pdfReader.getPage(pageNum))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter.encrypt(<span class="string">&#x27;swordfish&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resultPdf = <span class="built_in">open</span>(<span class="string">&#x27;encryptedminutes.pdf&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pdfWriter.write(resultPdf)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resultPdf.close()</span><br></pre></td></tr></table></figure>

<h4 id="项目：从多个PDF中合并选择的页面"><a href="#项目：从多个PDF中合并选择的页面" class="headerlink" title="项目：从多个PDF中合并选择的页面"></a>项目：从多个PDF中合并选择的页面</h4><p>假定你有一个很无聊的任务，需要将几十个 PDF 文件合并成一个 PDF 文件。每一个文件都有一个封面作为第一页，但你不希望合并后的文件中重复出现这些封面。即使有许多免费的程序可以合并 PDF，很多也只是简单的将文件合并在一起。让我们来写一个 Python 程序，定制需要合并到 PDF 中的页面。</p>
<p>总的来说，该程序需要完成：</p>
<p> 找到当前工作目录中所有 PDF 文件。</p>
<p> 按文件名排序，这样就能有序地添加这些 PDF。 </p>
<p> 除了第一页之外，将每个 PDF 的所有页面写入输出的文件。</p>
<p>从实现的角度来看，代码需要完成下列任务：</p>
<p> 调用 os.listdir()，找到当前工作目录中的所有文件，去除掉非 PDF 文件。</p>
<p> 调用 Python 的 sort()列表方法，对文件名按字母排序。</p>
<p> 为输出的 PDF 文件创建 PdfFileWriter 对象。</p>
<p> 循环遍历每个 PDF 文件，为它创建 PdfFileReader 对象。</p>
<p> 针对每个 PDF 文件，循环遍历每一页，第一页除外。</p>
<p> 将页面添加到输出的 PDF。 </p>
<p> 将输出的 PDF 写入一个文件，名为 <em>allminutes.pdf</em>。</p>
<p>针对这个项目，打开一个新的文件编辑器窗口，将它保存为 combinePdfs.py。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># combinePdfs.py - Combines all the PDFs in the current working directory into</span></span><br><span class="line"><span class="comment"># a single PDF.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PyPDF2, os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all the PDF filenames.</span></span><br><span class="line">file_names = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">r&quot;D:\pythontest\autowork\venv&quot;</span>):</span><br><span class="line">    <span class="comment"># 获取filename的后缀，使用的是endswith</span></span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.pdf&#x27;</span>):</span><br><span class="line">        file_names.append(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到的文件名，按照字典顺序排序</span></span><br><span class="line">file_names.sort(key=<span class="built_in">str</span>.lower)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建PdfFileWriter对象,这里方法名后有括号</span></span><br><span class="line">pdfWriter = PyPDF2.PdfFileWriter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环pdf对象，获取reader对象</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> file_names:</span><br><span class="line">    pdfFileObj = <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    pdfReader =  PyPDF2.PdfFileReader(pdfFileObj)</span><br><span class="line">    <span class="comment">#在pdfWriter中添加打开的pdf内容，从第二页开始</span></span><br><span class="line">    <span class="keyword">for</span> pageNum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pdfReader.numPages):</span><br><span class="line">        pageObj = pdfReader.getPage(pageNum)</span><br><span class="line">        pdfWriter.addPage(pageObj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存结果，关闭文件</span></span><br><span class="line">pdfOutput = <span class="built_in">open</span>(<span class="string">&#x27;allminutestest.pdf&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pdfWriter.write(pdfOutput)</span><br><span class="line">pdfOutput.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Word文档"><a href="#Word文档" class="headerlink" title="Word文档"></a>Word文档</h4><p>在最高一层，Document 对象表示整个文档。Document 对象包含一个 Paragraph 对象的列表，表示文档中的段落（用户在 Word 文档中输入时，如</p>
<p>果按下回车，新的段落就开始了）。每个 Paragraph 对象都包含一个 Run 对象的列表。————Word文档组织方式</p>
<p><strong>pip install python-docx</strong></p>
<ul>
<li><p>读取 Word 文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> docx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = docx.Document(<span class="string">&#x27;demo.docx&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(doc.paragraphs)</span><br><span class="line"><span class="number">7</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">0</span>].text</span><br><span class="line"><span class="string">&#x27;Document Title&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].text</span><br><span class="line"><span class="string">&#x27;A plain paragraph with some bold and some italic&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(doc.paragraphs[<span class="number">1</span>].runs)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].runs[<span class="number">0</span>].text</span><br><span class="line"><span class="string">&#x27;A plain paragraph with some &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].runs[<span class="number">1</span>].text</span><br><span class="line"><span class="string">&#x27;bold&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].runs[<span class="number">2</span>].text</span><br><span class="line"><span class="string">&#x27; and some &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].runs[<span class="number">3</span>].text</span><br><span class="line"><span class="string">&#x27;italic&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>从.docx 文件中取得完整的文本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment">### readDocx.py：</span></span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getText</span>(<span class="params">filename</span>):</span></span><br><span class="line">doc = docx.Document(filename)</span><br><span class="line">fullText = []</span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> doc.paragraphs:</span><br><span class="line">fullText.append(para.text)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;\n&#x27;</span>.join(fullText)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> readDocx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(readDocx.getText(<span class="string">&#x27;demo.docx&#x27;</span>))</span><br><span class="line">Document Title</span><br><span class="line">A plain paragraph <span class="keyword">with</span> some bold <span class="keyword">and</span> some italic</span><br><span class="line">Heading, level <span class="number">1</span></span><br><span class="line">Intense quote</span><br><span class="line">first item <span class="keyword">in</span> unordered <span class="built_in">list</span></span><br><span class="line">first item <span class="keyword">in</span> ordered <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<p>注意添加缩进：</p>
<p>fullText.append(<strong>‘ ‘ +</strong> para.text)</p>
<p>添加空行：</p>
<p>return ‘\n<strong>\n</strong>‘.join(fullText)</p>
</li>
<li><p>设置 Paragraph 和 Run 对象的样式</p>
<p>对于 Word 文档，有 3 种类型的样式：段落样式可以应用于 Paragraph 对象，字</p>
<p>符样式可以应用于 Run 对象，链接的样式可以应用于这两种对象。可以将 Paragraph 和</p>
<p>Run 对象的 style 属性设置为一个字符串，从而设置样式。这个字符串应该是一种样</p>
<p>式的名称。如果 style 被设置为 None，就没有样式与 Paragraph 或 Run 对象关联。</p>
</li>
<li><p>创建带有非默认样式的 Word 文档</p>
<p>打开“Creat New Style from Formatting”对话框，在这里可以输入新样式。</p>
<p>然后，回到交互式环境，用 docx.Document()打开这个空白 Word 文档，利用它作为</p>
<p>Word 文档的基础。这种样式的名称现在就可以被 python-docx 使用了。</p>
</li>
<li><p>Run 属性</p>
<p>bold </p>
<p>文本以粗体出现</p>
<p>italic </p>
<p>文本以斜体出现</p>
<p>underline </p>
<p>文本带下划线</p>
<p>strike </p>
<p>文本带删除线</p>
<p>double_strike </p>
<p>文本带双删除线</p>
<p>all_caps </p>
<p>文本以大写首字母出现</p>
<p>small_caps </p>
<p>文本以大写首字母出现，小写字母小两个点</p>
<p>shadow </p>
<p>文本带阴影</p>
<p>outline </p>
<p>文本以轮廓线出现，而不是实心</p>
<p>rtl </p>
<p>文本从右至左书写</p>
<p>imprint </p>
<p>文本以刻入页面的方式出现</p>
<p>emboss </p>
<p>文本以凸出页面的方式出现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = docx.Document(<span class="string">&#x27;demo.docx&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">0</span>].text</span><br><span class="line"><span class="string">&#x27;Document Title&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">0</span>].style</span><br><span class="line"><span class="string">&#x27;Title&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">0</span>].style = <span class="string">&#x27;Normal&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].text</span><br><span class="line"><span class="string">&#x27;A plain paragraph with some bold and some italic&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(doc.paragraphs[<span class="number">1</span>].runs[<span class="number">0</span>].text, doc.paragraphs[<span class="number">1</span>].runs[<span class="number">1</span>].text, doc.</span><br><span class="line">paragraphs[<span class="number">1</span>].runs[<span class="number">2</span>].text, doc.paragraphs[<span class="number">1</span>].runs[<span class="number">3</span>].text)</span><br><span class="line">(<span class="string">&#x27;A plain paragraph with some &#x27;</span>, <span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27; and some &#x27;</span>, <span class="string">&#x27;italic&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].runs[<span class="number">0</span>].style = <span class="string">&#x27;QuoteChar&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].runs[<span class="number">1</span>].underline = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">1</span>].runs[<span class="number">3</span>].underline = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.save(<span class="string">&#x27;restyled.docx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>写入 Word 文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> docx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = docx.Document()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_paragraph(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x0000000003B56F60</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.save(<span class="string">&#x27;helloworld.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> docx</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = docx.Document()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_paragraph(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x000000000366AD30</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>paraObj1 = doc.add_paragraph(<span class="string">&#x27;This is a second paragraph.&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>paraObj2 = doc.add_paragraph(<span class="string">&#x27;This is a yet another paragraph.&#x27;</span>)</span><br><span class="line"><span class="comment">###add_run方法在已有段落后添加文字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>paraObj1.add_run(<span class="string">&#x27; This text is being added to the second paragraph.&#x27;</span>)</span><br><span class="line">&lt;docx.text.Run <span class="built_in">object</span> at <span class="number">0x0000000003A2C860</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.save(<span class="string">&#x27;multipleParagraphs.docx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>add_paragraph()和 add_run()都接受可选的第二个参数，它是表示 Paragraph 或Run 对象样式的字符串。</p>
</li>
</ul>
<p>​    如 <strong>doc.add</strong>**_****paragraph(‘Hello world!’, ‘Title’)**，样式就是Title</p>
<ul>
<li><p>添加标题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = docx.Document()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_heading(<span class="string">&#x27;Header 0&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x00000000036CB3C8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_heading(<span class="string">&#x27;Header 1&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x00000000036CB630</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_heading(<span class="string">&#x27;Header 2&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x00000000036CB828</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_heading(<span class="string">&#x27;Header 3&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x00000000036CB2E8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_heading(<span class="string">&#x27;Header 4&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x00000000036CB3C8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.save(<span class="string">&#x27;headings.docx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>添加换行符和换页符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc = docx.Document()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_paragraph(<span class="string">&#x27;This is on the first page!&#x27;</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x0000000003785518</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.paragraphs[<span class="number">0</span>].runs[<span class="number">0</span>].add_break(docx.text.WD_BREAK.PAGE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_paragraph(<span class="string">&#x27;This is on the second page!&#x27;</span>)</span><br><span class="line">&lt;docx.text.Paragraph <span class="built_in">object</span> at <span class="number">0x00000000037855F8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.save(<span class="string">&#x27;twoPage.docx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>添加图像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.add_picture(<span class="string">&#x27;zophie.png&#x27;</span>, width=docx.shared.Inches(<span class="number">1</span>),</span><br><span class="line">height=docx.shared.Cm(<span class="number">4</span>))</span><br><span class="line">&lt;docx.shape.InlineShape <span class="built_in">object</span> at <span class="number">0x00000000036C7D30</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试进阶-UI自动化测试框架</title>
    <url>/2021/12/06/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%BF%9B%E9%98%B6-UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h3 id="Python-selenium实现自动化测试框架"><a href="#Python-selenium实现自动化测试框架" class="headerlink" title="Python+selenium实现自动化测试框架"></a>Python+selenium实现自动化测试框架</h3><ul>
<li><p>基于虫师《Selenium2自动化测试实战-基于Python语言》的学习笔记</p>
</li>
<li><p>自动化测试基础部分</p>
<p><strong>分层的自动化测试，从底往上一般分为</strong>：</p>
<ol>
<li><p>Unit（数据处理层），一般用白盒单元测试，CodeReview</p>
</li>
<li><p>Service（业务逻辑层），一般用模块接口测试或者Web接口测试</p>
</li>
<li><p>UI（UI界面层），一般用UI自动化测试或者JS自动化测试</p>
</li>
</ol>
<p><strong>什么样的项目适合自动化测试</strong>：</p>
<ol>
<li><p>软件需求变动不频繁</p>
</li>
<li><p>项目周期较长</p>
</li>
<li><p>自动化测试脚本可以重复使用</p>
</li>
</ol>
</li>
<li><p>其他基础</p>
<ol>
<li>Selenium工具</li>
<li>前端三件套，html+css+Js</li>
<li>Chrome浏览器的话，会用F12，定位元素，查看xpath之类</li>
<li>Python基础+selenium包下载安装+Pycharm使用等</li>
</ol>
</li>
</ul>
<ul>
<li><p>WebDriver API</p>
<ol>
<li><p>从定位元素开始，八大定位元素。</p>
<p>随便百度参考一个<a href="https://www.cnblogs.com/renshengruxi/p/12511654.html">selenium八大元素定位方法 </a></p>
<p>常用的就是id，name，css，xpath等定位方法。</p>
</li>
<li><p>其他操作，如控制浏览器大小，后退、前进、刷新页面、</p>
<p>元素操作，清除文本，按键输入，单击元素；接口操作表单提交；</p>
<p>鼠标事件：右击、悬停、双击、拖放等；</p>
<p><strong>常用验证信息：title，URL，和text；</strong></p>
<p>设置元素等待，显示等待，隐式等待（较为简单）。sleep 休眠；</p>
<p>定位一组元素，element改为elements；</p>
<p>多表单切换；多窗口切换；</p>
<p>警告框处理、上传下载文件；</p>
<p>操作cookies；调用JS，处理HTML5视频播放、窗口截图、关闭窗口、验证码处理等；</p>
</li>
</ol>
</li>
<li><p>常用自动化测试框架模型</p>
<ol>
<li>线性测试</li>
<li>模块化驱动测试</li>
<li>数据驱动测试（常用读取文件txt、csv、xml等）</li>
<li>关键字驱动测试</li>
</ol>
</li>
<li><p>Selenium IDE，可结合浏览器提供脚本录制、回放以及编辑等功能。</p>
</li>
<li><p>unittest单元测试框架</p>
<ol>
<li><p>提供用例组织和执行</p>
<p>setup（） + 用例 +teardown（）</p>
</li>
<li><p>提供丰富的比较方法</p>
</li>
<li><p>提供丰富的日志</p>
</li>
</ol>
</li>
<li><p>unittest中的几个概念理解</p>
<ol>
<li><p>test case 测试用例</p>
</li>
<li><p>test suite 多个用例的集合，可以组装test case，比如用addTest加载用例到testsuite中</p>
</li>
<li><p>test runner提供run（）方法来执行test case，test suite</p>
</li>
<li><p>test fixture对测试用例环境的搭建setup（）和销毁teardown（）</p>
</li>
<li><p>TestLoader类加载测试用例，可不需创建实例，因unittest提供了可以共享的defaultTestLoader类，</p>
<p>可以用其子类和方法来创建实例。常用discover方法。</p>
<p>discover(start_dir, pattern=’test*.py’, top_level_dir=None)</p>
<p>runner.run(discover)</p>
</li>
</ol>
</li>
<li><p><strong>断言方法</strong></p>
<p>断言,自动判断测试用例的测试结果是否成功：assert()<br>是预期结果和实际结果的比较，是继承了testcase的方法</p>
<p>方法    检查<br>assertEqual(a, b）    a == b<br>assertNotEqual(a, b）    a != b<br>assertTrue(x）    bool(x）is True<br>assertFalse(x）    bool(x）is False<br>assertIs(a, b）    a is b<br>assertIsNot(a, b）    a is not b<br>assertIsNone(x）    x is None<br>assertIsNotNone(x）    x is not None<br>assertIn(a, b）    a in b<br>assertNotIn(a, b）    a not in b<br>assertIsInstance(a, b）    isinstance(a, b）<br>assertNotIsInstance(a, b）    not isinstance(a, b）</p>
</li>
<li><p>HTMLTestRunner模块，生成HTML测试报告</p>
</li>
<li><p>Page Object设计模式</p>
<ol>
<li>po模型设计思想</li>
</ol>
<hr>
<p>　　Page Object 模式主要是将每个页面设计为一个class，其中包含页面中的需要测试的元素（按钮，输入框，标题等），这样在Selenium测试页面中可以通过调取页面类来获取页面元素，这样避免当页面元素id或者位置变化后，需要改测试代码。当元素ID变化时，只需要改测试页面Class中的页面属性即可。将页面定位与和业务分开，分离测试对象（元素对象）和测试脚本（用例脚本），提高可维护性。</p>
<p>　　Page Object模式是一种自动化测试设计模式，将页面定位和业务操作分开，分离测试对象（元素对象）和测试脚本（用例脚本），提高用例的可维护性。</p>
<pre><code>unittest是一种单元测试框架，用于设计各式各样的测试用例，可调用PageObject设计的页面类（对象），设计出更加可维护的用例。它提供用例组织与执行，提供丰富的比较（断言）方法，提供丰富的日志，统一适用于web自动化用例的开发与执行。
</code></pre>
<p>　　UI自动化最核心的问题定位是，跟业务层解耦出来，单独处理定位的问题，然后在实现业务层。所使用到的方法是对一个UI页面做测试我们抽取为三层，举例为BasePage+LoginPage+Unittest。 　</p>
<p>　　后续示例中，PO模型的基本思路：login_page(查找页面元素类) —&gt;login_handle(操作层，将查找到的元素位置上传递数据) —&gt; login_business(业务层：调用操作层，根据操作层的传递的结果进行判断场景，如邮箱错误场景等) —&gt; first_case(封装调用业务层，进行测试用例的场景组装)</p>
<ol start="2">
<li>po模型之如何设计操作层</li>
</ol>
<hr>
<p>查找页面元素类：把定位页面元素的方法都封装在相应的一个相应页面中，此页面的元素定位方式都可以在这个文件中找到</p>
<p>操作层：编写注册过程中需要的方法，比如输入用户名、密码等页面操作,工具类-保存页面操作的所有方法。</p>
<p>业务层：把操作层组装起来</p>
<p>查找页面元素类：loginPage.py</p>
<p>操作层：loginrHandle.py</p>
<p>业务层：loginbusiness.py</p>
<p>下面以126邮箱web登录页面为例展示编写PO模型</p>
<ol start="3">
<li>定位页面元素类</li>
</ol>
<hr>
<p> 示例代码：loginPage.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位页面元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver = webdriver.Chrome()</span><br><span class="line">        self.driver.get(<span class="string">&#x27;https://www.126.com/&#x27;</span>)</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line">        self.driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">        <span class="comment"># 切换到表单中</span></span><br><span class="line">        self.driver.switch_to.frame(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定位邮箱输入框</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_email_element</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element_by_css_selector(<span class="string">&#x27;input[name=&quot;email&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定位密码输入框</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_password_element</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element_by_css_selector(<span class="string">&#x27;input[name=&quot;password&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义 登录 按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_loginbutton_element</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element_by_id(<span class="string">&#x27;dologin&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>操作层</li>
</ol>
<hr>
<p> 示例代码：loginrHandle.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#操作层</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">loginHandle</span>(<span class="params">LoginPage</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        LoginPage.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输入邮箱</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_user_email</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.get_email_element().send_keys(<span class="string">&#x27;Augus&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输入密码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_user_password</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.get_password_element().send_keys(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#点击登录按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click_loginbutton</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.get_loginbutton_element().click()</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>业务层</li>
</ol>
<hr>
<p>示例代码：loginbusiness.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#业务层</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginBusiness</span>(<span class="params">loginHandle</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        loginHandle.__init__(self)</span><br><span class="line">    <span class="comment">#登录功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_case</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.send_user_email()</span><br><span class="line">        self.send_user_password()</span><br><span class="line">        self.click_loginbutton()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = LoginBusiness()</span><br><span class="line">    l.login_case()</span><br></pre></td></tr></table></figure></li>
<li><p>BBS项目实战：</p>
<p>目录</p>
<p><img src="%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%BF%9B%E9%98%B6-UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/mztestpro.png" alt="mztestpro"></p>
</li>
</ul>
<p>关键脚本:</p>
<ol>
<li><p>编写公共模块,driver.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># from selenium.webdriver import Remote</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动浏览器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">browser</span>():</span></span><br><span class="line">    option = webdriver.ChromeOptions()  <span class="comment"># 加载浏览器配置</span></span><br><span class="line">    option.add_argument(<span class="string">&#x27;disable-infobars&#x27;</span>)  <span class="comment"># 浏览器不显示受自动测试软件控制</span></span><br><span class="line">    option.add_argument(<span class="string">&#x27;-kiosk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    driver = webdriver.Chrome(chrome_options=option)</span><br><span class="line">    <span class="comment"># host = &quot;127.0.0.1:4444&quot;</span></span><br><span class="line">    <span class="comment"># dc = &#123;&#x27;browserName&#x27;:&#x27;chrome&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># driver = Remote(command_executor =&#x27;http://&#x27; + host + &#x27;/wd/hub&#x27; ,desired_capabilities=dc)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 本地启动一个主hub和一个node节点（主机端口4444，node节点5555）的方法,本机ip172.16.10.66</span></span><br><span class="line">    <span class="comment"># java -jar selenium-server-standalone-2.48.2.jar -role hub</span></span><br><span class="line">    <span class="comment"># java -jar selenium-server-standalone-2.48.2.jar -role node port 5555</span></span><br><span class="line">    <span class="comment"># 启动一个远程node ，如172.16.10.34:6666</span></span><br><span class="line">    <span class="comment"># java -jar selenium-server-standalone-2.48.2.jar -role node port 6666 -hub http://172.16.10.66:4444/grid/register</span></span><br><span class="line">    <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(__file__)</span><br><span class="line">    dr = browser()</span><br><span class="line">    dr.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">    dr.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>自定义测试框架myunit.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> .driver <span class="keyword">import</span> browser</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.driver = browser()</span><br><span class="line">		self.driver.implicitly_wait(<span class="number">30</span>)</span><br><span class="line">		self.driver.maximize_window()</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>定义截图功能funtion.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#截屏</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_img</span>(<span class="params">driver,file_name</span>):</span></span><br><span class="line">	base_dir = os.path.dirname(os.path.dirname(__file__))</span><br><span class="line">	<span class="comment">#base_dir = str(base_dir)</span></span><br><span class="line">	base_dir = base_dir.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">	base_dir = base_dir.split(<span class="string">&#x27;/test_case&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">	file_path = base_dir + <span class="string">&quot;/report/image/&quot;</span> + file_name</span><br><span class="line">	driver.get_screenshot_as_file(file_path)</span><br><span class="line">	</span><br><span class="line"><span class="comment"># #获取最新的测试报告，用于发送测试报告邮件</span></span><br><span class="line"><span class="comment"># def new_report(file_path):</span></span><br><span class="line"><span class="comment"># 	files = os.listdir(file_path)</span></span><br><span class="line"><span class="comment"># 	f_times = []</span></span><br><span class="line"><span class="comment"># 	for f in files:</span></span><br><span class="line"><span class="comment"># 		if os.path.splitext(file_path + f)[1] == &#x27;.html&#x27;:</span></span><br><span class="line"><span class="comment"># 			f_time = os.path.getmtime(file_path + f)</span></span><br><span class="line"><span class="comment"># 			f_times.append((f_time, f))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 	return sorted(f_times)[-1][1]</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	sys.path.append(<span class="string">&quot;D:\pythontest\mztestpro\mztestpro-master\bbs\test_case\models&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(sys.path)</span><br><span class="line">	<span class="keyword">import</span> driver</span><br><span class="line">	driver = driver.browser()</span><br><span class="line">	driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">	insert_img(driver,<span class="string">&quot;baidu.png&quot;</span>)</span><br><span class="line">	driver.quit()</span><br></pre></td></tr></table></figure></li>
<li><p>编写pageObject，page基础类base.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    基础页面，供所有的页面对象继承</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># bbs_url = &quot;http://10.200.12.8:8099&quot;</span></span><br><span class="line">    <span class="comment"># bbs_url = &quot;https://bbs.meizu.cn&quot;</span></span><br><span class="line">    bbs_url = <span class="string">&quot;http://www.broadview.com.cn/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, selenium_driver, base_url=bbs_url, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.base_url = base_url</span><br><span class="line">        self.driver = selenium_driver</span><br><span class="line">        self.timeout = <span class="number">30</span></span><br><span class="line">        self.parent = parent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_open</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        url = self.base_url + url</span><br><span class="line">        self.driver.get(url)</span><br><span class="line">        <span class="comment"># 这里初始化会判断当前页的ip，然后打印出来，如果不一致则会报错</span></span><br><span class="line">        <span class="keyword">assert</span> self.on_page(), <span class="string">&#x27;Did not land on %s&#x27;</span> % url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_page</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前登录页ip：%s&#x27;</span> % self.driver.current_url)</span><br><span class="line">        <span class="keyword">return</span> self.driver.current_url == (self.base_url + self.url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._<span class="built_in">open</span>(self.url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">script</span>(<span class="params">self, src</span>):</span></span><br><span class="line">        self.driver.execute_script(src)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_element</span>(<span class="params">self, *loc</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_element(*loc)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_elements</span>(<span class="params">self, *loc</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.find_elements(*loc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取弹出框内的文案</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alert_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.driver.switch_to_alert()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>创建BBS对象登录类loginPage.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.remote.webelement <span class="keyword">import</span> WebElement</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> Page</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep, time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">Page</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用户登录页面</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># url = &#x27;/baobeipc/html/login.html&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># bbs_login_user_loc = (By.XPATH,&quot;.//*[@id=&#x27;mzCust&#x27;]/div/div[1]/img[1]&quot;)</span></span><br><span class="line">    <span class="comment"># bbs_login_button_loc = (By.ID,&quot;mzLogin&quot;)</span></span><br><span class="line">    <span class="comment"># /html/body/div/div[2]/div/div/div/div/div/a[2]</span></span><br><span class="line">    bbs_login_button_loc = (By.XPATH, <span class="string">&#x27;/html/body/div/div[2]/div/div/div/div/div/a[2]&#x27;</span>)</span><br><span class="line">    <span class="comment"># bbs_login_button_loc = (By.XPATH, &#x27;//*[@id=&quot;loginLink&quot;]&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标悬停</span></span><br><span class="line">    <span class="comment"># def hover(self, by, value):</span></span><br><span class="line">    <span class="comment">#     element = self.findbyElement(by, value)</span></span><br><span class="line">    <span class="comment">#     ActionChains(self.driver).move_to_element(element).perform()</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># # ## 通过不同的方式查找界面元素</span></span><br><span class="line">    <span class="comment"># def findbyElement(self, by, value):</span></span><br><span class="line">    <span class="comment">#     if (by == &quot;id&quot;):</span></span><br><span class="line">    <span class="comment">#         element = self.driver.find_element_by_id(value)</span></span><br><span class="line">    <span class="comment">#         return element</span></span><br><span class="line">    <span class="comment">#     elif (by == &quot;name&quot;):</span></span><br><span class="line">    <span class="comment">#         element = self.driver.find_element_by_name(value)</span></span><br><span class="line">    <span class="comment">#         return element</span></span><br><span class="line">    <span class="comment">#     elif (by == &quot;XPATH&quot;):</span></span><br><span class="line">    <span class="comment">#         element = self.driver.find_element_by_xpath(value)</span></span><br><span class="line">    <span class="comment">#         return element</span></span><br><span class="line">    <span class="comment">#     elif (by == &quot;classname&quot;):</span></span><br><span class="line">    <span class="comment">#         element = self.driver.find_element_by_class_name(value)</span></span><br><span class="line">    <span class="comment">#         return element</span></span><br><span class="line">    <span class="comment">#     elif (by == &quot;css&quot;):</span></span><br><span class="line">    <span class="comment">#         element = self.driver.find_element_by_css_selector(value)</span></span><br><span class="line">    <span class="comment">#         return element</span></span><br><span class="line">    <span class="comment">#     elif (by == &quot;link_text&quot;):</span></span><br><span class="line">    <span class="comment">#         element = self.driver.find_element_by_link_text(value)</span></span><br><span class="line">    <span class="comment">#         return element</span></span><br><span class="line">    <span class="comment">#     else:</span></span><br><span class="line">    <span class="comment">#         print(&quot;无对应方法，请检查&quot;)</span></span><br><span class="line">    <span class="comment">#         return None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bbs_login</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.find_element(*self.bbs_login_button_loc).click()</span><br><span class="line">        <span class="comment">#self.find_element(*self.bbs_login_user_loc).click()</span></span><br><span class="line">        <span class="comment"># 获取登录头像，获取后移动到弹窗，然后点击登录</span></span><br><span class="line">        <span class="comment"># above = self.find_element(*self.bbs_my_link_loc)</span></span><br><span class="line">        <span class="comment"># ActionChains(self.driver).move_to_element(above).perform()</span></span><br><span class="line">        <span class="comment"># element = self.find_element(*self.bbs_login_button_loc)</span></span><br><span class="line">        <span class="comment"># print(&quot;---------找到登录按钮----------&quot; + element.get_attribute(id))</span></span><br><span class="line">        <span class="comment"># self.find_element(*self.bbs_my_link_loc).click()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># //*[@id=&quot;loginLink&quot;]</span></span><br><span class="line">        <span class="comment"># self.hover(by=&#x27;XPATH&#x27;, value=&#x27;//*[@id=&quot;loginLink&quot;]&#x27;)</span></span><br><span class="line">        <span class="comment"># loginbutton = self.driver.findElement(by=&#x27;XPATH&#x27;, value=&#x27;//*[@id=&quot;loginLink&quot;]&#x27;)</span></span><br><span class="line">        <span class="comment"># print(&quot;---------loginbutton----------&quot; + loginbutton)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># if loginbutton != None:</span></span><br><span class="line">        <span class="comment">#     self.assertEqual(1, 1)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     self.assertEqual(1, 0)</span></span><br><span class="line">        <span class="comment">#     time.sleep(3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># login_username_loc = (By.CSS_SELECTOR,&quot;ipt-account inp-focus&quot;)</span></span><br><span class="line">    <span class="comment"># login_password_loc = (By.CSS_SELECTOR,&quot;inp-focus&quot;)</span></span><br><span class="line">    <span class="comment"># login_button_loc = (By.CLASS_NAME,&quot;tipInfo&quot;)</span></span><br><span class="line"></span><br><span class="line">    login_username_loc = (By.XPATH, <span class="string">&#x27;//*[@id=&quot;Email&quot;]&#x27;</span>)</span><br><span class="line">    login_password_loc = (By.XPATH, <span class="string">&#x27;//*[@id=&quot;Password&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment"># /html/body/div/div[3]/div/div/div/div/div/div[1]/form/div[5]/button</span></span><br><span class="line">    login_button_loc = (By.XPATH, <span class="string">&quot;/html/body/div/div[3]/div/div/div/div/div/div[1]/form/div[5]/button&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登陆用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_username</span>(<span class="params">self,username</span>):</span></span><br><span class="line">        self.find_element(*self.login_username_loc).clear()</span><br><span class="line">        self.find_element(*self.login_username_loc).send_keys(username)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登录密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_password</span>(<span class="params">self,password</span>):</span></span><br><span class="line">        self.find_element(*self.login_password_loc).clear()</span><br><span class="line">        self.find_element(*self.login_password_loc).send_keys(password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#登录按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_botton</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.find_element(*self.login_button_loc).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义统一的登录入口</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user_login</span>(<span class="params">self,username=<span class="string">&quot;username&quot;</span>,password=<span class="string">&quot;1111&quot;</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取的用户名登录&quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">open</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------base open验证完毕----------&quot;</span> )</span><br><span class="line">        self.bbs_login()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------bbs login验证完毕----------&quot;</span> )</span><br><span class="line">        self.login_username(username)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名 验证完毕----------&quot;</span> )</span><br><span class="line">        self.login_password(password)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------密码 验证完毕----------&quot;</span> )</span><br><span class="line">        self.login_botton()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------点击登录按钮 验证完毕----------&quot;</span> )</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># #登录断言</span></span><br><span class="line">    <span class="comment"># username_erro_loc = (By.XPATH,&quot;//span[@for=&#x27;account&#x27;]&quot;)</span></span><br><span class="line">    <span class="comment"># password_erro_loc = (By.XPATH,&quot;//span[@for=&#x27;password&#x27;]&quot;)</span></span><br><span class="line">    user_login_sucess_loc = (By.XPATH, <span class="string">&quot;/html/body/div/div[2]/div/div/div/div[1]/div/a[1]&quot;</span>)</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># #用户名错误</span></span><br><span class="line">    <span class="comment"># def username_erro(self):</span></span><br><span class="line">    <span class="comment">#     return self.find_element(*self.username_erro_loc).text</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># #密码错误</span></span><br><span class="line">    <span class="comment"># def password_erro(self):</span></span><br><span class="line">    <span class="comment">#     return self.find_element(*self.password_erro_loc).text</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#登录成功</span></span><br><span class="line">    <span class="comment"># def user_login_success(self):</span></span><br><span class="line">    <span class="comment">#     return self.find_element(*self.user_login_sucess_loc).text</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>编写测试用例login_sta.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> unittest, sys, random</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&quot;./models&quot;</span>)</span><br><span class="line">sys.path.append(<span class="string">&quot;./page_obj&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> myunit, function</span><br><span class="line"><span class="keyword">from</span> page_obj.loginPage <span class="keyword">import</span> Login</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginTest</span>(<span class="params">myunit.MyTest</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;社区登录&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试用户登录</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user_login_verify</span>(<span class="params">self, username=<span class="string">&quot;&quot;</span>, password=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">        Login(self.driver).user_login(username, password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;用户名和密码都为空&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码开始验证----------&quot;</span> )</span><br><span class="line">        self.user_login_verify()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码验证完成----------&quot;</span> )</span><br><span class="line">        po = Login(self.driver)</span><br><span class="line">        <span class="comment"># alert = po.alert_info()</span></span><br><span class="line">        <span class="comment"># print(alert)</span></span><br><span class="line">        <span class="comment"># username_mes = alert.text</span></span><br><span class="line">        username_mes = po.find_element(By.ID, <span class="string">&quot;Email-error&quot;</span>).text</span><br><span class="line">        <span class="built_in">print</span>(username_mes)</span><br><span class="line">        self.assertEqual(username_mes, <span class="string">&#x27;请输入邮箱&#x27;</span>)</span><br><span class="line">        <span class="comment"># alert.accept()</span></span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        function.insert_img(self.driver, <span class="string">&#x27;username_pass_kong.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#     &#x27;&#x27;&#x27;用户名正确，密码为空&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码开始验证2----------&quot;</span> )</span><br><span class="line">        self.user_login_verify(username=<span class="string">&#x27;305030951@qq.com&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码验证完成2----------&quot;</span> )</span><br><span class="line">        po = Login(self.driver)</span><br><span class="line">        <span class="comment"># alert = po.alert_info()</span></span><br><span class="line">        <span class="comment"># print(alert)</span></span><br><span class="line">        <span class="comment"># username_mes = alert.text</span></span><br><span class="line">        password_mes = po.find_element(By.ID, <span class="string">&quot;Password-error&quot;</span>).text</span><br><span class="line">        <span class="built_in">print</span>(password_mes)</span><br><span class="line">        self.assertEqual(password_mes, <span class="string">&#x27;请输入密码&#x27;</span>)</span><br><span class="line">        <span class="comment"># alert.accept()</span></span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        function.insert_img(self.driver, <span class="string">&#x27;password_pass_kong.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def test_login2(self):</span></span><br><span class="line">    <span class="comment">#     &#x27;&#x27;&#x27;用户名正确，密码为空&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#     self.user_login_verify(username=&#x27;18565660212&#x27;)</span></span><br><span class="line">    <span class="comment">#     po = Login(self.driver)</span></span><br><span class="line">    <span class="comment">#     alert = po.alert_info()</span></span><br><span class="line">    <span class="comment">#     username_mes = alert.text</span></span><br><span class="line">    <span class="comment">#     print(username_mes)</span></span><br><span class="line">    <span class="comment">#     self.assertEqual(username_mes, &#x27;账号或密码不能为空！&#x27;)</span></span><br><span class="line">    <span class="comment">#     alert.accept()</span></span><br><span class="line">    <span class="comment">#     sleep(1)</span></span><br><span class="line">    <span class="comment">#     function.insert_img(self.driver, &#x27;password_kong.jpg&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login3</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#     &#x27;&#x27;&#x27;用户名或者密码错误&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码开始验证3----------&quot;</span> )</span><br><span class="line">        self.user_login_verify(username=<span class="string">&#x27;305030952@qq.com&#x27;</span>,password=<span class="string">&#x27;Change_Me123&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码验证完成3---------&quot;</span> )</span><br><span class="line">        po = Login(self.driver)</span><br><span class="line">        <span class="comment"># alert = po.alert_info()</span></span><br><span class="line">        <span class="comment"># print(alert)</span></span><br><span class="line">        <span class="comment"># username_mes = alert.text</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># / html / body / div / div[3] / div / div / div / div / div / div[1] / form / div[5] / ul / li</span></span><br><span class="line"></span><br><span class="line">        error_message = po.find_element(By.XPATH, <span class="string">&quot;/html/body/div/div[3]/div/div/div/div/div/div[1]/form/div[5]/ul/li&quot;</span>).text</span><br><span class="line">        <span class="built_in">print</span>(error_message)</span><br><span class="line">        self.assertEqual(error_message, <span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br><span class="line">        <span class="comment"># alert.accept()</span></span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        function.insert_img(self.driver, <span class="string">&#x27;username_or_password_error.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login4</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#     &#x27;&#x27;&#x27;用户名或者密码正确&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码开始验证4----------&quot;</span> )</span><br><span class="line">        self.user_login_verify(username=<span class="string">&#x27;305030951@qq.com&#x27;</span>,password=<span class="string">&#x27;Change_Me123&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------用户名密码验证完成4---------&quot;</span> )</span><br><span class="line">        po = Login(self.driver)</span><br><span class="line">        success_message = po.find_element(By.XPATH, <span class="string">&quot;/html/body/div/div[2]/div/div/div/div[1]/div/a[1]&quot;</span>).text</span><br><span class="line">        <span class="built_in">print</span>(success_message)</span><br><span class="line">        success_message2 = <span class="string">&#x27;您好，shenle！&#x27;</span></span><br><span class="line">        self.assertEqual(success_message, success_message2)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        function.insert_img(self.driver, <span class="string">&#x27;username_or_password_correct.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>执行用例总入口run_bbs_test.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> time, sys, os</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">&#x27;./package&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;./bbs/test_case/models&#x27;</span>)</span><br><span class="line">sys.path.append(<span class="string">&#x27;./bbs/test_case/report&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from package import email_send</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================定义发送邮件==========================</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span>(<span class="params">file_new</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_new, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    mail_body = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    msg = MIMEText(mail_body, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&quot;python+selenium 自动化测试报告&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;from&#x27;</span>] = <span class="string">&#x27;emptymiss@126.com&#x27;</span></span><br><span class="line">    msg[<span class="string">&#x27;to&#x27;</span>] = <span class="string">&#x27;305030951@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line">    smtp.connect(<span class="string">&quot;smtp.126.com&quot;</span>)</span><br><span class="line">    smtp.login(<span class="string">&quot;emptymiss@126.com&quot;</span>, <span class="string">&quot;MDTFMYZKLYOCDGFR&quot;</span>)</span><br><span class="line">    smtp.sendmail(<span class="string">&quot;emptymiss@126.com&quot;</span>, <span class="string">&quot;305030951@qq.com&quot;</span>, msg.as_string())</span><br><span class="line">    smtp.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;email has send out&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==========获取最新的测试报告，用于发送测试报告邮件=========</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_report</span>(<span class="params">testreport</span>):</span></span><br><span class="line">    lists = os.listdir(testreport)</span><br><span class="line">    lists.sort(key=<span class="keyword">lambda</span> fn: os.path.getmtime(testreport + <span class="string">&quot;\\&quot;</span> + fn))</span><br><span class="line">    file_new = os.path.join(testreport, lists[-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(file_new)</span><br><span class="line">    <span class="keyword">return</span> file_new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 生成测试报告</span></span><br><span class="line">    now = time.strftime(<span class="string">&quot;%Y-%m-%d %H_%M_%S&quot;</span>)</span><br><span class="line">    <span class="comment"># filename = &quot;./bbs/report/result&quot; + str(time.time()) + &quot;.html&quot;</span></span><br><span class="line">    filename = <span class="string">&quot;./bbs/report/&quot;</span> + now + <span class="string">&#x27;result.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># with open(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as fp:</span></span><br><span class="line">    <span class="comment">#     runner = HTMLTestRunner.HTMLTestRunner(stream=fp,</span></span><br><span class="line">    <span class="comment">#                                            title=&quot;login测试报告&quot;,</span></span><br><span class="line">    <span class="comment">#                                            description=&quot;登录测试&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        runner = HTMLTestRunner.HTMLTestRunner(stream=fp,</span><br><span class="line">                                               title=<span class="string">&#x27;博文视点测试报告&#x27;</span>,</span><br><span class="line">                                               description=<span class="string">&#x27;win10+Chrome+用例执行情况&#x27;</span>)</span><br><span class="line">        test_dir = <span class="string">&#x27;./bbs/test_case&#x27;</span></span><br><span class="line">        discover = unittest.defaultTestLoader.discover(test_dir, pattern=<span class="string">&#x27;login*.py&#x27;</span>)</span><br><span class="line">        <span class="comment"># runner = unittest.TextTestRunner()</span></span><br><span class="line">        runner.run(discover)</span><br><span class="line">        fp.close()  <span class="comment"># 关闭生成的报告</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取最新的测试报告</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># file_path = os.path.dirname(__file__) + &#x27;/bbs/report/&#x27;</span></span><br><span class="line">    <span class="comment"># new_file = new_report(file_path)</span></span><br><span class="line">    <span class="comment"># file_name = file_path + new_file</span></span><br><span class="line">        file_path = new_report(<span class="string">&#x27;./bbs/report/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">        send_mail(file_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>项目源码：<a href="https://github.com/shenle2019/pythontest100/tree/master/mztestpro">https://github.com/shenle2019/pythontest100/tree/master/mztestpro</a></p>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>UI自动化测试框架</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘 - Python自动生成试卷和答案</title>
    <url>/2022/01/09/%E5%A4%8D%E7%9B%98-Python%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E8%AF%95%E5%8D%B7%E5%92%8C%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<h4 id="复盘-自动生成试卷和答案"><a href="#复盘-自动生成试卷和答案" class="headerlink" title="复盘 - 自动生成试卷和答案"></a>复盘 - 自动生成试卷和答案</h4><p>首先知道这个问题要做啥，然后分解每一个步骤。<br>每一个步骤，使用到的基础知识，具体细化出来。</p>
<p>关键点记录：</p>
<ol>
<li>大循环35次写试卷，然后写入试卷的标题内容，再小循环9次写题目，<br>一样的操作单独拎出来，即需要重复的，就用循环来写。import random即可</li>
<li>文件名要根据变化参数i来一起变化，需要加入到用户名，就用字符串拼接；同时注意路径需要加r，不加r有转义问题。</li>
<li>需要用到的字典，单独定义，过程中不要修改它</li>
<li>创建文件和开始写入testfile = open(filepath,’w’)，file_handle.write(‘hello word 你好 ‘)写入内容，<br>写完后记得关闭文件 exam_file.close()</li>
<li>打乱capitals的次序,shuffle()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。<br> random.shuffle (lst ),lst为列表，这里注意直接使用方法打乱次序即可，<strong>shuffle不返回任何值</strong>，所以不要用变量接收。</li>
<li>字典.keys()，字典.values()分别获取键和值。如果不知道具体怎么获取值，直接打印出来看。</li>
<li>list中随机取几个数random.sample(list, k)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 假如你是一位地理老师，班上有 35 名学生，你希望进行美国各州首府的一个小测验。不妙的是，班里有几个坏蛋，你无法确信学生不会作弊。你希望随机调整问题的次序，这样每份试卷都是独一无二的，这让任何人都不能从其他人那里抄袭答案。当然，手工完成这件事又费时又无聊。好在，你懂一些 Python。</span><br><span class="line"># 下面是程序所做的事：</span><br><span class="line"># • 创建 35 份不同的测验试卷。</span><br><span class="line"># • 为每份试卷创建 9 个多重选择题，次序随机。</span><br><span class="line"># • 为每个问题提供一个正确答案和 3 个随机的错误答案，次序随机。</span><br><span class="line"># • 将测验试卷写到 35 个文本文件中。</span><br><span class="line"># • 将答案写到 35 个文本文件中。</span><br><span class="line"># 这意味着代码需要做下面的事：</span><br><span class="line"># • 将州和它们的首府保存在一个字典中。</span><br><span class="line"># • 针对测验文本文件和答案文本文件，调用 open()、write()和 close()。</span><br><span class="line"># • 利用 random.shuffle()随机调整问题和多重选项的次序。</span><br><span class="line"></span><br><span class="line"># # 将美国各州首府数据存储在一个字典中</span><br><span class="line"># capitals = &#123;&#x27;Alabama&#x27;: &#x27;Montgomery&#x27;, &#x27;Alaska&#x27;: &#x27;Juneau&#x27;, &#x27;Arizona&#x27;: &#x27;Phoenix&#x27;,</span><br><span class="line">#             &#x27;Arkansas&#x27;: &#x27;Little Rock&#x27;, &#x27;California&#x27;: &#x27;Sacramento&#x27;, &#x27;Colorado&#x27;: &#x27;Denver&#x27;,</span><br><span class="line">#             &#x27;Connecticut&#x27;: &#x27;Hartford&#x27;, &#x27;Delaware&#x27;: &#x27;Dover&#x27;, &#x27;Florida&#x27;: &#x27;Tallahassee&#x27;&#125;</span><br><span class="line"></span><br><span class="line">#！ python3</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">capitals = &#123;&#x27;Alabama&#x27;: &#x27;Montgomery&#x27;, &#x27;Alaska&#x27;: &#x27;Juneau&#x27;, &#x27;Arizona&#x27;: &#x27;Phoenix&#x27;,</span><br><span class="line">            &#x27;Arkansas&#x27;: &#x27;Little Rock&#x27;, &#x27;California&#x27;: &#x27;Sacramento&#x27;, &#x27;Colorado&#x27;: &#x27;Denver&#x27;,</span><br><span class="line">            &#x27;Connecticut&#x27;: &#x27;Hartford&#x27;, &#x27;Delaware&#x27;: &#x27;Dover&#x27;, &#x27;Florida&#x27;: &#x27;Tallahassee&#x27;&#125;</span><br><span class="line"></span><br><span class="line">###循环35次</span><br><span class="line">for i in range(35):</span><br><span class="line">    ### 创建试卷和试卷对应的答案txt文件</span><br><span class="line">    ### 这里的知识点是，创建文件和开始写入testfile = open(filepath,’w’)</span><br><span class="line">    ### 问题，这里的路径怎么写？windows写绝对路径好了，如果是linux可以写/</span><br><span class="line">    ### 不加r有转义问题。</span><br><span class="line"></span><br><span class="line">    ### 还有个问题，文件名要根据i来变化</span><br><span class="line">    exam_file_name = r&#x27;C:\Users\Administrator\PycharmProjects\testpython100\exam_file&#x27;+str(i+1)+&#x27;.txt&#x27;</span><br><span class="line">    answer_file_name = r&#x27;C:\Users\Administrator\PycharmProjects\testpython100\answer_file&#x27;+str(i+1)+&#x27;.txt&#x27;</span><br><span class="line">    exam_file = open(exam_file_name,&#x27;w&#x27;)</span><br><span class="line">    answer_file = open(answer_file_name,&#x27;w&#x27;)</span><br><span class="line"></span><br><span class="line">    ### 开始从试卷的标题、姓名、班级等内容写入,file_handle.write(&#x27;hello word 你好 &#x27;)</span><br><span class="line">    exam_file.write(&#x27;exam for capitals\n&#x27;)</span><br><span class="line">    exam_file.write(&#x27;enter your name:__________\n&#x27;)</span><br><span class="line">    exam_file.write(&#x27;enter your class:__________\n&#x27;)</span><br><span class="line"></span><br><span class="line">    ### 打乱capitals的次序,shuffle()是不能直接访问的，需要导入 random 模块，然后通过 random 静态对象调用该方法。</span><br><span class="line">    ### random.shuffle (lst ),lst为列表，这里注意直接使用方法打乱次序即可，shuffle不返回任何值。</span><br><span class="line">    capitalkey  = list(capitals.keys())</span><br><span class="line">    random.shuffle(capitalkey)</span><br><span class="line"></span><br><span class="line">    ### 循环9次</span><br><span class="line">    for j in range(9):</span><br><span class="line">        ### 写入captitals的问题</span><br><span class="line">        exam_file.write(&#x27;what is the key of capital:&#x27; + capitalkey[j] + &#x27;?\n&#x27;)</span><br><span class="line"></span><br><span class="line">        ### 依次写入ABCD，其中一项是正确答案，其他是错误答案。</span><br><span class="line">        correctanswer = capitals[capitalkey[j]]</span><br><span class="line">        # print(correctanswer)</span><br><span class="line">        # print(type(correctanswer))</span><br><span class="line">        allanswer = list(capitals.values())</span><br><span class="line">        # print(allanswer)</span><br><span class="line">        # print(type(allanswer))</span><br><span class="line">        allanswer.remove(str(correctanswer))</span><br><span class="line">        otheranswers = allanswer</span><br><span class="line">        # print(otheranswers)</span><br><span class="line">        ### list中随机取几个数random.sample(list, k)</span><br><span class="line">        # print(random.sample(otheranswers, 3))</span><br><span class="line">        optionanswers = random.sample(otheranswers,3)</span><br><span class="line">        optionanswers.append(correctanswer)</span><br><span class="line">        # print(optionanswers)</span><br><span class="line">        random.shuffle(optionanswers)</span><br><span class="line">        for m in range(4):</span><br><span class="line">              exam_file.write(&#x27;ABCD&#x27;[m] + &#x27;:&#x27; + optionanswers[m] + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">        ### 写入答案内容</span><br><span class="line">        # print(optionanswers.index(correctanswer))</span><br><span class="line">        numindex = optionanswers.index(correctanswer)</span><br><span class="line">        answer_file.write(&#x27;correct answer:&#x27; + [&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;D&#x27;][numindex] + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    exam_file.close()</span><br><span class="line">    answer_file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Hexo 和 GitHub Pages 搭建博客 - usopp</title>
    <url>/2021/11/21/%E7%94%A8-Hexo-%E5%92%8C-GitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-usopp/</url>
    <content><![CDATA[<ul>
<li><p>说明：本博客基于知乎回答来做的，因搭建过程遇到一些问题，所以直接转载过来，在此基础上提供自己的注意点+NEXT主题下的一些基本配置工作。</p>
</li>
<li><p align="left">
知乎：如何用github page搭建博客？ - 工匠羅的回答 - 知乎 https://www.zhihu.com/question/59088760/answer/265741938</p></li>
<li><p align="left">原文出处：https://ryanluoxu.github.io/2017/11/24/%E7%94%A8-Hexo-%E5%92%8C-GitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2</p></li>
</ul>
<h1 id="日常常用命令"><a href="#日常常用命令" class="headerlink" title="日常常用命令"></a>日常常用命令</h1><ul>
<li>hexo new “文章名”</li>
<li>手动编辑source的_posts下生成的md文件,注意配置title，tags以及categories</li>
<li>hexo g -d部署即可</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。</p>
<ul>
<li>Github Pages</li>
<li>Hexo 博客框架</li>
<li>部署</li>
<li>Next 主题</li>
</ul>
<h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>Github Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p>
<p><strong>操作如下：</strong></p>
<ol>
<li><p>注册 Github 账号，然后在 Github 中创建一个以 .github.io 结尾的 Repository。</p>
<ol>
<li>Repository name: ryanluoxu.github.io</li>
<li>勾选 Initialize this repository with a README</li>
<li>Create repository</li>
</ol>
</li>
<li><p>简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。</p>
</li>
<li><p>打开网页：ryanluoxu.github.io 这里就可以看到 README.md 里的内容了。</p>
</li>
</ol>
<p>如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。<br>这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 ryanluoxu.github.io 这个网页显示出来。</p>
<p><strong>Usopp这里说明一下：</strong></p>
<ul>
<li><p>比如我的github路径是<a href="https://github.com/shenle2019%EF%BC%8C">https://github.com/shenle2019，</a><br>那么这里配置的必须是shenle2019.github.io，即shenle2019名称必须相同，否则不会生成页面。</p>
</li>
<li><p>默认创建的分支，以前是master，现在是main。而我需要在main下创建一个gh-pages的分支才能使用shenle2019.github.io来访问博客网页。</p>
</li>
<li><p align="left">参考：如何用github page搭建博客？ - 我是蛋蛋的回答 - 知乎 https://www.zhihu.com/question/59088760/answer/161640592</p></li>
</ul>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。</p>
<p>使用 Hexo 之前，需要先安装 Node.js 和 Git。</p>
<p><strong>操作如下：</strong></p>
<ol>
<li><p>安装 Node.js</p>
<ul>
<li><p>前往 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
</li>
<li><p>点击 8.9.1 LTS 下载</p>
</li>
<li><p>安装</p>
</li>
<li><p>打开 Command Prompt， 输入 <code>node -v</code></p>
</li>
<li><p>得到：v8.9.1</p>
<p>安装成功</p>
</li>
</ul>
</li>
<li><p>安装 Git</p>
<ul>
<li><p>前往 <a href="https://git-scm.com/">https://git-scm.com/</a></p>
</li>
<li><p>点击 Downloads</p>
</li>
<li><p>点击 Windows</p>
</li>
<li><p>一般情况，下载会自动开始。如果没有，就点击 click here to download manually</p>
</li>
<li><p>安装</p>
</li>
<li><p>打开 Command Prompt， 输入 <code>git --version</code></p>
</li>
<li><p>得到：git version 2.15.0.windows.1</p>
<p>安装成功</p>
<p>额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。</p>
</li>
</ul>
</li>
<li><p>安装 Hexo</p>
</li>
</ol>
<ul>
<li><p>打开 Command Prompt</p>
</li>
<li><p>输入 <code>npm install -g hexo-cli</code></p>
</li>
<li><p>回车开始安装</p>
</li>
<li><p>输入 <code>hexo -v</code></p>
</li>
<li><p>得到 hexo-cli: 1.0.4 等一串数据</p>
<p>安装成功</p>
<ol start="4">
<li>创建本地博客</li>
</ol>
</li>
<li><p>在D盘下创建文件夹 blog</p>
</li>
<li><p>鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</p>
</li>
<li><p>Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）</p>
</li>
<li><p>输入 <code>hexo init</code> 将 blog 文件夹初始化成一个博客文件夹。</p>
</li>
<li><p>输入 <code>npm install</code> 安装依赖包。</p>
</li>
<li><p>输入 <code>hexo g</code> 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</p>
</li>
<li><p>输入 <code>hexo s</code> 将生成的网页放在了本地服务器（server）。</p>
</li>
<li><p>浏览器里输入 <a href="http://localhost:4000/">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</p>
</li>
<li><p>回到 Git Bash，按 Ctrl+C 结束。</p>
<p>此时再看 <a href="http://localhost:4000/">http://localhost:4000/</a> 就是无法访问了。</p>
</li>
</ul>
<ol>
<li>发布一篇博客<ul>
<li>继续在 Git Bash 里，所在路径还是 /d/blog。输入 <code>hexo new &quot;My First Post&quot;</code></li>
<li>在 D:\blog\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li>
<li>回到 Git Bash，输入 <code>hexo g</code></li>
<li>输入 <code>hexo s</code></li>
<li>前往 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看成果。</li>
<li>回到 Git Bash，按 Ctrl+C 结束。</li>
</ul>
</li>
</ol>
<h2 id="将本地-Hexo-博客部署在-Github-上"><a href="#将本地-Hexo-博客部署在-Github-上" class="headerlink" title="将本地 Hexo 博客部署在 Github 上"></a>将本地 Hexo 博客部署在 Github 上</h2><p>前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p>
<p><strong>操作如下：</strong></p>
<ol>
<li><p>获取 Github 对应的 Repository 的链接。</p>
<ul>
<li><p>登陆 Github，进入到 ryanluoxu.github.io</p>
</li>
<li><p>点击 Clone or download</p>
</li>
<li><p>复制 URL 待用</p>
<p>我的是 <code>https://github.com/Ryanluoxu/ryanluoxu.github.io.git</code></p>
</li>
</ul>
</li>
<li><p>修改博客的配置文件</p>
<ul>
<li><p>打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）</p>
</li>
<li><p>找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Deployment</span><br></pre></td></tr></table></figure>

<p>，填入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">	  type: git  </span><br><span class="line">	  repository: https://github.com/Ryanluoxu/ryanluoxu.github.io.git  </span><br><span class="line">	  branch: master</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>部署</p>
<ul>
<li><p>回到 Git Bash</p>
</li>
<li><p>输入 <code>npm install hexo-deployer-git --save</code> 安装 hexo-deployer-git 此步骤只需要做一次。</p>
</li>
<li><p>输入 <code>hexo d</code></p>
</li>
<li><p>得到 <code>INFO Deploy done: git</code> 即为部署成功</p>
<p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p>
</li>
</ul>
<p><strong>Usopp这里说明一下</strong></p>
<ul>
<li>hexo d指令中会有要求本地直连github，以前是配置github的ssh免密码登录配置，现在是要tooken来登录</li>
<li>github获取tooken的方法，随便贴一个<a href="https://blog.csdn.net/u014175572/article/details/55510825">https://blog.csdn.net/u014175572/article/details/55510825</a></li>
<li>deploy的名称，这里branch也改了的，master改为main了。自己用的是 branch: main,gh-pages，如果设置main则向主干推送</li>
<li>常用为gh-pages，因目前这个分支可以用来展示博客主页shenle2019.github.io</li>
</ul>
</li>
<li><p>查看成果</p>
<p>前往 ryanluoxu.github.io 即可。</p>
</li>
</ol>
<h2 id="使用-Next-主题"><a href="#使用-Next-主题" class="headerlink" title="使用 Next 主题"></a>使用 Next 主题</h2><p><a href="https://hexo.io/themes/">更多 Hexo 的主题看这里</a></p>
<p>这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。</p>
<p><strong>操作如下：</strong></p>
<ol>
<li><p>还是回到 Git Bash。 输入 <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>
<p>这样，该主题的文件就全部克隆到 D:\blog\themes\next 下面。</p>
</li>
<li><p>修改博客配置文件</p>
<ul>
<li><p>打开 D:\blog下的_config.yml</p>
</li>
<li><p>找到 <code>theme:</code></p>
</li>
<li><p>把 Hexo 默认的 lanscape 修改成 next。 即 <code>theme: next</code></p>
</li>
<li><p>找到 <code># Site</code>，添加博客名称，作者名字等。</p>
</li>
<li><p>在 <code>language</code> 后面填入 en 或者 zh-Hans，选择英文或者中文。</p>
</li>
<li><p>找到 <code># URL</code>, 填入 url。比如 <code>url: https://ryanluoxu.github.io</code></p>
<p>填入名字后会有很风骚的 © 2017 Ryan Luo Xu 的字样出现在博客底部。</p>
</li>
</ul>
</li>
<li><p>重新生成部署即可</p>
<ul>
<li><p>回到 Git Bash。输入 <code>hexo g -d</code>就可以了。</p>
<p>先把修改的内容生成网页，再部署。</p>
</li>
</ul>
</li>
<li><p>查看成果</p>
<p>前往 ryanluoxu.github.io 即可。</p>
</li>
</ol>
<p><strong>Usopp这里说明一下</strong></p>
<ul>
<li><p>language: zh-Hans，这个找到对应路径看一下具体的名字，否则可能解码失败，路径在D:\blog\themes\next\languages</p>
</li>
<li><p>其他常见报错或者html解析失败，直接复制关键字搜索解决，后续这里或评论区可以补充</p>
</li>
<li><p>hexo-next 实用主题优化，参考<a href="https://blog.csdn.net/bsp_mpu6050/article/details/107886524">https://blog.csdn.net/bsp_mpu6050/article/details/107886524</a></p>
</li>
<li><p>如果有配置不生效的情况，可以先尝试hexo clean清除缓存，再hexo g -d来解决</p>
</li>
<li><p>yml文件中变量配置冒号后有空格，如custom_text: 乌索普大将的个人博客</p>
</li>
<li><p>部分配置||前又需要去掉空格，否则无法解析路径或者链接，如<br>  tags: /tags/|| tags<br>  categories: /categories/|| th</p>
</li>
<li><p>yml文件怀疑配置有问题时，可以使用<a href="https://codebeautify.org/yaml-validator%E8%BF%99%E4%B8%AA%E6%9D%A5%E9%AA%8C%E8%AF%81%E4%B8%80%E4%B8%8B%EF%BC%8C%E6%9C%89%E9%97%AE%E9%A2%98%E4%BC%9A%E7%9B%B4%E6%8E%A5%E6%8F%90%E7%A4%BA%E3%80%82">https://codebeautify.org/yaml-validator这个来验证一下，有问题会直接提示。</a></p>
</li>
</ul>
<h3 id="附-Hexo常用指令"><a href="#附-Hexo常用指令" class="headerlink" title="附 Hexo常用指令"></a>附 Hexo常用指令</h3><p>作者：雪上行者_<br>链接：<a href="https://www.jianshu.com/p/7b8faf77d1af">https://www.jianshu.com/p/7b8faf77d1af</a></p>
<h2 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令:"></a>简写指令:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot;`       等价于        `hexo new &quot;我的第一篇文章&quot;`  还等价于       `hexo new post &quot;我的第一篇文章&quot;`    </span><br><span class="line"> `hexo p` 等价于 `hexo publish`</span><br><span class="line"> `hexo g` 等价于 `hexo generate`  </span><br><span class="line"> `hexo s`等价于 `hexo server`     </span><br><span class="line"> `hexo d` 等价于 `hexo deploy`</span><br><span class="line"> `hexo deploy -g`  等价于 `hexo deploy --generate`</span><br><span class="line"> `hexo generate -d`等价于`hexo generate --deploy</span><br></pre></td></tr></table></figure>

<p><strong>注: hexo  clean 没有 简写,  git –version 没有简写</strong></p>
<h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明:"></a>指令说明:</h2><p><code>hexo server</code>        #Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。<br> <code>hexo server -s</code> #以静态模式启动<br> <code>hexo server -p 5000</code> #更改访问端口   (默认端口为4000，’ctrl + c’关闭server)<br> <code>hexo server -i IP地址</code> #自定义 IP<br> <code>hexo clean</code> #清除缓存  ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹<br> <code>hexo g</code> #生成静态网页  (执行 <code>$ hexo g</code>后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“   下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “   路径下)<br> <code>hexo d</code> #将本地数据部署到远端服务器(如github)<br> <code>hexo init 文件夹名称</code> #初始化XX文件夹名称<br> <code>npm update hexo -g</code>#升级<br> <code>npm install hexo -g</code>#安装<br> <code>node-v</code>          #查看node.js版本号<br> <code>npm -v</code>        #查看npm版本号<br> <code>git --version</code>  #查看git版本号<br> <code>hexo -v</code>      #查看hexo版本号</p>
<p><code>hexo publish [layout] &lt;title&gt;</code>   #通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout] &lt;title&gt;</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p>
<p><code>hexo new aaa &quot;bbb&quot;</code>  # 新建一篇文章,文章名称和标题分别为bbb.md 和 bbb.   文章采用aaa布局,  此时会在站点根目录下的—-&gt;source—–&gt;_post文件夹下生成bbb.md文件,  bbb.md文件的顶部(—–分割线上方区域,也称作Front matter区),生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout : aaa`</span><br><span class="line"> `title:`</span><br><span class="line"> `date:</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>部署github pages</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
        <tag>next</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试进阶思路</title>
    <url>/2021/12/06/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%BF%9B%E9%98%B6%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h3 id="软件测试进阶思路："><a href="#软件测试进阶思路：" class="headerlink" title="软件测试进阶思路："></a>软件测试进阶思路：</h3><p>就看各大招聘网站上，对测试专家的要求是什么，然后自己的水平跟要求的差距在哪里，直面核心难点问题，解决它。<br>平时把解决问题的过程，用文档记录下来，一来记录成长，二来做成一个基线的内容，可以一劳永逸，也可以作为温故而知新的资料。</p>
<h3 id="问题清单"><a href="#问题清单" class="headerlink" title="问题清单"></a>问题清单</h3><p>这里先把目前能想到的问题，列一个清单，然后按照清单逐个解决。</p>
<ul>
<li>自动化测试框架<br>UI自动化测试框架<br>接口自动化测试框架<br>APP自动化测试框架</li>
<li>性能测试进阶<br>性能测试思路<br>Jmeter</li>
<li>功能测试<br>测试用例思路</li>
<li>持续集成<br>Jenkins</li>
<li>编程语言<br>Java、Python、C、C#、C++、Go、shell、Perl</li>
<li>测试工具开发</li>
<li>数据库<br>OB<br>Oracle<br>Mysql<br>Redis</li>
<li>Linux</li>
<li>计算机网络<br>抓包工具</li>
<li>微服务架构下的测试方法</li>
<li>白盒测试</li>
<li>安全测试</li>
<li>对分布式系统架构设计有深刻的理解，并有丰富实操经验，熟悉分布式系统中常用的数据库(MySQL, PostgreSQL, MongoDB)、缓存、消息中间件、搜索引擎等，<br>熟悉常见缓存机制，理解数据库优化方法，有应对大规模、高并发数据访问和处理的经验，对高可用和横向扩展有深刻的理解；</li>
<li>计算机英语<br>无压力阅读英文材料</li>
</ul>
]]></content>
      <categories>
        <category>软件测试</category>
      </categories>
      <tags>
        <tag>思路</tag>
      </tags>
  </entry>
  <entry>
    <title>问题解决：年龄的焦虑</title>
    <url>/2021/11/29/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%EF%BC%9A%E5%B9%B4%E9%BE%84%E7%9A%84%E7%84%A6%E8%99%91/</url>
    <content><![CDATA[<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>刚过了33岁生日，年龄焦虑又开始袭扰我。今天就彻底解决这个问题，来个【一劳永逸】吧。</p>
<p>先讲一下，感觉在大学毕业之前，很少有现在的【时间飞逝】【一年快过一年】的这种感受，</p>
<p>那时总感觉自己身体、心态都很年轻，而且觉得有大把日子可以挥霍，所以无所谓，活的像个【快乐的傻逼】。</p>
<p>但是最近几年虽然开始有这些感受，但自己也并没有很珍惜，仍是卯起来蹉跎，</p>
<p>只是每次到了一定的时间节点，比如生日啊过年啊，就会提醒自己又过了一年又老了一岁之类，</p>
<p>其实也就那几天会告诉自己，哦，又过一年了，我大学毕业两年了，五年了，十年了，我25了，我30了。</p>
<p>如果不跟其他人比，实际自己是啥感受没有。虽然理想还是理想，我还是我。</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>所以问题本质很明显了。</p>
<p>焦虑的本质是，有一些【社会比较的东西】，比如房子、车子、票子等，没有别人同龄人多，好像我赚的更多了，就不会焦虑了。</p>
<p>实际并非如此，这种外在物质，只要是追求，人总是【欲壑难填】的。</p>
<p>就比如说单身的时候其实最自由自在，但是因为同龄人都结婚生子了，比较之后就会有焦虑。</p>
<p>实际上结婚生子之后，焦虑只会更多。</p>
<p>没有买房买车，看别人买房买车，或者有房有车之后，又想更大的房，更豪的车。总也没有个尽头。</p>
<p>实际真正有了，也并没有感觉很开心，并没有缓解焦虑。</p>
<p>那么解决问题的第一步就是，<strong>不要追求社会比较的东西</strong>。</p>
<p>接下来第二步就是，先说结论，<strong>保持年轻的心态，直至生命最后一刻</strong>。</p>
<p>年轻是一种心态，既然如此，年龄这个数字对我来说，就毫无意义了。60/80/25/30/40，好的，我知道了。</p>
<p>当然我不否定过去，因为过去造就了今天的我，但我也不必期待未来，因为我觉得真相就是没有【未来】这个东西。</p>
<p>人，只能活在此时此刻。而且我感觉我的思想是越来越成熟了，所有的此时此刻都是最好的状态。</p>
<h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>那么怎么保持年轻的心态？我理解是找到自己的意义，至少和喜欢的人、事、物在一起。</p>
<p>补充一个先行思想，人生意义的问题，每个人或多或少思考过这个问题，</p>
<p>这个问题我从开始想，到现在已经有 二十年了，目前比较认同的结论是，</p>
<p><strong>从结局来看，人生确实没有什么意义</strong>。</p>
<p>比我聪明千百倍的聪明人也都思考过这个问题，也都没有得出更有价值的结论，意义是没有，但是繁衍生息，后人倒是能觉察出意义也不一定。</p>
<p>生来偶然 ，我是被动来到这个世界的，世界本来也没有我，以后也没有我，我只是参与了一段时间，对我而言，并没有什么必须得做的事情，也不需要我来拯救世界。</p>
<p>那么，是说人生不值得一过吗？当然不是。我理解，有经省察的人生很值得一过。</p>
<p>我的理解是，人生是有很多美的地方。</p>
<p>既然生来不是为了做某件事情，那么就是让自己体验这个过程的，会有很多美好的体验，有一些不好的体验，</p>
<p>但是总而言之，生在和平年代，生在中国是幸运的，很多时候能感受、体验美的感觉，还是挺有不错的。</p>
<p>以后我还是会保持自己在这种状态中继续生活，丢掉压力和焦虑，持续做自己喜欢的事情。</p>
<p>更新一些自己思考的其他内容 ，或编程方法，或影评书评，或 小说，或思想感悟等等 。</p>
<p>慢慢在完善自己思想体系的过程中，体验生命的过程，感受自由和美。</p>
<p>在此过程中，我或许就会找到属于自己的生命的意义。</p>
<p>这里引用当年明月在《明朝那些事儿》通过徐霞客所表达的，足以藐视所有王侯将相，最完美的结束语：</p>
<p><strong>成功只有一个 —— 按照自己的方式，去度过人生</strong>。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>引用之前很火的一首诗吧，【你没有迟到，只是活在自己的时区里】：</p>
<blockquote>
<p>纽约时间比加州时间早三个小时， New York is 3 hours ahead of California,<br>但加州时间并没有变慢。 but it does not make California slow.<br>有人22岁就毕业了， Someone graduated at the age of 22,<br>但等了五年才找到好的工作！ but waited 5 years before securing a good job!<br>有人25岁就当上CEO， Someone became a CEO at 25,<br>却在50岁去世。 and died at 50.<br>也有人迟到50岁才当上CEO， While another became a CEO at 50,<br>然后活到90岁。 and lived to 90 years.<br>有人依然单身， Someone is still single,<br>同时也有人已婚。 while someone else got married.<br>奥巴马55岁就退休， Obama retires at 55,<br>川普70岁才开始当总统。 but Trump starts at 70.<br>世上每个人本来就有自己的发展时区。 Absolutely everyone in this world works based on their Time Zone.<br>身边有些人看似走在你前面， People around you might seem to go ahead of you,<br>也有人看似走在你后面。 some might seem to be behind you.<br>但其实每个人在自己的时区有自己的步程。 But everyone is running their own RACE, in their own TIME.<br>不用嫉妒或嘲笑他们。 Don’t envy them or mock them.<br>他们都在自己的时区里，你也是！ They are in their TIME ZONE, and you are in yours!<br>生命就是等待正确的行动时机。 Life is about waiting for the right moment to act.<br>所以，放轻松。 So, RELAX.<br>你没有落后。 You’re not LATE.<br>你没有领先。 You’re not EARLY.<br>在命运为你安排的属于自己的时区里，一切都准时。 You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</p>
</blockquote>
]]></content>
      <categories>
        <category>问题解决</category>
      </categories>
      <tags>
        <tag>年龄</tag>
        <tag>焦虑</tag>
        <tag>意义</tag>
      </tags>
  </entry>
  <entry>
    <title>Automatic test framework</title>
    <url>/2022/08/22/Automatic-test-framework/</url>
    <content><![CDATA[<p>自动化测试理论：</p>
<p>1.测试能力表现：</p>
<p>测试思维 + 测试工具、框架的辅助使用（实际就是测试开发的能力，主要来提高工作效率！！！）</p>
<p>2.自动化测试的定义</p>
<p>用测试脚本代替手工测试，对持续交付和持续测试非常关键。<br>主要包括，单元测试、功能测试、性能测试、安全测试等等等内容。</p>
<p>3.自动化测试流程</p>
<p>3.1 需求分析</p>
<p>主要考虑几点，比如需求不会频繁变更、界面稳定、手工测试稳定，回归测试频繁等。</p>
<p>3.2 测试方案的选择</p>
<p>主要考虑编码的方式，同时使用各种测试框架，比如selenium、Robot Framework、appium、robium、monkeyrunner等等。<br>此外还需要结合团队开发语言、项目架构和项目环境等方面考虑。</p>
<p>3.3 测试环境准备。</p>
<p>IDE、JDK安装、持续集成、版本管理。</p>
<p>3.4 测试框架设计</p>
<p>公共部分维护、测试数据、配置文件、日志文件等内容。<br>以及各种模块之间的联调。</p>
<p>3.5 测试用例执行</p>
<p>自动化输出测试报告、配置jenkins持续回归等内容。</p>
<ol start="4">
<li>自动化测试用例编写</li>
</ol>
<p>跟手工用例类似，主要包括用例ID、模块、前置条件、操作步骤、预期结果等。  输出实际测试结果后，自动化生成测试报告。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试理论</tag>
      </tags>
  </entry>
  <entry>
    <title>python interview 5</title>
    <url>/2022/08/22/python-interview-5/</url>
    <content><![CDATA[<h2 id="Python面试题整理-V1-day5"><a href="#Python面试题整理-V1-day5" class="headerlink" title="Python面试题整理-V1 day5"></a>Python面试题整理-V1 day5</h2><ul>
<li>简述Python的引用计数机制。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Python的垃圾回收机制</span><br><span class="line">Python采用的是引用计数机制为主，标记-清除和分代收集两种机制为辅的策略。</span><br><span class="line"></span><br><span class="line">引用计数(reference counting)</span><br><span class="line">Python语言默认采用的垃圾收集机制是“引用计数法 Reference Counting”，该算法最早George E. Collins在<span class="number">1960</span>的时候首次提出，<span class="number">50</span>年后的今天，该算法依然被很多编程语言使用。</span><br><span class="line">引用计数法的原理是：每个对象维护一个ob_ref字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加<span class="number">1</span>，每当该对象的引用失效时计数ob_ref减<span class="number">1</span>，一旦对象的引用计数为<span class="number">0</span>，该对象立即被回收，对象占用的内存空间将被释放。</span><br><span class="line">它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</span><br><span class="line">Python中一切皆对象，也就是说，在Python中你用到的一切变量，本质上都是类对象。实际上每一个对象的核心就是一个结构体PyObject，它的内部有一个引用计数器ob_refcnt，程序在运行的过程中会实时的更新ob_refcnt的值，来反映引用当前对象的名称数量。当某对象的引用计数值为<span class="number">0</span>,说明这个对象变成了垃圾，那么它会被回收掉，它所用的内存也会被立即释放掉。</span><br><span class="line"></span><br><span class="line">循环引用</span><br><span class="line">引用计数的另一个现象就是循环引用，相当于有两个对象a和b，其中a引用了b，b引用了a，这样a和b的引用计数都为<span class="number">1</span>，并且永远都不会为<span class="number">0</span>，这就意味着这两个对象永远都不会被回收了，这就是循环引用 , a与b形成了一个引用循环</span><br><span class="line"></span><br><span class="line">标记清除(Mark <span class="keyword">and</span> Sweep)</span><br><span class="line">Python采用了“标记-清除”(Mark <span class="keyword">and</span> Sweep)算法，解决容器对象可能产生的循环引用问题。(注意，只有容器对象才会产生循环引用的情况，比如列表、字典、用户自定义类的对象、元组等。而像数字，字符串这类简单类型不会出现循环引用。作为一种优化策略，对于只包含简单类型的元组也不在标记清除算法的考虑之列)</span><br><span class="line"></span><br><span class="line">跟其名称一样，该算法在进行垃圾回收时分成了两步，分别是：</span><br><span class="line"></span><br><span class="line">标记阶段，遍历所有的对象，如果是可达的（reachable），也就是还有对象引用它，那么就标记该对象为可达；</span><br><span class="line">清除阶段，再次遍历对象，如果发现某个对象没有标记为可达，则就将其回收。</span><br><span class="line"></span><br><span class="line">分代回收(Generational garbage collector)</span><br><span class="line">分代回收技术是上个世纪<span class="number">80</span>年代初发展起来的一种垃圾回收机制，也是Java 垃圾回收的核心算法。分代回收是基于这样的一个统计事实，对于程序，存在一定比例的内存块的生存周期比较短；而剩下的内存块，生存周期会比较长，甚至会从程序开始一直持续到程序结束。</span><br><span class="line"></span><br><span class="line">生存期较短对象的比例通常在 <span class="number">80</span>%～<span class="number">90</span>% 之间。因此，简单地认为：对象存在时间越长，越可能不是垃圾，应该越少去收集。这样在执行标记-清除算法时可以有效减小遍历的对象数，从而提高垃圾回收的速度，是一种以空间换时间的方法策略。</span><br><span class="line"></span><br><span class="line">Python 将所有的对象分为 <span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span> 三代；</span><br><span class="line">所有的新建对象都是 <span class="number">0</span> 代对象；</span><br><span class="line">当某一代对象经历过垃圾回收，依然存活，就被归入下一代对象。</span><br><span class="line"></span><br><span class="line">Python 中的 gc 模块</span><br><span class="line">gc 模块是我们在Python中进行内存管理的接口，一般情况Python程序员都不用关心自己程序的内存管理问题，但是有的时候，比如发现自己程序存在内存泄露，就可能需要用到gc模块的接口来排查问题。</span><br><span class="line"></span><br><span class="line">有的 Python 系统会关闭自动垃圾回收，程序自己判断回收的时机，据说 instagram 的系统就是这样做的，整体运行效率提高了<span class="number">10</span>%。</span><br><span class="line"></span><br><span class="line">常用函数：</span><br><span class="line">set_debug(flags) ：设置gc的debug日志，一般设置为gc.DEBUG_LEAK可以看到内存泄漏的对象。</span><br><span class="line">collect([generation]) ：执行垃圾回收。会将那些有循环引用的对象给回收了。这个函数可以传递参数，<span class="number">0</span>代表只回收第<span class="number">0</span>代的的垃圾对象、<span class="number">1</span>代表回收第<span class="number">0</span>代和第<span class="number">1</span>代的对象，<span class="number">2</span>代表回收第<span class="number">0</span>、<span class="number">1</span>、<span class="number">2</span>代的对象。如果不传参数，那么会使用<span class="number">2</span>作为默认参数。</span><br><span class="line">get_threshold() ：获取gc模块执行垃圾回收的阈值。返回的是个元组，第<span class="number">0</span>个是零代的阈值，第<span class="number">1</span>个是<span class="number">1</span>代的阈值，第<span class="number">2</span>个是<span class="number">2</span>代的阈值。</span><br><span class="line">set_threshold(threshold0[, threshold1[, threshold2]) ：设置执行垃圾回收的阈值。</span><br><span class="line">get_count() ：获取当前自动执行垃圾回收的计数器。返回一个元组。第<span class="number">0</span>个是零代的垃圾对象的数量，第<span class="number">1</span>个是零代链表遍历的次数，第<span class="number">2</span>个是<span class="number">1</span>代链表遍历的次数。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>print(int(“1.4”)) 与 print(int(1.4))</li>
</ul>
<h3 id="print-int-“1-4”-有报错"><a href="#print-int-“1-4”-有报错" class="headerlink" title="print(int(“1.4”)),有报错"></a>print(int(“1.4”)),有报错</h3><p>print(int(1.4))  输出1</p>
<ul>
<li>列举3条以上PEP8的编码规范。</li>
</ul>
<p>1.顶级定义之间空两行，比如函数或者类定义。<br>2.方法定义、类定义与第一个方法之间，均空一行。<br>3.三引号进行注释。<br>4.使用Pycharm、Eclipse一般使用4个空格进行缩进代码。</p>
<ul>
<li>正则表达式匹配第一个URL</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Find</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="comment"># findall() 查找匹配正则表达式的字符串</span></span><br><span class="line">    url = re.findall(<span class="string">&#x27;https?://(?:[-\w.]|(?:%[\da-fA-F]&#123;2&#125;))+&#x27;</span>, string)</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">&#x27;Runoob 的网页地址为：https://www.runoob.com，Google 的网页地址为：https://www.google.com&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Urls: &quot;</span>, Find(string))</span><br><span class="line"><span class="comment">### 匹配第一个url</span></span><br><span class="line"><span class="built_in">print</span>(Find(string)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Search</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="comment">### search需要加group by来提取</span></span><br><span class="line">    url = re.search(<span class="string">&#x27;https?://(?:[-\w.]|(?:%[\da-fA-F]&#123;2&#125;))+&#x27;</span>, string)</span><br><span class="line">    <span class="keyword">return</span> url.group()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 匹配第一个url</span></span><br><span class="line"><span class="built_in">print</span>(Search(string))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>正则匹配中文</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 正则匹配中文</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">title = <span class="string">&#x27;你好， hello ，世界&#x27;</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[\u4e00-\u9fff]+&#x27;</span>)</span><br><span class="line">result = pattern.findall(title)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展知识：</span></span><br><span class="line"><span class="comment"># 几个主要非英文语系字符范围</span></span><br><span class="line"><span class="comment"># 2E80～33FFh：中日韩符号区。收容康熙字典部首、中日韩辅助部首、注音符号、日本假名、韩文音符，中日韩的符号、标点、带圈或带括符文数字、月份，以及日本的假名组合、单位、年号、月份、日期、时间等。</span></span><br><span class="line"><span class="comment"># 3400～4DFFh：中日韩认同表意文字扩充A区，总计收容6,582个中日韩汉字。</span></span><br><span class="line"><span class="comment"># 4E00～9FFFh：中日韩认同表意文字区，总计收容20,902个中日韩汉字。</span></span><br><span class="line"><span class="comment"># A000～A4FFh：彝族文字区，收容中国南方彝族文字和字根。</span></span><br><span class="line"><span class="comment"># AC00～D7FFh：韩文拼音组合字区，收容以韩文音符拼成的文字。</span></span><br><span class="line"><span class="comment"># F900～FAFFh：中日韩兼容表意文字区，总计收容302个中日韩汉字。</span></span><br><span class="line"><span class="comment"># FB00～FFFDh：文字表现形式区，收容组合拉丁文字、希伯来文、阿拉伯文、中日韩直式标点、小符号、半角符号、全角</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>简述Python乐观锁和悲观锁。</li>
</ul>
<p>悲观锁：不相信其他人不会修改，传统的关系型数据库里边就用到了很多这种锁机制，如mysql, 每次查询、修改数据操作之前就会上锁，整个数据处理过程中，将数据处于锁定状态，自己更新数据后再释放锁，可以有效防止库存冲突问题<br>乐观锁：相信其他人不会修改，所以查询、修改数据库时不会上锁，所以再数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回错误的信息，让用户决定如何 去做</p>
<ul>
<li>r/r+/rb/rb+ 等文件打开模式的区别。</li>
</ul>
<p>‘r’：只读。该文件必须已存在。<br>‘r+’：可读可写。该文件必须已存在，写为追加在文件内容末尾。<br>‘rb’：表示以二进制方式读取文件。该文件必须已存在。<br>‘w’：只写。打开即默认创建一个新文件，如果文件已存在，则覆盖写(即文件内原始数据会被新写入的数据清空覆盖)。<br>‘w+’：写读。打开创建新文件并写入数据，如果文件已存在，则覆盖写。<br>‘wb’：表示以二进制写方式打开，只能写文件， 如果文件不存在，创建该文件；如果文件已存在，则覆盖写。<br>‘a’：追加写。若打开的是已有文件则直接对已有文件操作，若打开文件不存在则创建新文件，只能执行写(追加在后面)，不能读。<br>‘a+’：追加读写。打开文件方式与写入方式和’a’一样，但是可以读。需注意的是你若刚用‘a+’打开一个文件，一般不能直接读取，<br>因为此时光标已经是文件末尾，除非你把光标移动到初始位置或任意非末尾的位置。</p>
<p>看似那么多模式，无非是三大类：读r(read)，写w(write)，追加a(append)。</p>
<ul>
<li>linux中的&gt;,&gt;&gt;</li>
</ul>
<p>重定向，&gt;表示输出，&gt;&gt;表示追加。</p>
<ul>
<li>正则表达式匹配出<html><h1><a href="http://www.itcast.cn/">www.itcast.cn</a></h1></html></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">labels = [<span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>,<span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;&quot;</span>,<span class="string">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> lab <span class="keyword">in</span> labels:</span><br><span class="line">    ret = re.match(<span class="string">r&quot;&lt;(\w*)&gt;&lt;(\w*)&gt;.*?&lt;/\2&gt;&lt;/\1&gt;&quot;</span>,lab)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; 符合要求&quot;</span>.<span class="built_in">format</span>(ret.group()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; 不符合要求&quot;</span>.<span class="built_in">format</span>(lab))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<p>/Users/shenle/PycharmProjects/pythontest100/venv/bin/python /Users/shenle/PycharmProjects/pythontest100/test001.py</p>
<html><h1>www.itcast.cn</h1></html> 符合要求
<html><h1>www.baidu.com</h1></html> 符合要求
<html><h1>www.itcast.cn</h1> 不符合要求

<p>Process finished with exit code 0</p>
<ul>
<li>python 传参数是传值还是传地址？</li>
</ul>
<p>python中函数参数是引用传递，而不是值传递。</p>
<p>不管什么类型的参数，在 Python 函数中对参数直接使用“=”符号赋值是没用的，直接使用“=”符号赋值并不能改变参数。<br>如果需要让函数修改某些数据，则可以通过把这些数据包装成列表、字典等可变对象，然后把列表、字典等可变对象作为参数传入函数，在函数中通过列表、字典的方法修改它们，这样才能改变这些数据。</p>
<p>对于不可变类型，如数字、字符、元组等，因变量不可修改，所以运算不会修改自身。<br>但是对于可变类型，如列表、字典等，因变量可以修改，所以函数体运算可能会修改传入的参数变量。</p>
<ul>
<li>求两个列表的交集、差集和并集。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">jj1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i <span class="keyword">in</span> b]</span><br><span class="line">jj2 = <span class="built_in">list</span>(<span class="built_in">set</span>(a).intersection(<span class="built_in">set</span>(b)))</span><br><span class="line"></span><br><span class="line">cj1 = <span class="built_in">list</span>(<span class="built_in">set</span>(a).difference(<span class="built_in">set</span>(b)))  <span class="comment">###在a不在b</span></span><br><span class="line">cj2 = <span class="built_in">list</span>(<span class="built_in">set</span>(b).difference(<span class="built_in">set</span>(a)))  <span class="comment">###在b不在a</span></span><br><span class="line"></span><br><span class="line">bj1 = <span class="built_in">list</span>(<span class="built_in">set</span>(b).union(<span class="built_in">set</span>(a)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jj1)</span><br><span class="line"><span class="built_in">print</span>(jj2)</span><br><span class="line"><span class="built_in">print</span>(cj1)</span><br><span class="line"><span class="built_in">print</span>(cj2)</span><br><span class="line"><span class="built_in">print</span>(bj1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>生成0到100之间的随机数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">### 生成随机整数。</span></span><br><span class="line">result1 = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 生成随机整数</span></span><br><span class="line">result2 = random.choice(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">101</span>))</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 生成随机小数</span></span><br><span class="line">result3 = <span class="number">100</span>*random.random()</span><br><span class="line"><span class="built_in">print</span>(result3)</span><br></pre></td></tr></table></figure>


<ul>
<li>lambda匿名函数的好处</li>
</ul>
<p>精简代码，省去了定义函数、map省去了for循环操作。</p>
<ul>
<li>常见网络传输协议</li>
</ul>
<p>UDP/TCP/FTP/HTTP/SMTP等等。</p>
<ul>
<li>单引号、双引号、三引号的用法。</li>
</ul>
<p>单引号和双引号是等效的，如果要换行，那么需要使用符号“\”；<br>三引号则可以直接换行，并且可以包含注释。<br>单引号里不能加单引号，但可加“\”或者是双引号进行转义输出。<br>双引号里面不能再加双引号，但是可以加“\”或者是单引号进行转义输出。</p>
<ul>
<li>HTTP请求中的get和post的区别。</li>
</ul>
<p>一、最普遍的答案</p>
<p>我们在Google或百度上搜索这个问题时，得到最多的答案就是如下三点，而这似乎也成为了“标准答案”，其实这个答案有待商榷。</p>
<ol>
<li><p>GET使用URL或Cookie传参，而POST将数据放在BODY中。</p>
</li>
<li><p>GET方式提交的数据有长度限制，则POST的数据则可以非常大。</p>
</li>
<li><p>POST比GET安全，因为数据在地址栏上不可见。</p>
</li>
</ol>
<p>二、“标准答案”其实是错的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> GET使用URL或Cookie传参，而POST将数据放在BODY中</span><br><span class="line">GET和POST是由HTTP协议定义的。在HTTP协议中，Method和Data（URL， Body， Header）是正交的两个概念，也就是说，使用哪个Method与应用层的数据如何传输是没有相互关系的。</span><br><span class="line">HTTP没有要求，如果Method是POST数据就要放在BODY中。也没有要求，如果Method是GET，数据（参数）就一定要放在URL中而不能放在BODY中。</span><br><span class="line">那么，网上流传甚广的这个说法是从何而来的呢？我在HTML标准中，找到了相似的描述。这和网上流传的说法一致。但是这只是HTML标准对HTTP协议的用法的约定。怎么能当成GET和POST的区别呢？</span><br><span class="line">而且，现代的Web Server都是支持GET中包含BODY这样的请求。虽然这种请求不可能从浏览器发出，但是现在的Web Server又不是只给浏览器用，已经完全地超出了HTML服务器的范畴了。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> GET方式提交的数据有长度限制，则POST的数据则可以非常大</span><br><span class="line">先说结论：HTTP协议对GET和POST都没有对长度的限制。HTTP协议明确地指出了，HTTP头和Body都没有长度的要求。</span><br><span class="line">首先是<span class="string">&quot;GET方式提交的数据有长度限制&quot;</span>，如果我们使用GET通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是<span class="number">2083</span>字节(2K+<span class="number">35</span>)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</span><br><span class="line">注意这个限制是整个URL长度，而不仅仅是你的参数值数据长度。</span><br><span class="line">POST也是一样，POST是没有大小限制的，HTTP协议规范也没有对POST数据进行大小限制，起限制作用的是服务器的处理程序的处理能力。</span><br><span class="line">当然，我们常说GET的URL会有长度上的限制这个说法是怎么回事呢？虽然这个不是GET和POST的本质区别，但是我们也可以说说导致URL长度限制的两方面的原因：</span><br><span class="line"><span class="number">1.</span> 浏览器。早期的浏览器会对URL长度做限制。而现在的具体限制是怎么样的，我自己没有亲测过，就不复制网上的说法啦。</span><br><span class="line"><span class="number">2.</span> 服务器。URL长了，对服务器处理也是一种负担。原本一个会话就没有多少数据，现在如果有人恶意地构造几个M大小的URL，并不停地访问你的服务器。服务器的最大并发数显然会下降。另一种攻击方式是，告诉服务器Content-Length是一个很大的数，然后只给服务器发一点儿数据，服务器你就傻等着去吧。哪怕你有超时设置，这种故意的次次访问超时也能让服务器吃不了兜着走。有鉴于此，多数服务器出于安全啦、稳定啦方面的考虑，会给URL长度加限制。但是这个限制是针对所有HTTP请求的，与GET、POST没有关系。</span><br><span class="line"><span class="number">3.</span> POST比GET安全，因为数据在地址栏上不可见</span><br><span class="line">这个说法其实也是基于上面的<span class="number">1</span>，<span class="number">2</span>两点的基础上来说的，我觉得没什么问题，但是需要明白为什么使用GET在地址栏上就不安全了，以及还有没有其他原因说明“POST比GET安全”。</span><br><span class="line">通过GET提交数据，用户名和密码将明文出现在URL上，因为登录页面有可能被浏览器缓存，其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，</span><br><span class="line">除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</span><br><span class="line"></span><br><span class="line">三、我的理解</span><br><span class="line"></span><br><span class="line">“<span class="number">1.</span> GET使用URL或Cookie传参，而POST将数据放在BODY中”，这个是因为HTTP协议用法的约定。并非它们的本身区别。</span><br><span class="line">“<span class="number">2.</span> GET方式提交的数据有长度限制，则POST的数据则可以非常大”，这个是因为它们使用的操作系统和浏览器设置的不同引起的区别。也不是GET和POST本身的区别。</span><br><span class="line">“<span class="number">3.</span> POST比GET安全，因为数据在地址栏上不可见”，这个说法没毛病，但依然不是GET和POST本身的区别。</span><br><span class="line">虽然这三点不是它们的本身区别，但至少是它们在使用上的区别，所以我在面试这个问题时，如果面试者能够回答上面三点我基本会给个及格分。那么你想不想要更高的分数？</span><br><span class="line"></span><br><span class="line">四、终极区别</span><br><span class="line">GET和POST最大的区别主要是GET请求是幂等性的，POST请求不是。这个是它们本质区别，上面的只是在使用上的区别。</span><br><span class="line">什么是幂等性？幂等性是指一次和多次请求某一个资源应该具有同样的副作用。</span><br><span class="line">简单来说意味着对同一URL的多个请求应该返回同样的结果。</span><br><span class="line">正因为它们有这样的区别，所以不应该且不能用get请求做数据的增删改这些有副作用的操作。</span><br><span class="line">因为get请求是幂等的，在网络不好的隧道中会尝试重试。如果用get请求增数据，</span><br><span class="line">会有重复操作的风险，而这种重复操作可能会导致副作用（浏览器和操作系统并不知道你会用get请求去做增操作）。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>python中读取excel的方法。</li>
</ul>
<p>应用数据分析库，pandas</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;333.xlsx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>简述多线程、多进程。</li>
</ul>
<p>多任务：<br>计算机的核心是CPU，承担了所有的计算任务。一个CPU在一个时间切片里只能运行一个程序。<br>多任务的目的：提升程序的执行效率，更充分利用cpu的资源</p>
<p>并行：当任务数小于或者等于cpu核数时，每一个任务都有对应的cpu来处理执行，即任务真的是一起执行的<br>并发：当任务数多于cpu核数，通过操作系统的各种任务调度算法，实现用多个任务串行执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去像一起执行而已）<br>运行的程序即进程,进程包含线程(&gt;=1),线程包含协程(&gt;=1)</p>
<p>切换开销:进程&gt;线程&gt;协程(并发量更高)</p>
<p>区别：<br>进程：多进程利用多核CPU完成任务,是操作系统资源分配的最小单位，进程拥有自己独立的内存空间，所以进程间数据不共享，进程之间的通信由操作系统传递，导致通讯效率低，切换开销大,创建或销毁进程时系统开销大<br>线程：是CPU调度的最小单位，所有线程共享进程的内存空间，通讯效率高，切换开销小，但共享意味着竞争=&gt;GIL(CPython全局解释器锁,同时只能运行一个线程,无法利用多核 CPU),在I/O阻塞的时候，解释器会释放GIL<br>协程：一个可以挂起的函数，协程的调度完全由用户控制，用函数切换，开销极小。genvent，monkey.patchall自动捕捉耗时点</p>
<p>场景：<br>线程，协程：IO密集（网络IO、磁盘IO、数据库IO）大量时间花在数据传输<br>进程：连续密集的计算（C10K）大量时间花在计算<br>一般开发中：多进程(cpu的核数)+多协程<br>业余时间用过多线程写爬虫，提升效率=》获取所有url,并发爬取<br>在多个用户同时发起对同一个商品的下单请求时，会出现资源竞争问题，导致库存的最终结果出现异常=》乐观锁</p>
<ul>
<li>python正则中的search与match</li>
</ul>
<p>Python3 正则表达式<br>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。<br>Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达式模式。<br>re 模块使 Python 语言拥有全部的正则表达式功能。<br>compile 函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。<br>re 模块也提供了与这些方法功能完全一致的函数，这些函数使用一个模式字符串做为它们的第一个参数。</p>
<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。<br>re.match(pattern, string, flags=0)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.match(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.match(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>))         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>

<p>输出：<br>(0, 3)<br>None</p>
<p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p>函数语法：</p>
<p>re.search(pattern, string, flags=0)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="comment"># 在起始位置匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;com&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())         <span class="comment"># 不在起始位置匹配</span></span><br></pre></td></tr></table></figure>

<p>输出：<br>(0, 3)<br>(11, 14)</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python interview 4</title>
    <url>/2022/08/22/python-interview-4/</url>
    <content><![CDATA[<h2 id="Python面试题整理-V1-day4"><a href="#Python面试题整理-V1-day4" class="headerlink" title="Python面试题整理-V1 day4"></a>Python面试题整理-V1 day4</h2><ul>
<li><p>根据键对字典排序，使用zip</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### 根据键对字典排序，使用zip</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">17</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic.keys(),dic.values())</span><br><span class="line"></span><br><span class="line"><span class="comment">### 字典转列表，再转元组。</span></span><br><span class="line">foo = <span class="built_in">zip</span>(dic.keys(),dic.values())</span><br><span class="line"><span class="built_in">print</span>(foo)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 排序。</span></span><br><span class="line">foo = [i <span class="keyword">for</span> i <span class="keyword">in</span> foo]</span><br><span class="line"><span class="built_in">print</span>(foo)</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">sorted</span>(foo,key = <span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;根据键排序&#x27;</span>,b)</span><br><span class="line"></span><br><span class="line">newdic = &#123;i[<span class="number">0</span>]:i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> b&#125;</span><br><span class="line"><span class="built_in">print</span>(newdic.keys(),newdic.values())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>根据键对字典排序，不使用zip</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 根据键对字典排序，不使用zip</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">17</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic.keys(),dic.values())</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">sorted</span>(dic.items(),key = <span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;根据键排序&#x27;</span>,b)</span><br><span class="line"></span><br><span class="line">newdic = &#123;i[<span class="number">0</span>]:i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> b&#125;</span><br><span class="line"><span class="built_in">print</span>(newdic.keys(),newdic.values())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>列表推导式、字典推导式、生成器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###  列表推导式、字典推导式、生成器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">td_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(td_list)</span><br><span class="line"></span><br><span class="line">td_dic = &#123;key:random.randint(<span class="number">1</span>, <span class="number">9</span>) <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(td_dic.keys(),td_dic.values())</span><br><span class="line"></span><br><span class="line">td_generator = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(td_generator)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<p>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>dict_keys([‘a’, ‘b’, ‘c’, ‘d’]) dict_values([4, 6, 2, 5])<br>&lt;generator object <genexpr> at 0x108b6b270&gt;</p>
<ul>
<li>根据字符串的长度排序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 根据字符串的长度排序</span></span><br><span class="line"></span><br><span class="line">s = [<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;casdg&#x27;</span>,<span class="string">&#x27;dsfsdf&#x27;</span>,<span class="string">&#x27;dsfs&#x27;</span>,<span class="string">&#x27;nooh&#x27;</span>,<span class="string">&#x27;sdfds&#x27;</span>,<span class="string">&#x27;zcfasfd&#x27;</span>,<span class="string">&#x27;df&#x27;</span>,<span class="string">&#x27;fd&#x27;</span>,<span class="string">&#x27;dfd&#x27;</span>]</span><br><span class="line">b = <span class="built_in">sorted</span>(s,key = <span class="keyword">lambda</span> x:<span class="built_in">len</span>(x))</span><br><span class="line"><span class="comment">### sorted返回值给b，没有改变原来的字符串 s。</span></span><br><span class="line"><span class="built_in">print</span>(b,s)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 直接sorted不赋值，则</span></span><br><span class="line">s.sort(key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>输出结果：<br>[‘a’, ‘df’, ‘fd’, ‘abc’, ‘dfd’, ‘dsfs’, ‘nooh’, ‘casdg’, ‘sdfds’, ‘dsfsdf’, ‘zcfasfd’] [‘abc’, ‘a’, ‘casdg’, ‘dsfsdf’, ‘dsfs’, ‘nooh’, ‘sdfds’, ‘zcfasfd’, ‘df’, ‘fd’, ‘dfd’]<br>[‘a’, ‘df’, ‘fd’, ‘abc’, ‘dfd’, ‘dsfs’, ‘nooh’, ‘casdg’, ‘sdfds’, ‘dsfsdf’, ‘zcfasfd’]</p>
<ul>
<li>举例说明sql注入的例子和解法。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">### 举例说明<span class="keyword">sql</span>注入的例子和解法。</span><br><span class="line"></span><br><span class="line">正常<span class="keyword">sql</span>：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> table1.name <span class="operator">=</span> <span class="string">&#x27;zs&#x27;</span>；</span><br><span class="line">输入<span class="string">&#x27;zs&#x27;</span>；</span><br><span class="line"><span class="keyword">sql</span>注入：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> table1.name <span class="operator">=</span> <span class="string">&#x27;zs&#x27;</span>；<span class="keyword">drop</span> database demo;</span><br><span class="line">实际输入<span class="string">&#x27;zs&#x27;</span>；<span class="keyword">drop</span> database demo;</span><br><span class="line">解法：只传参数，不传大段的完整的<span class="keyword">sql</span>；特别是DDL的<span class="keyword">sql</span></span><br><span class="line">将name <span class="operator">=</span> 后面的内容用参数化解决。比如用params <span class="operator">=</span> [input_name],传入<span class="keyword">sql</span>为</span><br><span class="line">count <span class="operator">=</span> cs1.execute(<span class="string">&#x27;select * from table1 where table1.name = %s&#x27;</span>,params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">sql</span>注入详解：</span><br><span class="line">https:<span class="operator">/</span><span class="operator">/</span>blog.csdn.net<span class="operator">/</span>huangyongkang666<span class="operator">/</span>article<span class="operator">/</span>details<span class="operator">/</span><span class="number">123624015</span></span><br><span class="line"></span><br><span class="line">几个常见实例：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>。组合出来的<span class="keyword">sql</span>注入语句为：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>注意多了引号。组合出来的<span class="keyword">sql</span>注入语句为：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> chr<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="keyword">like</span> <span class="string">&#x27;%关键字%&#x27;</span>`。</span><br><span class="line">组合出来的<span class="keyword">sql</span>注入语句为：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">search</span> <span class="keyword">like</span> <span class="string">&#x27;%测试 %&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;%1%&#x27;</span><span class="operator">=</span><span class="string">&#x27;%1%&#x27;</span></span><br><span class="line">测试<span class="operator">%</span><span class="string">&#x27; union select 1,2,3,4 and &#x27;</span><span class="operator">%</span><span class="string">&#x27;=&#x27;</span></span><br><span class="line"></span><br><span class="line">常见，<span class="keyword">get</span>注入，post注入，cookie注入，http头部注入等等。</span><br></pre></td></tr></table></figure>


<ul>
<li>s=”info:xiaoZhang 33 shandong”,⽤正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 正则表达式，切割字符串</span></span><br><span class="line"><span class="comment">### s=&quot;info:xiaoZhang 33 shandong&quot;,⽤正则切分字符串输出[&#x27;info&#x27;, &#x27;xiaoZhang&#x27;, &#x27;33&#x27;, &#x27;shandong&#x27;]</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s=<span class="string">&quot;info:xiaoZhang 33 shandong&quot;</span></span><br><span class="line">res = re.split(<span class="string">r&quot;:| &quot;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>正则匹配以@163.com结尾的邮箱。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 正则匹配以@163.com结尾的邮箱。</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">email_list = [<span class="string">&#x27;xiaowang@163.com&#x27;</span>,<span class="string">&#x27;xiaowang@163.comheiheihei&#x27;</span>,<span class="string">&#x27;.com.xiaowang@qq.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> email_list:</span><br><span class="line">    ret = re.match(<span class="string">&quot;[\w]&#123;4,20&#125;@163.com$&quot;</span>, email)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 是符合要求的email地址，匹配后的结果是，&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(email, ret.group()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 不符合要求&#x27;</span>.<span class="built_in">format</span>(email))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>递归求和</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_fun</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &gt;=<span class="number">1</span>:</span><br><span class="line">        ret = num + sum_fun(num - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum_fun(<span class="number">5</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>python字典与json字符串相互转换法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;zhangsan&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">ret = json.dumps(<span class="built_in">dict</span>)</span><br><span class="line"><span class="built_in">print</span>(ret,<span class="built_in">type</span>(ret))</span><br><span class="line"></span><br><span class="line">ret2 = json.loads(ret)</span><br><span class="line"><span class="built_in">print</span>(ret2,<span class="built_in">type</span>(ret2))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>MyISAM 与 InnoDB的区别</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">区别：<span class="number">1.</span> InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败； </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> InnoDB 是聚集索引，MyISAM 是非聚集索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。 </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> InnoDB 不保存表的具体行数，执行 <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">table</span> 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；    </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。这也是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</span><br><span class="line"></span><br><span class="line">如何选择：</span><br><span class="line"><span class="number">1.</span> 是否要支持事务，如果要请选择 InnoDB，如果不需要可以考虑 MyISAM；</span><br><span class="line"><span class="number">2.</span> 如果表中绝大多数都只是读查询，可以考虑 MyISAM，如果既有读写也挺频繁，请使用InnoDB。</span><br><span class="line"><span class="number">3.</span> 系统奔溃后，MyISAM恢复起来更困难，能否接受，不能接受就选 InnoDB； </span><br><span class="line"><span class="number">4.</span> MySQL5<span class="number">.5</span>版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)，说明其优势是有目共睹的。</span><br><span class="line">如果你不知道用什么存储引擎，那就用InnoDB，至少不会差。</span><br></pre></td></tr></table></figure>

<ul>
<li>统计字符串中，某个字符出现的次数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;中国，china，中国，日本，澳大利亚，美国，日本，中国&quot;</span></span><br><span class="line">ret = <span class="built_in">str</span>.count(<span class="string">&quot;中国&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串转换大小写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;HHHuuuaaBBB&quot;</span></span><br><span class="line">str1 = <span class="built_in">str</span>.upper()</span><br><span class="line">str2 = <span class="built_in">str</span>.lower()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str1,str2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>去除空格的方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello abc hh  hh  aaa&quot;</span></span><br><span class="line">ret1 = <span class="built_in">str</span>.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret1)</span><br><span class="line"></span><br><span class="line">list2 = <span class="built_in">str</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">ret2 = <span class="string">&quot;&quot;</span>.join(list2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ret2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>正则匹配不是以4和7结尾的手机号</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">tel_list = [<span class="string">&#x27;18665975275&#x27;</span>,<span class="string">&#x27;15690876574&#x27;</span>,<span class="string">&#x27;10086&#x27;</span>,<span class="string">&#x27;18619823487&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> telphone <span class="keyword">in</span> tel_list:</span><br><span class="line">    ret = re.match(<span class="string">&quot;1\d&#123;9&#125;[0-3,5-6,8-9]&quot;</span>,telphone)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;想要的结果&#123;&#125;&quot;</span>.<span class="built_in">format</span>(ret.group()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误的结果&#123;&#125;&quot;</span>.<span class="built_in">format</span>(telphone))</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>interface testing basic</title>
    <url>/2022/08/28/interface-testing-basic/</url>
    <content><![CDATA[<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><h3 id="接口测试的定义"><a href="#接口测试的定义" class="headerlink" title="接口测试的定义"></a>接口测试的定义</h3><p>接口测试是测试系统组件间接口的一种测试。重点是检查数据交换、传递和控制管理过程，以及系统间相互逻辑依赖关系等。</p>
<p>一般分为两种：程序内部的接口，系统对外的接口。</p>
<h3 id="接口测试的目的"><a href="#接口测试的目的" class="headerlink" title="接口测试的目的"></a>接口测试的目的</h3><ul>
<li>检查UI系统无法发下的bug</li>
<li>检查系统的安全性和稳定性</li>
<li>相对于UI自动化测试，接口测试比较稳定，容易实现自动化持续集成</li>
<li>尽早发现系统的底层缺陷</li>
<li>缩短测试周期，支持后端快速发版本的需求</li>
<li>支持前端的随意变化，后端不用变。</li>
</ul>
<h3 id="接口测试原理"><a href="#接口测试原理" class="headerlink" title="接口测试原理"></a>接口测试原理</h3><p>可以理解为http请求的流程，通过测试程序或者测试工具模拟客户端向服务器发送请求报文。<br>服务器接受请求报文后对其做处理，然后将响应结果报文返回发给客户端。</p>
<h3 id="接口测试流程"><a href="#接口测试流程" class="headerlink" title="接口测试流程"></a>接口测试流程</h3><p>黑盒测试范畴，</p>
<ul>
<li>接口需求分析</li>
</ul>
<p>对接口文档进行充分研读。<br>接口文档一般包括：接口说明、请求地址、请求方式如get和post等、<br>请求参数、参数类型、参数约束、正常响应报文、异常响应报文等。</p>
<ul>
<li>接口测试用例编写</li>
</ul>
<p>等价类、边界值测试分析：<br>输入参数是否合法、是否为空、参数是否可包含特殊字符、数值范围及大小等。<br>参数组合验证：参数排列组合。<br>接口安全验证：是否有验证，是否有加密等<br>业务逻辑验证：存在上下游的逻辑关系等。</p>
<ul>
<li>测试工具选择。</li>
</ul>
<p>如postman、Jmeter、SoupUI、LoadRunner、<br>Robot Framework + RequestsLibrary、Java + HttpClient 和Python + Requests等。</p>
<ul>
<li>构造请求并执行测试。</li>
</ul>
<p>根据测试用例来设计测试用例、执行测试、检查接口返回的数据是否达到预期。</p>
<h3 id="接口测试用例的设计"><a href="#接口测试用例的设计" class="headerlink" title="接口测试用例的设计"></a>接口测试用例的设计</h3><p>包括用例名称、前置条件、请求地址、请求header、请求参数、响应检查点。</p>
<h3 id="http基础"><a href="#http基础" class="headerlink" title="http基础"></a>http基础</h3><p>http请求，常见包括get、post等报文，主要包括请求行、请求头信息、空行、请求体等。<br>http响应，可以抓包看看，主要包括响应状态行、响应头信息、空行、响应体等。<br>http状态码：<br>1xx 服务端接受到请求，需要进一步处理，客户端请等待。<br>2xx 请求处理成功，常见200 ok<br>3xx 重定向操作，需要进一步操作完成请求，如301、302等。<br>4xx 客户端请求错误，有语法错误或者无法实现，如400语法错误、401未经授权、403服务器理解客户端的请求，但拒绝服务。404 请求资源不存在<br>5xx 服务器内部错误，不能正确处理请求，如500内部错误，无法完成请求。</p>
<p>除了post、get其他还有如put 传送数据取代指定文档内容等。delete 删除服务器的资源等。</p>
<h3 id="cookie-和-session"><a href="#cookie-和-session" class="headerlink" title="cookie 和 session"></a>cookie 和 session</h3><p>主要用于确定用户身份，cookie在客户端记录信息确认身份，发送给服务器后，（cookie主要包含id、密码、浏览过的网站、停留时间、过期时间等内容）<br>服务器在cookie基础上添加session id 返回给客户端确认存储。（session包含cookie + session id）<br>下次客户端发送cookie就会带上session id再次请求与session就关联上了。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Interface auto test</title>
    <url>/2022/09/13/Interface-auto-test/</url>
    <content><![CDATA[<h2 id="Python接口自动化实战"><a href="#Python接口自动化实战" class="headerlink" title="Python接口自动化实战"></a>Python接口自动化实战</h2><p>接口自动化常用，python + requests</p>
<p>requests常用实例，get、post、json、requests headers、response 等结合cookie 、session、token等操作。<br>最后整合DDT    数据驱动进行接口自动化实战。</p>
<h3 id="安装request库"><a href="#安装request库" class="headerlink" title="安装request库"></a>安装request库</h3><p>pip install requests</p>
<h3 id="requests-发送请求和参数传递"><a href="#requests-发送请求和参数传递" class="headerlink" title="requests 发送请求和参数传递"></a>requests 发送请求和参数传递</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#6.2.2  发送get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.2.2  发送get请求 带参数</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://www.baidu.com/s?&#x27;</span>,params=&#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;python&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.2.3  发送form表单</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">payload = &#123;<span class="string">&#x27;account&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;password&#x27;</span>:<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">           <span class="string">&#x27;referer&#x27;</span>:<span class="string">&quot;http://192.168.0.162:4444/zentao/www/my/&quot;</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;http://192.168.1.116:8011/zentao/www/user-login.html&#x27;</span>,data=payload,</span><br><span class="line">                  headers=&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.2.4  发送xml数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url  =  <span class="string">&#x27;http://ws.webxml.com.cn/WebServices/WeatherWS.asmx&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;soap:Body&gt;</span></span><br><span class="line"><span class="string">    &lt;getSupportCityString xmlns=&quot;http://WebXml.com.cn/&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;theRegionCode&gt;3114&lt;/theRegionCode&gt;</span></span><br><span class="line"><span class="string">    &lt;/getSupportCityString&gt;</span></span><br><span class="line"><span class="string">  &lt;/soap:Body&gt;</span></span><br><span class="line"><span class="string">&lt;/soap:Envelope&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">r = requests.post(url=url, data=payload, headers=&#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/xml&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####6.2.5  发送json请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,json</span><br><span class="line"></span><br><span class="line">url  = <span class="string">&#x27;http://183.62.166.42:11125/CyzgMobileConfigService/GetDataInfo&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;CommandCode&#x27;</span>: <span class="string">&#x27;GetAllCityData&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Marker&#x27;</span>: <span class="string">&#x27;1482638389646&#x27;</span>, <span class="string">&quot;TransferData&quot;</span>: <span class="string">&quot;&#123;\&#x27;CityId\&#x27;:4565110&#125;&quot;</span>&#125;</span><br><span class="line">r = requests.post(url=url, json=payload, headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="处理cookie、session以及-token"><a href="#处理cookie、session以及-token" class="headerlink" title="处理cookie、session以及 token"></a>处理cookie、session以及 token</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####6.3  处理 token </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://212.123.456.123:1112/login&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">response = requests.post(url=url,json=data,</span><br><span class="line">                         headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&quot;application/json&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">### 把上述内容封装成写token文件输出，</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;token.md&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(response.json()[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">### 再补充一个读取token文件函数：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_token</span>(<span class="params">self</span>):</span></span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;token.md&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">		<span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 后续response中requests.get函数中可以带上headers=self.read_token()参数即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###6.4  处理 cookie</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;登录禅道获取登录后的session&#x27;&#x27;&#x27;</span></span><br><span class="line">   r=requests.post(<span class="string">&#x27;url=http://192.168.0.162:4444/zentao/www/user-login.html&#x27;</span>,</span><br><span class="line">                   data=&#123;<span class="string">&#x27;account&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;referer&#x27;</span>:<span class="string">&quot;http://192.168.0.162:4444/zentao/www/my/&quot;</span>&#125;)</span><br><span class="line">   <span class="keyword">return</span> r.cookies</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ViewBug</span>():</span></span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;查看bug单&#x27;&#x27;&#x27;</span></span><br><span class="line">   r = requests.get(url=<span class="string">&#x27;http://192.168.0.162:4444/zentao/www/my-bug.html&#x27;</span>,cookies=login())</span><br><span class="line">   <span class="keyword">return</span> r.text</span><br><span class="line"><span class="built_in">print</span>(ViewBug())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###6.5  处理 session</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;email&quot;</span>:<span class="string">&quot;18513600xxx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;icode&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;origURL&quot;</span>:<span class="string">&quot;http://www.renren.com/home&quot;</span>,</span><br><span class="line">    <span class="string">&quot;domain&quot;</span>:<span class="string">&quot;renren.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key_id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;captcha_type&quot;</span>:<span class="string">&quot;web_login&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;403ebf9eelri59d8df30669206e8885236klaece4884c0cca4642365b0e4096a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rkey&quot;</span>:<span class="string">&quot;41602f6afc3b0686fd38866f4cd6d5c8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;f&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=20181131458439&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">RenrenLogin</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;登陆接口&#x27;&#x27;&#x27;</span></span><br><span class="line">    s = requests.Session()</span><br><span class="line">    r = s.post(url=url,data=data)</span><br><span class="line">    <span class="keyword">return</span>  s</span><br></pre></td></tr></table></figure>

<p>后续的请求r = RenrenLogin().post(url=url,data=data)，这个就带上了cookie信息了<br>return r.text</p>
<h3 id="处理超时等待"><a href="#处理超时等待" class="headerlink" title="处理超时等待"></a>处理超时等待</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  <span class="comment">#导入requests库</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=<span class="string">&#x27;http://www.baidu.com&#x27;</span>,timeout=<span class="number">0.001</span>)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>

<h3 id="response对象解析"><a href="#response对象解析" class="headerlink" title="response对象解析"></a>response对象解析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">###7.7  Response对象解析</span></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;HTTP状态码:&#x27;</span>,r.status_code)  <span class="comment">#响应状态码 常见 200 301 302 404 500 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;返回原始响应体&#x27;</span>,r.raw)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;请求的响应体&#x27;</span>,r.content)  <span class="comment">#字节方式的响应体，会自动解码gzip和deflate 压缩</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;响应内容&#x27;</span>,r.text)         <span class="comment">#字符串方式的响应体，会自动根据响应头部的字符编码进行解码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;获取headers&#x27;</span>,r.headers)  <span class="comment">#以字典对象存储服务器响应头</span></span><br><span class="line"><span class="built_in">print</span>(r.json())    <span class="comment">#Requests中内置的 Json 解码器 将响应结果转换为JSON字符串</span></span><br><span class="line"><span class="built_in">print</span>(r.raise_for_status())   <span class="comment">#失败请求(非200 响应)抛出异常</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件上传实战"><a href="#文件上传实战" class="headerlink" title="文件上传实战"></a>文件上传实战</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####7.8  Requests文件上传实战</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zentaoLogin</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;登录请求&quot;&quot;&quot;</span></span><br><span class="line">   data = &#123;</span><br><span class="line">      <span class="string">&#x27;account&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;http://192.168.1.106:8011/zentao/www/doc-browse-product-0-59-0.html&#x27;</span>&#125;</span><br><span class="line">   <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;获取登录后返回cookie&quot;&quot;&quot;</span></span><br><span class="line">   r = requests.post(</span><br><span class="line">      url=<span class="string">&#x27;http://192.168.1.106:8011/zentao/www/user-login.html&#x27;</span>,</span><br><span class="line">      data=zentaoLogin(),</span><br><span class="line">      headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;)</span><br><span class="line">   <span class="keyword">return</span> r.cookies</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadData</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;接口参数&quot;&quot;&quot;</span></span><br><span class="line">   data = &#123;</span><br><span class="line">       <span class="string">&quot;product&quot;</span>: <span class="string">&quot;59&quot;</span>,</span><br><span class="line">       <span class="string">&quot;module&quot;</span>:  <span class="string">&quot;0&quot;</span>,</span><br><span class="line">       <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">       <span class="string">&quot;title&quot;</span>: <span class="string">&#x27;looking1&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;digest&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;labels[]&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;lib&#x27;</span>:<span class="string">&#x27;product&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadFile</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;上传文件接口&quot;&quot;&quot;</span></span><br><span class="line">   r = requests.post(</span><br><span class="line">      url= <span class="string">&#x27;http://192.168.1.106:8011/zentao/www/doc-create-product-0-0-0-doc.html&#x27;</span>,</span><br><span class="line">      data=uploadData(),</span><br><span class="line">      headers=&#123;<span class="string">&#x27;Conteny-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>&#125;,</span><br><span class="line">      files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&quot;1.jpg&quot;</span>, <span class="built_in">open</span>(<span class="string">r&quot;C:/1.jpg&quot;</span>, <span class="string">&quot;rb&quot;</span>), <span class="string">&quot;image/jpeg&quot;</span>, &#123;&#125;)&#125;,</span><br><span class="line">      cookies=login())</span><br><span class="line">   <span class="built_in">print</span>(r.status_code)</span><br><span class="line">   <span class="built_in">print</span>(r.text)</span><br><span class="line">uploadFile()</span><br></pre></td></tr></table></figure>

<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json  <span class="comment">#导入json库</span></span><br><span class="line"><span class="comment">#定义字典</span></span><br><span class="line">dict1=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;fighter&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;age&#x27;</span>:<span class="number">28</span>,</span><br><span class="line">      <span class="string">&#x27;address&#x27;</span>:<span class="string">&#x27;shenzhen&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;未序列化前的数据类型为:&#x27;</span>,<span class="built_in">type</span>(dict1))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;未序列化前的数据:&#x27;</span>,dict1)</span><br><span class="line"><span class="comment">#对python对象进行序列化操作</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;begin对python对象进行序列化操作------------&gt;&#x27;</span>)</span><br><span class="line">str1 = json.dumps(dict1)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;序列化后的数据类型为:&#x27;</span>,<span class="built_in">type</span>(str1))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;序列化后的数据为:&#x27;</span>,str1)</span><br><span class="line"><span class="comment">#对str1进行反序列化操作</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;begin对str1对象进行反序列化操作------------&gt;&#x27;</span>)</span><br><span class="line">dict2 = json.loads(str1)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;反序列化后的数据类型:&#x27;</span>,<span class="built_in">type</span>(dict2))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;反序列化后的数据:&#x27;</span>,dict2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="XML与JSON数据之间的转换"><a href="#XML与JSON数据之间的转换" class="headerlink" title="XML与JSON数据之间的转换"></a>XML与JSON数据之间的转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#7.11  XML与JSON数据之间的转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"><span class="comment">#定义xml转json的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xmltojson</span>(<span class="params">xmlstr</span>):</span></span><br><span class="line">  xmlparse = xmltodict.parse(xmlstr)    <span class="comment">#parse是的xml解析器</span></span><br><span class="line">  jsonstr = json.dumps(xmlparse,indent=<span class="number">2</span>,sort_keys=<span class="literal">True</span>)</span><br><span class="line">  <span class="built_in">print</span>(jsonstr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  xmlinfo = <span class="string">&quot;&quot;&quot;&lt;student&gt;</span></span><br><span class="line"><span class="string">    &lt;bokeid&gt;fighter006&lt;/bokeid&gt;</span></span><br><span class="line"><span class="string">    &lt;bokeinfo&gt;</span></span><br><span class="line"><span class="string">      &lt;cnbologsname&gt;laolu&lt;/cnbologsname&gt;</span></span><br><span class="line"><span class="string">      &lt;page&gt;230&lt;/page&gt;</span></span><br><span class="line"><span class="string">    &lt;/bokeinfo&gt;</span></span><br><span class="line"><span class="string">    &lt;date&gt;</span></span><br><span class="line"><span class="string">      &lt;address&gt;http://www.baidu.com&lt;/address&gt;</span></span><br><span class="line"><span class="string">      &lt;title&gt;python+ddt+requests&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/date&gt;</span></span><br><span class="line"><span class="string">  &lt;/student&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">  xmltojson(xmlinfo)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="接口测试框架设计和开发"><a href="#接口测试框架设计和开发" class="headerlink" title="接口测试框架设计和开发"></a>接口测试框架设计和开发</h3><p>测试框架<br>Config：<br><strong>init</strong>.py<br>config.ini<br>HTMLTestRunner.py<br>readConfig.py<br>Data：<br><strong>init</strong>.py<br>data.xlsx<br>taskID<br>Token.md<br>Log：<br><strong>init</strong>.py<br>log.txt<br>Reports：<br>2019-01-04 14_05_59result.html<br>2019-01-08 22_29_59result.html<br>2019-01-08 22_30_45result.html<br>2019-02-12 20_22_39result.html<br>2019-02-15 21_03_33result.html<br>2019-03-07 20_52_13result.html<br><strong>init</strong>.py<br>TestCases：<br><strong>init</strong>.py<br>test_tasks.py<br>Utils：<br><strong>init</strong>.py<br>excles.py<br>page.py</p>
<p><strong>init</strong>.py<br>runMain.py</p>
<p>config.ini:</p>
<p>[EMAIL]<br>mail_host = smtp.126.com<br>mail_user = <a href="mailto:&#x6c;&#117;&#114;&#x75;&#105;&#102;&#x65;&#x6e;&#103;&#64;&#49;&#50;&#x36;&#46;&#99;&#111;&#x6d;">&#x6c;&#117;&#114;&#x75;&#105;&#102;&#x65;&#x6e;&#103;&#64;&#49;&#50;&#x36;&#46;&#99;&#111;&#x6d;</a><br>mail_pass = qq123456789<br>sender = <a href="mailto:&#108;&#x75;&#x72;&#x75;&#x69;&#102;&#101;&#110;&#103;&#x78;&#64;&#x31;&#x32;&#54;&#46;&#99;&#111;&#x6d;">&#108;&#x75;&#x72;&#x75;&#x69;&#102;&#101;&#110;&#103;&#x78;&#64;&#x31;&#x32;&#54;&#46;&#99;&#111;&#x6d;</a><br>receiver = <a href="mailto:&#x6c;&#117;&#x72;&#x75;&#105;&#x66;&#x65;&#x6e;&#x67;&#120;&#x40;&#x31;&#50;&#54;&#46;&#99;&#111;&#109;">&#x6c;&#117;&#x72;&#x75;&#105;&#x66;&#x65;&#x6e;&#x67;&#120;&#x40;&#x31;&#50;&#54;&#46;&#99;&#111;&#109;</a><br>subject = 接口自动化测试报告</p>
<p>readConfig.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">创建configParser对象cf</span><br><span class="line">cf = configparser.ConfigParser()</span><br><span class="line"><span class="comment"># read(filename) 读文件内容</span></span><br><span class="line">filename = cf.read(<span class="string">&quot;config.ini&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(filename)</span><br><span class="line"><span class="comment"># sections() 得到所有的section，以列表形式返回</span></span><br><span class="line">sec = cf.sections()</span><br><span class="line"><span class="built_in">print</span>(sec)</span><br><span class="line"><span class="comment"># options(section) 得到section下的所有option</span></span><br><span class="line">opt = cf.options(<span class="string">&quot;EMAIL&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(opt)</span><br><span class="line"><span class="comment"># items 得到section的所有键值对</span></span><br><span class="line">value = cf.items(<span class="string">&quot;EMAIL&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment"># get(section,option) 得到section中的option值，返回string/int类型的结果</span></span><br><span class="line">email_host = cf.get(<span class="string">&quot;EMAIL&quot;</span>,<span class="string">&quot;mail_host&quot;</span>)</span><br><span class="line">email_password = cf.get(<span class="string">&quot;EMAIL&quot;</span>,<span class="string">&quot;mail_pass&quot;</span>)</span><br><span class="line">email_sender = cf.get(<span class="string">&#x27;EMAIL&#x27;</span>,<span class="string">&#x27;sender&#x27;</span>)</span><br><span class="line">email_user = cf.get(<span class="string">&#x27;EMAIL&#x27;</span>,<span class="string">&#x27;mail_user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>data下放<br>xlsx：<br>请求地址    是否携带请求数据    是否携带token    请求方式    参数依赖<br><a href="http://211.149.163.145:3000/register">http://211.149.163.145:3000/register</a>    {“username”:”jackLu”,”password”:”jackLu”,”password_confirmation”:”jackLu”}    “无”    post    “无”<br><a href="http://211.149.163.145:3000/login">http://211.149.163.145:3000/login</a>    {“username”: “jackLu”, “password”:”jackLu”}    “无”    post    “无”<br><a href="http://211.149.163.145:3000/api/tasks">http://211.149.163.145:3000/api/tasks</a>    否    {“token”:”asdfasdfsdfssfdsafdsafds”}    get    “无”<br><a href="http://211.149.163.145:3000/api/tasks">http://211.149.163.145:3000/api/tasks</a>    {“title”:”<a href="https://www.cnblogs.co/fighter007&quot;,&quot;desc&quot;:&quot;%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0&quot;%7D">https://www.cnblogs.co/fighter007&quot;,&quot;desc&quot;:&quot;接口描述&quot;}</a>    {“token”:”dsfsdsdfsdccxzvzcxttryu”}    post    “无”<br><a href="http://211.149.163.145:3000/api/tasks/">http://211.149.163.145:3000/api/tasks/</a>:    否    {“token”:”ryrtyrtytreytryretryngfng”}    delete    有</p>
<p>taskID<br>Token.md</p>
<p>LOG下放日志</p>
<p>Reports下放测试报告文件</p>
<p>测试用例，test_tasks.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> testAPI.Utils.page <span class="keyword">import</span>  *   <span class="comment">#导入Helper工具类</span></span><br><span class="line"><span class="keyword">from</span> testAPI.Utils.excles <span class="keyword">import</span> *  <span class="comment">#导入Excels工具类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Totasks</span>(<span class="params">unittest.TestCase,Helper,Excels</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_register</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;注册接口&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = self.post(self.readUrl(<span class="number">1</span>),self.readData(<span class="number">1</span>))</span><br><span class="line">        self.assertEqual(r.json()[<span class="string">&#x27;username&#x27;</span>],<span class="string">&#x27;jackLu&#x27;</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言：注册接口响应数据检验jackLu&#x27;</span>)</span><br><span class="line">        self.assertEqual(r.status_code,<span class="number">200</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言：注册接口响应状态码检验200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_login</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;登录接口&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = self.post(self.readUrl(<span class="number">2</span>),self.readData(<span class="number">2</span>))</span><br><span class="line">        self.assertEqual(r.status_code,<span class="number">200</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言：登陆接口响应状态码检验200&#x27;</span>)</span><br><span class="line">        self.assertEqual(r.json()[<span class="string">&#x27;username&#x27;</span>],<span class="string">&#x27;jackLu&#x27;</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言：登陆接口响应数据检验jackLu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_writeToken</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;将token写入到Token.md文件中&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.post(self.readUrl(<span class="number">2</span>),self.readData(<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.dirname(<span class="string">&#x27;Token.md&#x27;</span>),<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span>  f:</span><br><span class="line">            self.Makelog(<span class="string">&#x27;日志跟踪：将token写入到Token.md文件中&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> f.write(r.json()[<span class="string">&#x27;token&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_Token</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;读取Token.md文件中的token值&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.dirname(<span class="string">&#x27;Token.md&#x27;</span>),<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.Makelog(<span class="string">&#x27;日志跟踪：读取Token.md文件中的token&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>  f.read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setToken</span>(<span class="params">self,rx</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;对动态参数token赋值&#x27;&#x27;&#x27;</span></span><br><span class="line">        dinfo = self.readToken(rx)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;动态参数处理：读取Excel表中的Token值&#x27;</span>)</span><br><span class="line">        dinfo[<span class="string">&#x27;token&#x27;</span>] = self.read_Token()</span><br><span class="line">        self.Makelog(<span class="string">&#x27;动态参数处理：对token重新赋值为最新服务器生成的token值&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;Authorization&quot;</span>:<span class="string">&quot;Bearer &quot;</span> + dinfo[<span class="string">&#x27;token&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_getApiTask</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;获取所有文章&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = self.get(self.readUrl(<span class="number">3</span>),self.setToken(<span class="number">3</span>))</span><br><span class="line">        self.assertEqual(r.status_code,<span class="number">200</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言：获取所有文章响应状态码检验200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_postApiTasks</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;创建文章接口&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = self.post(self.readUrl(<span class="number">4</span>),self.readData(<span class="number">4</span>),self.setToken(<span class="number">4</span>))</span><br><span class="line">        self.assertEqual(r.json()[<span class="string">&#x27;desc&#x27;</span>],<span class="string">&#x27;接口描述&#x27;</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言：创建文章响应数据断言[接口描述]&#x27;</span>)</span><br><span class="line">        self.assertEqual(r.status_code, <span class="number">200</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言：创建文章响应状态码检验200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeTaskId</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;写入Token到taskID文件中&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.post(self.readUrl(<span class="number">4</span>),self.readData(<span class="number">4</span>),self.setToken(<span class="number">5</span>))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.dirname(<span class="string">&#x27;taskID&#x27;</span>),<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="built_in">str</span>(r.json()[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">            self.Makelog(<span class="string">&#x27;接口业务：将创建后的文章ID写入到taskID文件中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTaskID</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;读取taskID&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.dirname(<span class="string">&#x27;taskID&#x27;</span>),<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.Makelog(<span class="string">&#x27;接口业务：读取创建文章后的文章ID&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span>  f.read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_deleteApiTasks</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;删除文章接口&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = self.delete(self.readUrl(<span class="number">5</span>) + self.getTaskID(),self.setToken(<span class="number">5</span>))</span><br><span class="line">        self.assertEqual(r.status_code,<span class="number">200</span>)</span><br><span class="line">        self.Makelog(<span class="string">&#x27;接口断言:删除文章响应状态码检验200&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main(verbosity=<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>excels.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd,json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Excels</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;构造 Excel 工具类&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readExcelData</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;读取rowx行数&#x27;&#x27;&#x27;</span></span><br><span class="line">        book  = xlrd.open_workbook(<span class="string">r&#x27;D:\project\testAPI\Data\data.xlsx&#x27;</span>)</span><br><span class="line">        table = book.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> table.row_values(rowx)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readUrl</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;读取接口地址&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.readExcelData(rowx)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readData</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;读取请求参数&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> json.loads(self.readExcelData(rowx)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readToken</span>(<span class="params">self,rowx</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;读取Token&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> json.loads(self.readExcelData(rowx)[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># e = Excels()</span></span><br><span class="line"><span class="comment"># print(e.readUrl(1))</span></span><br><span class="line"><span class="comment"># print(e.readData(1),type(e.readData(1)))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>page.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os,requests</span><br><span class="line"><span class="keyword">import</span> configparser <span class="comment">#导入configparser模块</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dirname</span>(<span class="params">self,fileName=<span class="string">&#x27;&#x27;</span>,filepath=<span class="string">&#x27;Data&#x27;</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        :param fileName: 文件名字</span></span><br><span class="line"><span class="string">        :param filepath: 写入指定目录</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> os.path.join(os.path.dirname(os.path.dirname(__file__)),filepath,fileName)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,url,headers=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;重构GET请求&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            r = requests.get(url=url,headers=headers)</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;接口地址有误！&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> M:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;错误原因：%s&#x27;</span>%M)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,url,data,headers=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;重构POST请求&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            r = requests.post(url=url,json=data,headers=headers)</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;接口地址有误！&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> M:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;错误原因：%s&#x27;</span>%M)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self,url,headers=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;重构DELETE请求&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> url:</span><br><span class="line">            r = requests.delete(url=url,headers=headers)</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;接口地址有误！&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> M:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;错误原因：%s&#x27;</span>%M)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Makelog</span>(<span class="params">self,log_content</span>):</span></span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;定义log日志级别&#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="comment">#定义日志文件</span></span><br><span class="line">       logFile = logging.FileHandler(self.dirname(<span class="string">&#x27;log.txt&#x27;</span>,<span class="string">&#x27;Log&#x27;</span>), <span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">       <span class="comment"># 设置log格式</span></span><br><span class="line">       fmt=logging.Formatter(fmt=<span class="string">&#x27;%(asctime)s-%(name)s-%(levelname)s-%(module)s:%(message)s&#x27;</span>)</span><br><span class="line">       logFile.setFormatter(fmt)</span><br><span class="line">       logger1 = logging.Logger(<span class="string">&#x27;logTest&#x27;</span>,level=logging.DEBUG)   <span class="comment">#定义日志</span></span><br><span class="line">       logger1.addHandler(logFile)</span><br><span class="line">       logger1.info(log_content)</span><br><span class="line">       logFile.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readConfig</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;读取配置文件中的内容&#x27;&#x27;&#x27;</span></span><br><span class="line">        l = []</span><br><span class="line">        config = configparser.ConfigParser()</span><br><span class="line">        config.read(self.dirname(<span class="string">&#x27;config.ini&#x27;</span>,<span class="string">&#x27;Config&#x27;</span>),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        email_host = config.get(<span class="string">&quot;EMAIL&quot;</span>,<span class="string">&quot;mail_host&quot;</span>)</span><br><span class="line">        email_password = config.get(<span class="string">&quot;EMAIL&quot;</span>,<span class="string">&quot;mail_pass&quot;</span>)</span><br><span class="line">        email_sender = config.get(<span class="string">&#x27;EMAIL&#x27;</span>,<span class="string">&#x27;sender&#x27;</span>)</span><br><span class="line">        email_user = config.get(<span class="string">&#x27;EMAIL&#x27;</span>,<span class="string">&#x27;mail_user&#x27;</span>)</span><br><span class="line">        email_receiver = config.get(<span class="string">&#x27;EMAIL&#x27;</span>,<span class="string">&#x27;receiver&#x27;</span>)</span><br><span class="line">        email_subject = config.get(<span class="string">&#x27;EMAIL&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>)</span><br><span class="line">        l.append(email_host)</span><br><span class="line">        l.append(email_password)</span><br><span class="line">        l.append(email_sender)</span><br><span class="line">        l.append(email_user)</span><br><span class="line">        l.append(email_receiver)</span><br><span class="line">        l.append(email_subject)</span><br><span class="line">        <span class="keyword">return</span>  l</span><br><span class="line"></span><br><span class="line">p = Helper()</span><br><span class="line"><span class="built_in">print</span>(p.readConfig())</span><br><span class="line"><span class="comment"># print(per.dirname(&#x27;token&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>runMain.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib  <span class="comment">#邮箱服务器</span></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText  <span class="comment">#邮件模版类</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> testAPI.Config.HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">import</span> time,os</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart <span class="comment">#邮件附件类</span></span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header  <span class="comment">#邮件头部模版</span></span><br><span class="line"><span class="keyword">import</span> configparser  <span class="comment">#导入configparser模块</span></span><br><span class="line"><span class="keyword">from</span> testAPI.Utils.page <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#发送带邮件的函数 动作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span>(<span class="params">file_new</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_new,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    mail_body = f.read()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#基本信息</span></span><br><span class="line">    smtpserver = Helper().readConfig()[<span class="number">0</span>]</span><br><span class="line">    pwd = Helper().readConfig()[<span class="number">1</span>] <span class="comment">#126邮箱授权码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#定义邮件主题</span></span><br><span class="line">    msg=MIMEMultipart()</span><br><span class="line">    msg[<span class="string">&#x27;subject&#x27;</span>] = Header(Helper().readConfig()[-<span class="number">1</span>],<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;from&#x27;</span>] = Helper().readConfig()[<span class="number">2</span>]   <span class="comment">#必须加 不加报错  发送者的邮箱</span></span><br><span class="line">    msg[<span class="string">&#x27;to&#x27;</span>] =  Helper().readConfig()[<span class="number">3</span>]     <span class="comment">#必须加 不加报错  接收者的邮箱</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#不加msg[&#x27;to&#x27;] msg[&#x27;from&#x27;]报错原因，是因为“发件人和收件人参数没有进行定义</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#HTML邮件正文 直接发送附件的代码片段</span></span><br><span class="line">    body=MIMEText(mail_body,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    msg.attach(body)</span><br><span class="line">    att = MIMEText(mail_body,<span class="string">&quot;base64&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    att[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line">    att[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&#x27;attachment; filename=&quot;Interface_report.html&quot;&#x27;</span></span><br><span class="line">    msg.attach(att)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#链接邮箱服务器发送邮件</span></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line">    smtp.connect(smtpserver)</span><br><span class="line">    smtp.login(msg[<span class="string">&#x27;from&#x27;</span>],pwd)</span><br><span class="line">    smtp.sendmail(msg[<span class="string">&#x27;from&#x27;</span>],msg[<span class="string">&#x27;to&#x27;</span>],msg.as_string())</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找最新邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_file</span>(<span class="params">test_dir</span>):</span></span><br><span class="line">    result_dir = test_dir</span><br><span class="line">    lists = os.listdir(result_dir)  <span class="comment">#print(lists)  #列出测试报告目录下面所有的文件</span></span><br><span class="line">    lists.sort()   <span class="comment">#从小到大排序 文件</span></span><br><span class="line">    file = [x <span class="keyword">for</span> x <span class="keyword">in</span> lists <span class="keyword">if</span> x.endswith(<span class="string">&#x27;.html&#x27;</span>)]  <span class="comment">#for循环遍历以.html格式的测试报告</span></span><br><span class="line">    file_path = os.path.join(result_dir,file[-<span class="number">1</span>])  <span class="comment">#找到测试报告目录下面最新的测试报告</span></span><br><span class="line">    <span class="keyword">return</span> file_path  <span class="comment">#返回最新的测试报告</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    base_dir = os.path.dirname(os.path.realpath(__file__))  <span class="comment">#获取文件当前路径 D:\project\PO\</span></span><br><span class="line">    test_dir = os.path.join(base_dir,<span class="string">&#x27;TestCases&#x27;</span>)  <span class="comment">#D:\project\PO\testCases</span></span><br><span class="line">    test_report = os.path.join(base_dir,<span class="string">&#x27;Reports&#x27;</span>)  <span class="comment">#D:\project\PO\report</span></span><br><span class="line">    testlist = unittest.defaultTestLoader.discover(test_dir,pattern = <span class="string">&#x27;test*.py&#x27;</span>)</span><br><span class="line">    now = time.strftime(<span class="string">&quot;%Y-%m-%d %H_%M_%S&quot;</span>)</span><br><span class="line">    filename = test_report + <span class="string">&quot;\\&quot;</span> + now + <span class="string">&#x27;result.html&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    runner = HTMLTestRunner(stream = fp,</span><br><span class="line">                            title = <span class="string">u&#x27;接口自动化测试框架设计报告&#x27;</span>,</span><br><span class="line">                            description = <span class="string">u&#x27;系统环境:Win10 用例执行情况:&#x27;</span>)</span><br><span class="line">    runner.run(testlist)</span><br><span class="line">    fp.close()</span><br><span class="line">    new_report = new_file(test_report)   <span class="comment">#获取最新报告文件</span></span><br><span class="line">    send_mail(new_report)                <span class="comment">#发送最新的测试报告</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql note 001</title>
    <url>/2022/09/19/Mysql-note-001/</url>
    <content><![CDATA[<p>《MYSQL实战45讲》学习笔记-Mysql 基础架构和日志系统</p>
<h3 id="基础架构，一条sql查询语句，是如何执行的？"><a href="#基础架构，一条sql查询语句，是如何执行的？" class="headerlink" title="基础架构，一条sql查询语句，是如何执行的？"></a>基础架构，一条sql查询语句，是如何执行的？</h3><ol>
<li>MySQL 可以分为 Server 层和存储引擎层两部分。</li>
</ol>
<p>Server 层包括连接器（管理连接、权限验证）<br>、查询缓存（命中则直接返回结果）<br>、分析器（词法分析、语法分析）<br>、优化器（执行计划生成、索引选择）<br>、执行器（操作引擎、返回结果）<br>等，<br>涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），<br>所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p>
<p>存储引擎层负责数据的存储和提取。（存储数据，提供读写接口）<br>其架构模式是插件式的，<br>支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p>
<p>你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。<br>不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。<br>不同存储引擎的表数据存取方式不同，支持的功能也不同。</p>
<ol start="2">
<li>连接器</li>
</ol>
<p>第一步，连接到数据库，就是连接器做的事情，用连接串来连接。<br>注意：如果对用户做了权限修改，只有重启才能生效。</p>
<p>可以使用show processlist，查看client的连接状态。<br>如果太久没有操作，比如Mysql客户端默认配置8小时，则Lost connection to MySQL server during query。<br>如果一直使用它就是长连接。用完就关闭client属于短连接。 推荐使用长连接。</p>
<p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。<br>这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。<br>怎么解决这个问题呢？你可以考虑以下两种方案。</p>
<ul>
<li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li>
<li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。<br>这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li>
</ul>
<ol start="3">
<li>查询缓存</li>
</ol>
<p>连接建立完成后，你就可以执行 select 语句了。</p>
<p>执行逻辑就会来到第二步：查询缓存。MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。<br>之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。<br>key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。</p>
<p>如果语句不在查询缓存中，就会继续后面的执行阶段。<br>执行完成后，执行结果会被存入查询缓存中。<br>你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p>
<p>但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。<br>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。<br>因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。<br>对于更新压力大的数据库来说，查询缓存的命中率会非常低。<br>除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。（基本不考虑此种情况）</p>
<ol start="4">
<li>分析器</li>
</ol>
<p>如果没有命中查询缓存，就要开始真正执行语句了。<br>把sql中的各种单词意思搞清楚，然后整体的sql语义搞清楚，如果有语法错误，则会报错1064</p>
<ol start="5">
<li>优化器</li>
</ol>
<p>经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。<br>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</p>
<ol start="6">
<li>执行器</li>
</ol>
<p>MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。<br>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，<br>(在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p>
<p>mysql&gt; select * from T where ID=10;<br>ERROR 1142 (42000): SELECT command denied to user ‘b‘@’localhost’ for table ‘T’</p>
<p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。<br>比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p>
<p>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；<br>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。<br>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</p>
<p>至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。</p>
<p>第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。<br>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。<br>这个值就是在执行器每次调用引擎获取数据行的时候累加的。<br>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。</p>
<h3 id="日志系统，一条SQL更新语句是如何执行的"><a href="#日志系统，一条SQL更新语句是如何执行的" class="headerlink" title="日志系统，一条SQL更新语句是如何执行的"></a>日志系统，一条SQL更新语句是如何执行的</h3><ol>
<li>一条sql更新语句</li>
</ol>
<p>mysql&gt; create table T(ID int primary key, c int);</p>
<p>mysql&gt; update T set c=c+1 where ID=2;</p>
<p>首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。<br>在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。<br>这也就是我们一般不建议使用查询缓存的原因。<br>接下来，分析器会通过词法和语法解析知道这是一条更新语句。<br>优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。<br>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，<br>它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。</p>
<ol start="2">
<li>重要的日志模块</li>
</ol>
<p>当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log（酒馆的粉板）<br>里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面（binlog，归档日志），<br>而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p>
<p>如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？<br>这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。</p>
<p>与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，<br>那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写。</p>
<p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。<br>checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。<br>write pos 和 checkpoint 之间的是“粉板”上还空着的部分，<br>可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，<br>得停下来先擦掉一些记录，把 checkpoint 推进一下。</p>
<p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，<br>这个能力称为 crash-safe。要理解 crash-safe 这个概念，可以想想我们前面赊账记录的例子。<br>只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，<br>比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。</p>
<ol start="3">
<li>重要的日志模块：binlog</li>
</ol>
<p>MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；<br>还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 redo log 是 InnoDB 引擎特有的日志，<br>而 Server 层也有自己的日志，称为 binlog（归档日志）。</p>
<p>为什么会有两份日志呢？因为最开始 MySQL 里并没有 InnoDB 引擎。<br>MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。<br>而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，<br>所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。这两种日志有以下三点不同。</p>
<p>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。<br>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，<br>比如“给 ID=2 这一行的 c 字段加 1 ”。<br>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。<br>“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>
<ul>
<li><p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。<br>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p>
</li>
<li><p>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</p>
</li>
<li><p>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</p>
</li>
<li><p>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</p>
</li>
<li><p>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</p>
</li>
</ul>
<p>你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是”两阶段提交”。</p>
<ol start="4">
<li>两阶段提交。</li>
</ol>
<p>总结：不是两阶段提交时，当遇到mysql异常重启时，会导致redo log和bin log的内容不一致，所以必须两阶段提交，来避免这个问题。<br>两阶段提交，就是为了让两个log在逻辑上保持一致。</p>
<p>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。<br>这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p>
<p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。<br>这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>测试开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql note 002</title>
    <url>/2022/09/26/Mysql-note-002/</url>
    <content><![CDATA[<h3 id="Mysql-事务及索引"><a href="#Mysql-事务及索引" class="headerlink" title="Mysql 事务及索引"></a>Mysql 事务及索引</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。</p>
<ul>
<li>隔离性与隔离级别</li>
</ul>
<p>提到事务，你肯定会想到 ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性），今天我们就来说说其中 I，也就是“隔离性”。<br>当数据库上有多个事务同时执行的时候，就可能出现脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）的问题，<br>为了解决这些问题，就有了“隔离级别”的概念。在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。<br>因此很多时候，我们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。</p>
<p>下面逐一解释：<br>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。（基本都能做到此处隔离）<br>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。（ORACLE的默认隔离级别）<br>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。（Mysql的默认隔离级别）<br>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。（可配置的最严格的隔离级别，当然效率最低）</p>
<ul>
<li>事务隔离的实现</li>
</ul>
<p>同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。</p>
<p>为什么建议你尽量不要使用长事务。长事务意味着系统里面会存在很老的事务视图。<br>由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。<br>在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长事务最终提交，回滚段被清理，文件也不会变小。<br>我见过数据只有 20GB，而回滚段有 200GB 的库。<br>最终只好为了清理回滚段，重建整个库。除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库，这个我们会在后面讲锁的时候展开。</p>
<ul>
<li>事务的启动方式</li>
</ul>
<p>MySQL 的事务启动方式有以下几种：显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语句是 rollback。<br>set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。<br>建议总是使用 set autocommit=1, 通过显式语句的方式来启动事务。</p>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。</p>
<h4 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h4><ul>
<li>哈希表</li>
</ul>
<p>哈希表是一种以键 - 值（key-value）存储数据的结构，我们只要输入待查找的键即 key，就可以找到其对应的值即 Value。<br>哈希的思路很简单，把值放在数组里，用一个哈希函数把 key 换算成一个确定的位置，然后把 value 放在数组的这个位置。<br>不可避免地，多个 key 值经过哈希函数的换算，会出现同一个值的情况。处理这种情况的一种方法是，拉出一个链表。</p>
<p>优点：哈希表这种结构适用于只有等值查询的场景（比较好理解）<br>缺点：做区间查询速度很慢</p>
<ul>
<li>有序数组</li>
</ul>
<p>有序数组在等值查询和范围查询场景中的性能就都非常优秀。<br>比如查询，用二分法就可以快速得到，这个时间复杂度是 O(log(N))。（优点）</p>
<p>如果仅仅看查询效率，有序数组就是最好的数据结构了。但是，在需要更新数据的时候就麻烦了，<br>你往中间插入一个记录就必须得挪动后面所有的记录，成本太高。所以，有序数组索引只适用于静态存储引擎（缺点）</p>
<ul>
<li>二叉搜索树</li>
</ul>
<p>二叉搜索树的特点是：父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。<br>当然为了维持 O(log(N)) 的查询复杂度，你就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是 O(log(N))。</p>
<p>树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。<br>二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。（以前的机械键盘时代，效率非常低）</p>
<p>为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块的大小。<br>以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，<br>这已经 17 亿了。考虑到树根的数据块总是在内存中的，一个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。<br>其实，树的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式</p>
<p>最新技术，如跳表、LSM树等。<br>在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。</p>
<h4 id="InnoDB的索引模型"><a href="#InnoDB的索引模型" class="headerlink" title="InnoDB的索引模型"></a>InnoDB的索引模型</h4><p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。<br>又因为前面我们提到的，InnoDB 使用了 B+ 树索引模型，所以数据都是存储在 B+ 树中的。每一个索引在 InnoDB 里面对应一棵 B+ 树。</p>
<p>实例：</p>
<p>mysql&gt; create table T(<br>id int primary key,<br>k int not null,<br>name varchar(16),<br>index (k))engine=InnoDB;</p>
<p>表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)，两棵树的示例示意图如下。</p>
<p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。主键索引的叶子节点存的是整行数据。<br>在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。非主键索引的叶子节点内容是主键的值。<br>在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。<br>根据上面的索引结构说明，我们来讨论一个问题：基于主键索引和普通索引的查询有什么区别？</p>
<p>如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树；<br>如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引树，得到 ID 的值为 500，再到 ID 索引树搜索一次。<br>这个过程称为回表。也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。（回表的概念1，重点内容1）</p>
<h4 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h4><p>B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行 ID 值为 700，则只需要在 R5 的记录后面插入一个新记录。<br>如果新插入的 ID 值为 400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。而更糟的情况是，如果 R5 所在的数据页已经满了，根据 B+ 树的算法，<br>这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。</p>
<p>除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。<br>当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p>
<p>哪些场景需要使用自增主键？</p>
<p>自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。<br>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</p>
<p>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。<br>有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：只有一个索引；该索引必须是唯一索引。<br>你一定看出来了，这就是典型的 KV 场景。由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。<br>这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。<br>由于 InnoDB 是索引组织表，一般情况下我会建议你创建一个自增主键，这样非主键索引占用的空间最小。但事无绝对，我也跟你讨论了使用业务逻辑字段做主键的应用场景。</p>
<h4 id="避免回表的方法（回表的概念2，重点内容2）"><a href="#避免回表的方法（回表的概念2，重点内容2）" class="headerlink" title="避免回表的方法（回表的概念2，重点内容2）"></a>避免回表的方法（回表的概念2，重点内容2）</h4><p>mysql&gt; create table T (<br>ID int primary key,<br>k int NOT NULL DEFAULT 0,<br>s varchar(16) NOT NULL DEFAULT ‘’,<br>index k(k))<br>engine=InnoDB;</p>
<p>insert into T values(100,1, ‘aa’),(200,2,’bb’),(300,3,’cc’),(500,5,’ee’),(600,6,’ff’),(700,7,’gg’);<br>在下面这个表 T 中，如果我执行 select * from T where k between 3 and 5，需要执行几次树的搜索操作，会扫描多少行？</p>
<p>现在，我们一起来看看这条 SQL 查询语句的执行流程：<br>在 k 索引树上找到 k=3 的记录，取得 ID = 300；<br>再到 ID 索引树查到 ID=300 对应的 R3；<br>在 k 索引树取下一个值 k=5，取得 ID=500；<br>再回到 ID 索引树查到 ID=500 对应的 R4；<br>在 k 索引树取下一个值 k=6，不满足条件，循环结束。</p>
<p>在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了 k 索引树的 3 条记录（步骤 1、3 和 5），回表了两次（步骤 2 和 4）。<br>在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。</p>
<p>那么，有没有可能经过索引优化，避免回表过程呢？</p>
<h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，<br>因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。<br>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p>
<p>基于上面覆盖索引的说明，我们来讨论一个问题：在一个市民信息表上，是否有必要将身份证号和名字建立联合索引？假设这个市民表的定义是这样的：</p>
<p>CREATE TABLE <code>tuser</code> (<br>  <code>id</code> int(11) NOT NULL,<br>  <code>id_card</code> varchar(32) DEFAULT NULL,<br>  <code>name</code> varchar(32) DEFAULT NULL,<br>  <code>age</code> int(11) DEFAULT NULL,<br>  <code>ismale</code> tinyint(1) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>),<br>  KEY <code>id_card</code> (<code>id_card</code>),<br>  KEY <code>name_age</code> (<code>name</code>,<code>age</code>)<br>) ENGINE=InnoDB</p>
<p>我们知道，身份证号是市民的唯一标识。也就是说，如果有根据身份证号查询市民信息的需求，我们只要在身份证号字段上建立索引就够了。<br>而再建立一个（身份证号、姓名）的联合索引，是不是浪费空间？如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，这个联合索引就有意义了。<br>它可以在这个高频请求上用到覆盖索引，不再需要回表查整行记录，减少语句的执行时间。当然，索引字段的维护总是有代价的。<br>因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。</p>
<h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><p>如果为每一种查询都设计一个索引，索引是不是太多了。如果我现在要按照市民的身份证号去查他的家庭地址呢？<br>虽然这个查询需求在业务中出现的概率不高，但总不能让它走全表扫描吧？<br>反过来说，单独为一个不频繁的请求创建一个（身份证号，地址）的索引又感觉有点浪费。</p>
<p>应该怎么做呢？这里，我先和你说结论吧。B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。<br>不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。<br>基于上面对最左前缀索引的说明，我们来讨论一个问题：在建立联合索引的时候，如何安排索引内的字段顺序。<br>这里我们的评估标准是，索引的复用能力。因为可以支持最左前缀，所以当已经有了 (a,b) 这个联合索引后，一般就不需要单独在 a 上建立索引了。<br>因此，第一原则是，如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。<br>所以现在你知道了，这段开头的问题里，我们要为高频请求创建 (身份证号，姓名）这个联合索引，并用这个索引支持“根据身份证号查询地址”的需求。<br>那么，如果既有联合查询，又有基于 a、b 各自的查询呢？查询条件里面只有 b 的语句，是无法使用 (a,b) 这个联合索引的，这时候你不得不维护另外一个索引，<br>也就是说你需要同时维护 (a,b)、(b) 这两个索引。这时候，我们要考虑的原则就是空间了。<br>比如上面这个市民表的情况，name 字段是比 age 字段大的 ，那我就建议你创建一个（name,age) 的联合索引和一个 (age) 的单字段索引。</p>
<h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>上一段我们说到满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。这时，你可能要问，那些不符合最左前缀的部分，会怎么样呢？我们还是以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p>
<p>mysql&gt; select * from tuser where name like ‘张%’ and age=10 and ismale=1;</p>
<p>你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。<br>当然，这还不错，总比全表扫描要好。然后呢？当然是判断其他条件是否满足。在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。<br>到主键索引上找出数据行，再对比字段值。而 MySQL 5.6 引入的索引下推优化（index condition pushdown)，<br>可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p>
<p>总结，总的原则：在满足语句需求的情况下， 尽量少地访问资源是数据库设计的重要原则之一。我们在使用数据库的时候，尤其是在设计表结构时，也要以减少资源消耗作为目标.</p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>测试开发</tag>
      </tags>
  </entry>
</search>
